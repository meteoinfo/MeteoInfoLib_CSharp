<?xml version="1.0"?>
<doc>
    <assembly>
        <name>wContour</name>
    </assembly>
    <members>
        <member name="T:wContour.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="F:wContour.Border.LineList">
            <summary>
            Line list
            </summary>
        </member>
        <member name="M:wContour.Border.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:wContour.Border.LineNum">
            <summary>
            Get line number
            </summary>
        </member>
        <member name="T:wContour.Contour">
            <summary>
            Contour
            </summary>
        </member>
        <member name="M:wContour.Contour.TracingContourLines(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double[],System.Double,System.Collections.Generic.List{wContour.Border},System.Int32[0:,0:])">
            <summary>
            Tracing contour lines from the grid data with undefine data
            </summary>
            <param name="S0">input grid data</param>
            <param name="X">X coordinate array</param>
            <param name="Y">Y coordinate array</param>
            <param name="nc">number of contour values</param>
            <param name="contour">contour value array</param>
            <param name="undefData">Undefine data</param>
            <param name="borders">borders</param>
            <param name="S1">data flag array</param>
            <returns>Contour line list</returns>
        </member>
        <member name="M:wContour.Contour.TracingBorders(System.Double[0:,0:],System.Double[],System.Double[],System.Int32[0:,0:]@,System.Double)">
            <summary>
            Tracing contour borders of the grid data with undefined data.
            Grid data are from left to right and from bottom to top.
            Grid data array: first dimention is Y, second dimention is X.
            </summary>
            <param name="S0">grid data</param>
            <param name="X">x coordinate</param>
            <param name="Y">y coordinate</param>
            <param name="S1"></param>
            <param name="undefData">undefine data</param>
            <returns>borderline list</returns>
        </member>
        <member name="M:wContour.Contour.CreateContourLines_UndefData(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double[],System.Double,System.Double,System.Int32[0:,0:],System.Double,System.Collections.Generic.List{wContour.Border})">
            <summary>
            Create contour lines from the grid data with undefine data
            </summary>
            <param name="S0">input grid data</param>
            <param name="X">X coordinate array</param>
            <param name="Y">Y coordinate array</param>
            <param name="nc">number of contour values</param>
            <param name="contour">contour value array</param>
            <param name="nx">interval of X coordinate</param>
            <param name="ny">interval of Y coordinate</param>
            <param name="S1"></param>
            <param name="undefData">Undefine data</param>
            <param name="borders">Border line list</param>
            <returns>Contour line list</returns>
        </member>
        <member name="M:wContour.Contour.CreateContourLines(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double[],System.Double,System.Double)">
            <summary>
            Create contour lines
            </summary>
            <param name="S0">input grid data array</param>
            <param name="X">X coordinate array</param>
            <param name="Y">Y coordinate array</param>
            <param name="nc">number of contour values</param>
            <param name="contour">contour value array</param>
            <param name="nx">Interval of X coordinate</param>
            <param name="ny">Interval of Y coordinate</param>
            <returns></returns>
        </member>
        <member name="M:wContour.Contour.CutContourWithPolygon(System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Cut contour lines with a polygon. Return the polylines inside of the polygon
            </summary>
            <param name="alinelist">polyline list</param>
            <param name="polyList">border points of the cut polygon</param>
            <returns>Inside Polylines after cut</returns>
        </member>
        <member name="M:wContour.Contour.CutContourLines(System.Collections.Generic.List{wContour.PolyLine},wContour.Border)">
            <summary>
            Cut contour lines with a polygon. Return the polylines inside of the polygon
            </summary>
            <param name="alinelist">polyline list</param>
            <param name="aBorder">border for cutting</param>
            <returns>Inside Polylines after cut</returns>
        </member>
        <member name="M:wContour.Contour.SmoothLines(System.Collections.Generic.List{wContour.PolyLine})">
            <summary>
            Smooth Polylines
            </summary>
            <param name="aLineList">Polyline list</param>
            <returns>Polyline list after smoothing</returns>
        </member>
        <member name="M:wContour.Contour.SmoothLines(System.Collections.Generic.List{wContour.PolyLine},System.Single)">
            <summary>
            Smooth Polylines
            </summary>
            <param name="aLineList">Polyline list</param>
            <param name="step">B-Spline scan step (0 - 1)</param>
            <returns>Polyline list after smoothing</returns>
        </member>
        <member name="M:wContour.Contour.SmoothPoints(System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Smooth points
            </summary>
            <param name="pointList">point list</param>
            <returns>new points</returns>
        </member>
        <member name="M:wContour.Contour.TracingPolygons(System.Double[0:,0:],System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.Border},System.Double[])">
            <summary>
            Tracing polygons from contour lines and borders
            </summary>
            <param name="S0">input grid data</param>
            <param name="cLineList">contour lines</param>
            <param name="borderList">borders</param>
            <param name="contour">contour values</param>
            <returns>traced contour polygons</returns>
        </member>
        <member name="M:wContour.Contour.CreateContourPolygons(System.Collections.Generic.List{wContour.PolyLine},wContour.Extent,System.Double[])">
            <summary>
            Create contour polygons
            </summary>
            <param name="LineList">contour lines</param>
            <param name="aBound">gid data extent</param>
            <param name="contour">contour values</param>
            <returns>contour polygons</returns>
        </member>
        <member name="M:wContour.Contour.CreateCutContourPolygons(System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.PointD},wContour.Extent,System.Double[])">
            <summary>
            Create polygons from cutted contour lines
            </summary>
            <param name="LineList">polylines</param>
            <param name="polyList">Border point list</param>
            <param name="aBound">extent</param>
            <param name="contour">contour values</param>
            <returns>contour polygons</returns>
        </member>
        <member name="M:wContour.Contour.CreateBorderContourPolygons(System.Double[0:,0:],System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.Border},wContour.Extent,System.Double[])">
            <summary>
            Create contour polygons from borders
            </summary>
            <param name="S0">Input grid data array</param>
            <param name="cLineList">Contour lines</param>
            <param name="borderList">borders</param>
            <param name="aBound">extent</param>
            <param name="contour">contour value</param>
            <returns>contour polygons</returns>
        </member>
        <member name="M:wContour.Contour.PointInPolygon(System.Collections.Generic.List{wContour.PointD},wContour.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="poly">polygon border</param>
            <param name="aPoint">point</param>
            <returns>If the point is in the polygon</returns>
        </member>
        <member name="M:wContour.Contour.PointInPolygon(wContour.Polygon,wContour.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="aPolygon">polygon</param>
            <param name="aPoint">point</param>
            <returns>is in</returns>
        </member>
        <member name="M:wContour.Contour.ClipPolylines(System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Clip polylines with a border polygon
            </summary>
            <param name="polylines">polyline list</param>
            <param name="clipPList">cutting border point list</param>
            <returns>cutted polylines</returns>
        </member>
        <member name="M:wContour.Contour.ClipPolygons(System.Collections.Generic.List{wContour.Polygon},System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Clip polygons with a border polygon
            </summary>
            <param name="polygons">polygon list</param>
            <param name="clipPList">cutting border point list</param>
            <returns>cutted polygons</returns>
        </member>
        <member name="M:wContour.Contour.TracingStreamline(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
            Tracing stream lines
            </summary>
            <param name="U">U component array</param>
            <param name="V">V component array</param>
            <param name="X">X coordinate array</param>
            <param name="Y">Y coordinate array</param>
            <param name="UNDEF">undefine data</param>
            <param name="density">stream line density</param>
            <returns>streamlines</returns>
        </member>
        <member name="M:wContour.Contour.BSplineScanning(System.Collections.Generic.List{wContour.PointD},System.Boolean,System.Single)">
            <summary>
            B-Spline interpolation
            </summary>
            <param name="pointList">Point list</param>
            <param name="isClose">Is closed or not</param>
            <param name="step">Scan step (0 - 1)</param>
            <returns>Interpolated points</returns>
        </member>
        <member name="M:wContour.Contour.IsClockwise(System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Determin if the point list is clockwise
            </summary>
            <param name="pointList">point list</param>
            <returns>clockwise or not</returns>
        </member>
        <member name="M:wContour.Contour.GetCrossPoint(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Get cross point of two line segments
            </summary>
            <param name="aP1">point 1 of line a</param>
            <param name="aP2">point 2 of line a</param>
            <param name="bP1">point 1 of line b</param>
            <param name="bP2">point 2 of line b</param>
            <returns>cross point</returns>
        </member>
        <member name="T:wContour.BorderLine">
            <summary>
            Border line
            </summary>
        </member>
        <member name="F:wContour.BorderLine.area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:wContour.BorderLine.extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:wContour.BorderLine.isOutLine">
            <summary>
            Is outline
            </summary>
        </member>
        <member name="F:wContour.BorderLine.isClockwise">
            <summary>
            Is clockwise
            </summary>
        </member>
        <member name="F:wContour.BorderLine.pointList">
            <summary>
            Point list
            </summary>
        </member>
        <member name="F:wContour.BorderLine.ijPointList">
            <summary>
            IJPoint list
            </summary>
        </member>
        <member name="T:wContour.BorderPoint">
            <summary>
            Border point
            </summary>
        </member>
        <member name="F:wContour.BorderPoint.Id">
            <summary>
            Identifer
            </summary>
        </member>
        <member name="F:wContour.BorderPoint.BorderIdx">
            <summary>
            Border index
            </summary>
        </member>
        <member name="F:wContour.BorderPoint.BInnerIdx">
            <summary>
            Border inner index
            </summary>
        </member>
        <member name="F:wContour.BorderPoint.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:wContour.BorderPoint.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:wContour.BorderPoint.Clone">
            <summary>
            Clone
            </summary>
            <returns>cloned borderpoint</returns>
        </member>
        <member name="T:wContour.EndPoint">
            <summary>
            End point
            </summary>
        </member>
        <member name="F:wContour.EndPoint.sPoint">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:wContour.EndPoint.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:wContour.EndPoint.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="F:wContour.EndPoint.BorderIdx">
            <summary>
            Border Index
            </summary>
        </member>
        <member name="M:wContour.EndPoint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:wContour.Extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:wContour.Extent.xMin">
            <summary>
            x minimum
            </summary>
        </member>
        <member name="F:wContour.Extent.yMin">
            <summary>
            y minimum
            </summary>
        </member>
        <member name="F:wContour.Extent.xMax">
            <summary>
            x maximum
            </summary>
        </member>
        <member name="F:wContour.Extent.yMax">
            <summary>
            y maximum
            </summary>
        </member>
        <member name="M:wContour.Extent.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:wContour.Extent.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="minX">minimum x</param>
            <param name="maxX">maximum x</param>
            <param name="minY">minimum y</param>
            <param name="maxY">maximum y</param>
        </member>
        <member name="M:wContour.Extent.Include(wContour.Extent)">
            <summary>
            Judge if this extent include another extent
            </summary>
            <param name="bExtent">extent</param>
            <returns>is included</returns>
        </member>
        <member name="T:wContour.IJPoint">
            <summary>
            Point integer, to indicate the position in grid data
            </summary>
        </member>
        <member name="F:wContour.IJPoint.I">
            <summary>
            I
            </summary>
        </member>
        <member name="F:wContour.IJPoint.J">
            <summary>
            J
            </summary>
        </member>
        <member name="T:wContour.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:wContour.Line.P1">
            <summary>
            Point 1
            </summary>
        </member>
        <member name="F:wContour.Line.P2">
            <summary>
            Point 2
            </summary>
        </member>
        <member name="T:wContour.PointD">
            <summary>
            Point - double x/y
            </summary>
        </member>
        <member name="F:wContour.PointD.X">
            <summary>
            x
            </summary>
        </member>
        <member name="F:wContour.PointD.Y">
            <summary>
            y
            </summary>
        </member>
        <member name="M:wContour.PointD.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:wContour.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:wContour.PointD.Clone">
            <summary>
            Clone
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="T:wContour.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:wContour.Polygon.IsBorder">
            <summary>
            If is border contour polygon
            </summary>
        </member>
        <member name="F:wContour.Polygon.IsInnerBorder">
            <summary>
            If there is only inner border
            </summary>
        </member>
        <member name="F:wContour.Polygon.LowValue">
            <summary>
            Start value
            </summary>
        </member>
        <member name="F:wContour.Polygon.HighValue">
            <summary>
            End value
            </summary>
        </member>
        <member name="F:wContour.Polygon.IsClockWise">
            <summary>
            If clockwise
            </summary>
        </member>
        <member name="F:wContour.Polygon.StartPointIdx">
            <summary>
            Start point index
            </summary>
        </member>
        <member name="F:wContour.Polygon.IsHighCenter">
            <summary>
            If high center
            </summary>
        </member>
        <member name="F:wContour.Polygon.Extent">
            <summary>
            Extent - bordering rectangle
            </summary>
        </member>
        <member name="F:wContour.Polygon.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:wContour.Polygon.OutLine">
            <summary>
            Outline
            </summary>
        </member>
        <member name="F:wContour.Polygon.HoleLines">
            <summary>
            Hole lines
            </summary>
        </member>
        <member name="F:wContour.Polygon.HoleIndex">
            <summary>
            Hole index
            </summary>
        </member>
        <member name="M:wContour.Polygon.Clone">
            <summary>
            Clone
            </summary>
            <returns>Cloned polygon</returns>
        </member>
        <member name="P:wContour.Polygon.HasHoles">
            <summary>
            Get if has holes
            </summary>
        </member>
        <member name="M:wContour.Polygon.AddHole(wContour.Polygon)">
            <summary>
            Add a hole by a polygon
            </summary>
            <param name="aPolygon">polygon</param>
        </member>
        <member name="M:wContour.Polygon.AddHole(System.Collections.Generic.List{wContour.PointD})">
            <summary>
            Add a hole by point list
            </summary>
            <param name="pList">point list</param>
        </member>
        <member name="T:wContour.PolyLine">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="F:wContour.PolyLine.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:wContour.PolyLine.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="F:wContour.PolyLine.BorderIdx">
            <summary>
            Border index
            </summary>
        </member>
        <member name="F:wContour.PolyLine.PointList">
            <summary>
            Point list
            </summary>
        </member>
        <member name="T:wContour.Interpolate">
            <summary>
            Interpolate
            </summary>
        </member>
        <member name="M:wContour.Interpolate.CreateGridXY_Delt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Create grid x/y coordinate arrays with x/y delt
            </summary>
            <param name="Xlb">X of left-bottom</param>
            <param name="Ylb">Y of left-bottom</param>
            <param name="Xrt">X of right-top</param>
            <param name="Yrt">Y of right-top</param>
            <param name="XDelt">X delt</param>
            <param name="YDelt">Y delt</param>
            <param name="X">Output X array</param>
            <param name="Y">Output Y array</param>
        </member>
        <member name="M:wContour.Interpolate.CreateGridXY_Num(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Create grid x/y coordinate arrays with x/y number
            </summary>
            <param name="Xlb">X of left-bottom</param>
            <param name="Ylb">Y of left-bottom</param>
            <param name="Xrt">X of right-top</param>
            <param name="Yrt">Y of right-top</param>
            <param name="Xnum">X number</param>
            <param name="Ynum">Y number</param>
            <param name="X">Output X array</param>
            <param name="Y">Output Y array</param>
        </member>
        <member name="M:wContour.Interpolate.Interpolation_IDW_Neighbor(System.Double[0:,0:],System.Double[],System.Double[],System.Int32)">
            <summary>
            Interpolation with IDW neighbor method
            </summary>
            <param name="SCoords">Discrete data array</param>
            <param name="X">Grid X array</param>
            <param name="Y">Grid Y array</param>
            <param name="NumberOfNearestNeighbors">Number of nearest neighbors</param>
            <returns>Interpolated grid Data</returns>
        </member>
        <member name="M:wContour.Interpolate.Interpolation_IDW_Neighbor(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double)">
            <summary>
            Interpolation with IDW neighbor method
            </summary>
            <param name="SCoords">Discrete data array</param>
            <param name="X">Grid X array</param>
            <param name="Y">Grid Y array</param>
            <param name="NumberOfNearestNeighbors">Number of nearest neighbors</param>
            <param name="unDefData">Undefine data value</param>
            <returns>Interpolated grid data</returns>
        </member>
        <member name="M:wContour.Interpolate.Interpolation_IDW_Radius(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double,System.Double)">
            <summary>
            Interpolation with IDW neighbor method
            </summary>
            <param name="SCoords">Discrete data array</param>
            <param name="X">Grid X array</param>
            <param name="Y">Grid Y array</param>
            <param name="NeededPointNum">Needed at leat point number</param>
            <param name="radius">Search radius</param>
            <param name="unDefData">Undefine data</param>
            <returns>Interpolated grid data</returns>
        </member>
        <member name="M:wContour.Interpolate.Interpolation_Grid(System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@)">
            <summary>
            Interpolate from grid data using bi-linear method
            </summary>
            <param name="GridData">input grid data</param>
            <param name="X">input x coordinates</param>
            <param name="Y">input y coordinates</param>
            <param name="unDefData">Undefine data</param>
            <param name="nX">output x coordinates</param>
            <param name="nY">output y coordinates</param>
            <returns>Output grid data</returns>
        </member>
        <member name="M:wContour.Interpolate.Cressman(System.Double[0:,0:],System.Double[],System.Double[],System.Double)">
            <summary>
            Cressman analysis with default radius of 10, 7, 4, 2, 1
            </summary>
            <param name="stationData">station data array - x,y,value</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>
            <param name="unDefData">undefine data</param>        
            <returns>result grid data</returns>
        </member>
        <member name="M:wContour.Interpolate.Cressman(System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Cressman analysis
            </summary>
            <param name="stationData">station data array - x,y,value</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>
            <param name="unDefData">undefine data</param>
            <param name="radList">radius list</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:wContour.Interpolate.AssignPointToGrid(System.Double[0:,0:],System.Double[],System.Double[],System.Double)">
            <summary>
            Assign point value to grid value
            </summary>
            <param name="SCoords">point value array</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="unDefData">undefined value</param>
            <returns>grid data</returns>
        </member>
        <member name="T:wContour.Legend">
            <summary>
            Legend class
            </summary>
        </member>
        <member name="T:wContour.Legend.legendPara">
            <summary>
            Legend parameter
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.isVertical">
            <summary>
            If is vertical
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.startPoint">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.contourValues">
            <summary>
            Contour values
            </summary>
        </member>
        <member name="F:wContour.Legend.legendPara.isTriangle">
            <summary>
            If is triangle
            </summary>
        </member>
        <member name="T:wContour.Legend.lPolygon">
            <summary>
            Legend polygon
            </summary>
        </member>
        <member name="F:wContour.Legend.lPolygon.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:wContour.Legend.lPolygon.isFirst">
            <summary>
            If is first
            </summary>
        </member>
        <member name="F:wContour.Legend.lPolygon.pointList">
            <summary>
            Point list
            </summary>
        </member>
        <member name="M:wContour.Legend.CreateLegend(wContour.Legend.legendPara)">
            <summary>
            Create legend polygons
            </summary>
            <param name="aLegendPara"> legend parameters</param>
            <returns>legend polygons</returns>
        </member>
    </members>
</doc>

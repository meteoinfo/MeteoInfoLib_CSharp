<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MeteoInfoC</name>
    </assembly>
    <members>
        <member name="T:MeteoInfoC.Analysis.Clustering">
            <summary>
            Clustering
            </summary>
        </member>
        <member name="M:MeteoInfoC.Analysis.Clustering.Clustering_Cal(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Clustering calculation
            </summary>
            <param name="inFile">input file</param>
            <param name="outFile">output file</param>
            <param name="N">row number</param>
            <param name="M">column number</param>
            <param name="LN">Level number</param>
            <param name="DISTYPE">Distant define type: Euclidean or Angle</param>
        </member>
        <member name="M:MeteoInfoC.Analysis.Clustering.Clustering_Cal(System.Double[0:,0:],System.String,System.Int32,System.String)">
            <summary>
            Clustering calculation
            </summary>
            <param name="DATA">input data array</param>
            <param name="outFile">output file</param>
            <param name="LN">Level number</param>
            <param name="DISTYPE">Distant define type: Euclidean or Angle</param>
        </member>
        <member name="M:MeteoInfoC.Analysis.Clustering.Clustering_Cal(System.Double[0:,0:],System.Int32,System.String)">
            <summary>
            Clustering calculation
            </summary>
            <param name="DATA">input data array</param>
            <param name="LN">Level number</param>
            <param name="DISTYPE">Distant define type: Euclidean or Angle</param>
            <returns>clustering result array</returns>
        </member>
        <member name="T:MeteoInfoC.Analysis.Statistics">
            <summary>
            Statistics
            </summary>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Mean(System.Collections.Generic.List{System.Double})">
            <summary>
            Mean
            </summary>
            <param name="aDataList">data list</param>
            <returns>Mean</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Maximum(System.Collections.Generic.List{System.Double})">
            <summary>
            Maximum
            </summary>
            <param name="aDataList">data list</param>
            <returns>Maximum</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Maximum(System.Collections.Generic.List{System.Int32})">
            <summary>
            Maximum
            </summary>
            <param name="aDataList">data list</param>
            <returns>Maximum</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Minimum(System.Collections.Generic.List{System.Double})">
            <summary>
            Minimum
            </summary>
            <param name="aDataList">data list</param>
            <returns>Minimum</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Median(System.Collections.Generic.List{System.Double})">
            <summary>
            Median
            </summary>
            <param name="aDataList">data list</param>
            <returns>Median</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.Quantile(System.Collections.Generic.List{System.Double},System.Int32)">
            <summary>
            Quantile
            </summary>
            <param name="aDataList">data list</param>
            <param name="aNum">quantile index</param>
            <returns>quantile value</returns>
        </member>
        <member name="M:MeteoInfoC.Analysis.Statistics.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            StandartDeviation
            </summary>
            <param name="aDataList">data list</param>
            <returns>standard deviation</returns>
        </member>
        <member name="T:MeteoInfoC.Data.Bytes2Number">
            <summary>
            Convert bytes to number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.Bytes2Number.UNDEF">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int2(System.Byte,System.Byte)">
            <summary>
            Convert two bytes into a signed integer.
            </summary>
            <param name="a">higher byte</param>
            <param name="b">lower byte</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int2(System.IO.BinaryReader)">
            <summary>
            Read signed integer of 2 bytes from binary reader
            </summary>
            <param name="br">binary reader</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert three bytes into a signed integer.
            </summary>
            <param name="a">higher byte</param>
            <param name="b">middle part byte</param>
            <param name="c">lower byte</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert four bytes into a signed integer.
            </summary>
            <param name="a">highest byte</param>
            <param name="b">higher middle byte</param>
            <param name="c">lower middle byte</param>
            <param name="d">lowest byte</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int4(System.IO.BinaryReader)">
            <summary>
            Read signed integer of 4 bytes from binary reader
            </summary>
            <param name="br">binary reader</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Uint2(System.Byte,System.Byte)">
            <summary>
            Convert two bytes into an unsigned integer.
            </summary>
            <param name="a">higher byte</param>
            <param name="b">lower byte</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Uint2(System.IO.BinaryReader)">
            <summary>
            Read unsigned integer from binary reader
            </summary>
            <param name="br">binary reader</param>
            <returns>unsigned integer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Uint3(System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert three bytes into an unsigned integer.
            </summary>
            <param name="a">higher byte</param>
            <param name="b">middle byte</param>
            <param name="c">lower byte</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Uint4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert four bytes into an unsigned integer
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Float(System.IO.BinaryReader)">
            <summary>
            Read a float value from binary reader
            </summary>
            <param name="br">binary reader</param>
            <returns>float value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Float4(System.IO.BinaryReader)">
            <summary>
            Read a float value from binary reader
            </summary>
            <param name="br">binary reader</param>
            <returns>float value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Float4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Convert four bytes into a float value.
            </summary>
            <param name="a">highest byte</param>
            <param name="b">higher byte</param>
            <param name="c">lower byte</param>
            <param name="d">lowest byte</param>
            <returns>float value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.UInt(System.Byte[])">
            <summary>
            Convert bytes array into an unsigned integer
            </summary>
            <param name="bytes">bytes array</param>
            <returns>integer value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.Bytes2Number.Int8(System.Byte[])">
            <summary>
            Convert 8 bytes into a signed long.
            </summary>
            <param name="bytes">8 bytes</param>
            <returns>signed long</returns>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.frmAddField.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmAddField.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmAddField.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.frmAttriData.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmAttriData.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmAttriData.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.frmInputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmInputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.frmInputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.AttributeTable">
            <summary>
            A class for controling the attribute Table related information for a shapefile.
            </summary>    
        </member>
        <member name="E:MeteoInfoC.Data.MapData.AttributeTable.AttributesFilled">
            <summary>
            Occurs after content has been loaded into the attribute data.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.#ctor">
            <summary>
            Creates a new instance of an attribute Table with no file reference
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.#ctor(System.String)">
            <summary>
            Creates a new AttributeTable with the specified filename, or opens
            an existing file with that name.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Open(System.String)">
            <summary>
            Reads all the information from the file, including the vector shapes and the database component.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Clone">
            <summary>
            Clone
            </summary>
            <returns>attribute table</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Fill(System.Int32)">
            <summary>
            This populates the Table with data from the file.
            </summary>
            <param name="numRows">In the event that the dbf file is not found, this indicates how many blank rows should exist in the attribute Table.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Save">
            <summary>
            Attempts to save the file to the path specified by the Filename property.
            This should be the .shp extension.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves this Table to the specified filename
            </summary>
            <param name="filename">The string filename to save to</param>
            <param name="overwrite">A boolean indicating whether or not to write over the file if it exists.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.WriteTable">
            <summary>
            This appends the content of one datarow to a dBase file.
            </summary>
            <exception cref="T:System.ArgumentNullException">The columnValues parameter was null</exception>
            <exception cref="T:System.InvalidOperationException">Header records need to be written first.</exception>
            <exception cref="T:System.IO.InvalidDataException">Table property of columnValues parameter cannot be null.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.WriteSpaces(System.Int32)">
            <summary>
            Writes a number of spaces equal to numspaces
            </summary>
            <param name="numspaces">The integer number of spaces to write</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Write(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Write(System.Int64,System.Int32,System.Int32)">
            <summary>
            Writes an integer so that it is formatted for dbf.  This is still buggy since it is possible to lose info here.
            </summary>
            <param name="number">The long value</param>
            <param name="length">The length of the field.</param>
            <param name="decimalCount">The number of digits after the decimal</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Write(System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Write(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="length"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.WriteDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Write the header data to the DBF file.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.ReadTableRowFromChars(System.Int32)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.ReadTableHeader(System.IO.BinaryReader)">
            <summary>
            Read the header data from the DBF file.
            </summary>
            <param name="reader">BinaryReader containing the header.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.UpgradeColumn(MeteoInfoC.Data.MapData.Field,System.Type,System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            This systematically copies all the existing values to a new data column with the same properties,
            but with a new data type.  Values that cannot convert will be set to null.
            </summary>
            <param name="oldDataColumn">The old data column to update</param>
            <param name="newDataType">The new data type that the column should become</param>
            <param name="currentRow">The row up to which values should be changed for</param>
            <param name="columnIndex">The column index of the field being changed</param>
            <param name="table"> The Table to apply this strategy to.</param>
            <returns>An integer list showing the index values of the rows where the conversion failed.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.GetDataTable">
            <summary>
            Get data table
            </summary>
            <returns>data table</returns>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.AttributesPopulated">
            <summary>
            gets or sets whether the Attributes have been populated.  If data was "opened" from a file,
            and a query is made to the DataTable while _attributesPopulated is false, then
            a Fill method will be called automatically
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.HeaderLength">
            <summary>
            The byte length of the header
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.Columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.FileType">
            <summary>
            The file type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.Filename">
            <summary>
            The filename of the dbf file
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.NumRecords">
            <summary>
            Number of records
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.RecordLength">
            <summary>
            The byte length of each record
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.Table">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTable.UpdateDate">
            <summary>
            Last date written to 
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.OnAttributesFilled">
            <summary>
            Fires the AttributesFilled event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.SupplyPageOfData(System.Int32,System.Int32)">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="lowerPageBondary"></param>
            <param name="rowsPerPage"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.GetFileIndex(System.Int32)">
            <summary>
            Accounts for deleted rows and returns the index as it appears in the file
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTable.ReadTableRow(System.Int32,System.Int64,System.Char[],System.Data.DataTable)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.AttributeTableOld">
            <summary>
            A class for controling the attribute Table related information for a shapefile.
            </summary>    
        </member>
        <member name="E:MeteoInfoC.Data.MapData.AttributeTableOld.AttributesFilled">
            <summary>
            Occurs after content has been loaded into the attribute data.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.#ctor">
            <summary>
            Creates a new instance of an attribute Table with no file reference
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.#ctor(System.String)">
            <summary>
            Creates a new AttributeTable with the specified filename, or opens
            an existing file with that name.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Open(System.String)">
            <summary>
            Reads all the information from the file, including the vector shapes and the database component.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Fill(System.Int32)">
            <summary>
            This populates the Table with data from the file.
            </summary>
            <param name="numRows">In the event that the dbf file is not found, this indicates how many blank rows should exist in the attribute Table.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Save">
            <summary>
            Attempts to save the file to the path specified by the Filename property.
            This should be the .shp extension.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.SaveAs(System.String,System.Boolean)">
            <summary>
            Saves this Table to the specified filename
            </summary>
            <param name="filename">The string filename to save to</param>
            <param name="overwrite">A boolean indicating whether or not to write over the file if it exists.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.WriteTable">
            <summary>
            This appends the content of one datarow to a dBase file.
            </summary>
            <exception cref="T:System.ArgumentNullException">The columnValues parameter was null</exception>
            <exception cref="T:System.InvalidOperationException">Header records need to be written first.</exception>
            <exception cref="T:System.IO.InvalidDataException">Table property of columnValues parameter cannot be null.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.WriteSpaces(System.Int32)">
            <summary>
            Writes a number of spaces equal to numspaces
            </summary>
            <param name="numspaces">The integer number of spaces to write</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Write(System.Double,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Write(System.Int64,System.Int32,System.Int32)">
            <summary>
            Writes an integer so that it is formatted for dbf.  This is still buggy since it is possible to lose info here.
            </summary>
            <param name="number">The long value</param>
            <param name="length">The length of the field.</param>
            <param name="decimalCount">The number of digits after the decimal</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Write(System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Write(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="length"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.WriteDate(System.DateTime)">
            <summary>
            
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Write(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.WriteHeader(System.IO.BinaryWriter)">
            <summary>
            Write the header data to the DBF file.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.ReadTableRowFromChars(System.Int32)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.ReadTableHeader(System.IO.BinaryReader)">
            <summary>
            Read the header data from the DBF file.
            </summary>
            <param name="reader">BinaryReader containing the header.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.UpgradeColumn(MeteoInfoC.Data.MapData.Field,System.Type,System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            This systematically copies all the existing values to a new data column with the same properties,
            but with a new data type.  Values that cannot convert will be set to null.
            </summary>
            <param name="oldDataColumn">The old data column to update</param>
            <param name="newDataType">The new data type that the column should become</param>
            <param name="currentRow">The row up to which values should be changed for</param>
            <param name="columnIndex">The column index of the field being changed</param>
            <param name="table"> The Table to apply this strategy to.</param>
            <returns>An integer list showing the index values of the rows where the conversion failed.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.GetDataTable">
            <summary>
            Get data table
            </summary>
            <returns>data table</returns>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.AttributesPopulated">
            <summary>
            gets or sets whether the Attributes have been populated.  If data was "opened" from a file,
            and a query is made to the DataTable while _attributesPopulated is false, then
            a Fill method will be called automatically
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.HeaderLength">
            <summary>
            The byte length of the header
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.Columns">
            <summary>
            The columns
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.FileType">
            <summary>
            The file type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.Filename">
            <summary>
            The filename of the dbf file
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.NumRecords">
            <summary>
            Number of records
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.RecordLength">
            <summary>
            The byte length of each record
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.Table">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.AttributeTableOld.UpdateDate">
            <summary>
            Last date written to 
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.OnAttributesFilled">
            <summary>
            Fires the AttributesFilled event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.SupplyPageOfData(System.Int32,System.Int32)">
            <summary>
            Reads just the content requested in order to satisfy the paging ability of VirtualMode for the DataGridView
            </summary>
            <param name="lowerPageBondary"></param>
            <param name="rowsPerPage"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.GetFileIndex(System.Int32)">
            <summary>
            Accounts for deleted rows and returns the index as it appears in the file
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.Edit(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            saves a single row to the data source.
            </summary>
            <param name="index">the integer row (or FID) index</param>
            <param name="values">The object array holding the new values to store.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.AttributeTableOld.ReadTableRow(System.Int32,System.Int64,System.Char[],System.Data.DataTable)">
            <summary>
            Read a single dbase record
            </summary>
            <returns>Returns an IFeature with information appropriate for the current row in the Table</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.Field">
            <summary>
            This represents the column information for one column of a shapefile.
            This specifies precision as well as the typical column information.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Field._decimalCount">
            <summary>
            Represents the number of decimals to preserve after a 0.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Field._length">
            <summary>
            The length of a field in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Field._dataAddress">
            <summary>
            The data address for the field
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.#ctor(System.Data.DataColumn)">
            <summary>
            Creates a new default field given the specified DataColumn.  Numeric types
            default to a size of 255, but will be shortened during the save opperation.
            The default decimal count for double and long is 0, for Currency is 2, for float is
            3, and for double is 8.  These can be changed by changing the DecimalCount property.
            </summary>
            <param name="inColumn">A System.Data.DataColumn to create a Field from</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.#ctor(System.String)">
            <summary>
            Creates a new instance of a field given only a column name
            </summary>
            <param name="inColumnName">The string Column Name for the new field</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.#ctor(System.String,System.Type)">
            <summary>
            Creates a new Field with a specific name for a specified data type
            </summary>
            <param name="inColumnName">The string name of the column</param>
            <param name="inDataType">The System.Type describing the datatype of the field</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.#ctor(System.String,MeteoInfoC.Data.MapData.FieldDataTypes)">
            <summary>
            Creates a new field with a specific name and using a simplified enumeration of possible types.
            </summary>
            <param name="inColumnName">the string column name.</param>
            <param name="type">The type enumeration that clarifies which basic data type to use.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.#ctor(System.String,System.Char,System.Byte,System.Byte)">
            <summary>
            This creates a new instance.  Since the data type is 
            </summary>
            <param name="columnName"></param>
            <param name="typeCode"></param>
            <param name="length"></param>
            <param name="decimalCount"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.Field.Setup_decimalCount">
            <summary>
            Internal method that decides an appropriate decimal count, given a data column
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.Field.TypeCharacter">
            <summary>
            This is the single character dBase code.  Only some of these are supported with ESRI.
            C - Character (Chars, Strings, objects - as ToString(), and structs - as  )
            D - Date (DateTime)
            T - Time (DateTime)
            N - Number (Short, Integer, Long, Float, Double, byte)
            L - Logic (True-False, Yes-No)
            F - Float
            B - Double
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.Field.DecimalCount">
            <summary>
            Gets or sets the number of places to keep after the 0 in number formats.
            As far as dbf fields are concerned, all numeric datatypes use the same
            database number format.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.Field.Length">
            <summary>
            The character length of the field
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.Field.DataAddress">
            <summary>
            The offset of the field on a row in the file
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.FieldDataTypes">
            <summary>
            FieldDataTypes stores some very simplistic data types to help novices get started more easily.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.FieldDataTypes.Integer">
            <summary>
            32 Bit integer data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.FieldDataTypes.Double">
            <summary>
            Double precision floating point data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.FieldDataTypes.String">
            <summary>
            String data type
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.MapDataManage">
            <summary>
            Map data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.OpenLayer(System.String)">
            <summary>
            Open a layer
            </summary>
            <param name="aFile">layer file path</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadMapFile_ShapeFile(System.String)">
            <summary>
            Read shapefile as map
            </summary>
            <param name="aFile">file name</param>       
            <returns>vectorlayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadMapFile_MICAPS(System.String)">
            <summary>
            Read MICAPS map
            </summary>
            <param name="aFile">file name</param>        
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadMapFile_WMP(System.String)">
            <summary>
            Read WMP map
            </summary>
            <param name="aFile"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.WriteMapFile_WMP(System.String,System.Collections.Generic.List{MeteoInfoC.Shape.Shape})">
            <summary>
            Write WMP map file
            </summary>
            <param name="aFile">output file</param>
            <param name="shapes">shape list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadMapFile_BLN(System.String)">
            <summary>
            Read Surfer BLN map
            </summary>
            <param name="aFile">file path</param>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.WriteMapFile_BLN(System.String,System.Collections.Generic.List{MeteoInfoC.Shape.Shape})">
            <summary>
            Write Sufer BLN map file
            </summary>
            <param name="aFile">output file</param>
            <param name="shapes">shape list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadMapFile_GrADS(System.String)">
            <summary>
            Read GrADS map
            </summary>
            <param name="aFile"></param>   
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.WriteMapFile_GrADS(System.String,System.Collections.Generic.List{MeteoInfoC.Shape.PolylineShape})">
            <summary>
            Write GrADS map file
            </summary>
            <param name="aFile">file name</param>
            <param name="Polylines">PolylineShape list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.WriteMapFile_GrADS(System.String,System.Collections.Generic.List{MeteoInfoC.Shape.PolygonShape})">
            <summary>
            Write GrADS map file
            </summary>
            <param name="aFile">file name</param>
            <param name="Polygons">PolygonShape list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.MapDataManage.ReadImageFile(System.String)">
             <summary>
             Read image file
             </summary>
             <param name="aFile">File name</param>
            <returns>image layer</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.NumberConverter">
            <summary>
            Numbers are based on the old school dbf definitions of data formats, and so can only store
            a very limited range of values.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.NumberConverter.MaximumLength">
            <summary>
            Numbers can contain ASCII text up till 18 characters long, but no longer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of NumberConverter where the length and decimal count are known.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Cycles through the numeric values in the specified column and determines a selection of 
            length and decimal count can accurately store the data.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.RandomDouble">
            <summary>
            Creates a new, random double that is constrained by the specified length and decimal count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.RandomFloat">
            <summary>
            Creates a new, random float that is constrained by the specified length and decimal count.
            </summary>
            <returns>A new float.  Floats can only store about 8 digits of precision, so specifying a high </returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.RandomDecimal">
            <summary>
            Creates a new, random decimal that is constrained by the specified length and decimal count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.RandomChars(System.Int32)">
            <summary>
            Creates a new random array of characters that represents a number and is constrained by the specified length and decimal count
            </summary>
            <param name="numDigits">The integer number of significant (non-zero) digits that should be created as part of the number.</param>
            <returns>A character array of that matches the length and decimal count specified by this properties on this number converter</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.FromString(System.String)">
            <summary>
            Converts from a string, or 0 if the parse failed
            </summary>
            <param name="value">The string value to parse</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToString(System.Double)">
            <summary>
            Converts the specified double value to a string that can be used for the number field
            </summary>
            <param name="number">The double precision floating point value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToString(System.Decimal)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToChar(System.Double)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToChar(System.Single)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToChar(System.Decimal)">
            <summary>
            Converts the specified decimal value to a string that can be used for the number field
            </summary>
            <param name="number">The decimal value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberConverter.ToString(System.Single)">
            <summary>
            Converts the specified float value to a string that can be used for the number field
            </summary>
            <param name="number">The floating point value to convert to a string</param>
            <returns>A string version of the specified number</returns>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.NumberConverter.Length">
            <summary>
            Gets or set the length
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MapData.NumberConverter.DecimalCount">
            <summary>
            Gets or sets the decimal count to use for this number converter
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.NumberException">
            <summary>
            NumberException
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.NumberException.#ctor(System.String)">
            <summary>
            An exception that is specifically fo the NumberConverter class
            </summary>
            <param name="message">The message for the exception</param>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.ShapeFile">
            <summary>
            Shape file
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFile.shapeFileType">
            <summary>
            Shape file type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFile.shapeNum">
            <summary>
            Shape number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFile.extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFile.shapes">
            <summary>
            Shape list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFile.dataTable">
            <summary>
            Data table
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.ShapeFileManage">
            <summary>
            Shape file manage
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.ShapeFileManage.LoadShapeFile(System.String)">
            <summary>
            Load shape file
            </summary>
            <param name="shpfilepath">shape file path</param>        
            <returns>vectorlayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MapData.ShapeFileManage.SaveShapeFile(System.String,MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Save shape file
            </summary>
            <param name="shpfilepath">shape file path</param>
            <param name="aLayer">vectorlayer</param>  
            <returns>if saved</returns>      
        </member>
        <member name="M:MeteoInfoC.Data.MapData.ShapeFileManage.SwapByteOrder(System.Int32)">
            <summary>
            Swaps the byte order of an int32
            </summary>
             <param name="i">Integer to swap</param>
             <returns>Byte Order swapped int32</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.ShapeFileType">
            <summary>
            Shape file type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.NullShape">
            <summary>
            Null shape
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PolyLine">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.MutiPoint">
            <summary>
            MutiPoint
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PointZ">
            <summary>
            PointZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PolyLineZ">
            <summary>
            PolyLineZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PolygonZ">
            <summary>
            PolygonZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.MutiPointZ">
            <summary>
            MutiPointZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PointM">
            <summary>
            PointM
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PolyLineM">
            <summary>
            PolyLineM
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.PolygonM">
            <summary>
            PolygonM
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.MultiPointM">
            <summary>
            MutiPointM
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.ShapeFileType.MultiPatch">
            <summary>
            MutiPath
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.Shape_Point">
            <summary>
            Point shape of shapefile
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Point.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Point.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.Shape_Polygon">
            <summary>
            Polygon shape of shapefile
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Polygon.extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Polygon.numParts">
            <summary>
            Part number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Polygon.numPoints">
            <summary>
            Point number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Polygon.parts">
            <summary>
            Part array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_Polygon.points">
            <summary>
            Point array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MapData.Shape_PolyLine">
            <summary>
            Polyline shape of shapefile
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_PolyLine.extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_PolyLine.numParts">
            <summary>
            Part number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_PolyLine.numPoints">
            <summary>
            Point number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_PolyLine.parts">
            <summary>
            Part array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MapData.Shape_PolyLine.points">
            <summary>
            Point array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.AWXDataInfo">
            <summary>
            AWX data info - The data format of FY satellite products
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.STime">
            <summary>
            start observation time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.ETime">
            <summary>
            end observation time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.ImageBytes">
            <summary>
            Image bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.WorldFileP">
            <summary>
            World file parameter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AWXDataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.AWXDataInfo.XNum">
            <summary>
            Get x number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.AWXDataInfo.YNum">
            <summary>
            Get y number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.AWXDataInfo.ProductType">
            <summary>
            Get or set product type
            ＝1：静止气象卫星图象产品
            ＝2：极轨气象卫星图象产品
            ＝3：格点场定量产品
            ＝4：离散场定量产品
            ＝5：图形和分析产品
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>
            <returns>if ok</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>       
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetIamgeData">
            <summary>
            Get image data
            </summary>
            <returns>image data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetStationInfoDataList">
            <summary>
            Get station info data
            </summary>        
            <returns>station info data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AWXDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DataInfo">
            <summary>
            Data info class
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.FileName">
            <summary>
            Get or set file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.Variables">
            <summary>
            Get or set variables
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.VariableNum">
            <summary>
            Get variable number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.VariableNames">
            <summary>
            Get variable names
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.Times">
            <summary>
            Get or set times
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.TimeNum">
            <summary>
            Get time number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.TimeDimension">
            <summary>
            Get or set time dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.XDimension">
            <summary>
            Get or set X dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.YDimension">
            <summary>
            Get or set Y dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.ZDimension">
            <summary>
            Get or set Z dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.IsXReverse">
            <summary>
            Get or set if x reversed
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.IsYReverse">
            <summary>
            Get or set if y reversed
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.IsGlobal">
            <summary>
            Get or set if is global data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.MissingValue">
            <summary>
            Get or set missing value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataInfo.ProjectionInfo">
            <summary>
            Get or set projectin info
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>
            <returns>Data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DataInfo.GetVariable(System.String)">
            <summary>
            Get variable by name
            </summary>
            <param name="varName">Variable name</param>
            <returns>Variable</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Dimension">
            <summary>
            Dimension
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.#ctor(MeteoInfoC.Data.MeteoData.DimensionType)">
            <summary>
            Constructor
            </summary>
            <param name="dimType">dimension type</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Dimension.DimLength">
            <summary>
            Get dimension length
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Dimension.DimName">
            <summary>
            Get or set dimension name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Dimension.DimType">
            <summary>
            Get or set dimension type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Dimension.DimValue">
            <summary>
            Get dimension values
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Dimension.DimId">
            <summary>
            Get or set dim id
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.Equals(MeteoInfoC.Data.MeteoData.Dimension)">
            <summary>
            Jedge if two dimensions are equals
            </summary>
            <param name="aDim">a dimenstion</param>
            <returns>if equals</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.SetValues(System.Collections.Generic.List{System.Double})">
            <summary>
            Set dimension values
            </summary>
            <param name="values">values</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.SetValues(System.Double[])">
            <summary>
            Set dimension values
            </summary>
            <param name="values">Values</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.GetValues">
            <summary>
            Get dimension values
            </summary>
            <returns>Values</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Dimension.AddValue(System.Double)">
            <summary>
            Add a dimension value
            </summary>
            <param name="value">a value</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DimensionType">
            <summary>
            Dimension type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.X">
            <summary>
            X dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.Y">
            <summary>
            Y dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.Z">
            <summary>
            Z/Level dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.T">
            <summary>
            Time dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.Xtrack">
            <summary>
            Xtrack dimension - for HDF EOS swath data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimensionType.Other">
            <summary>
            Other dimension
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.BYTE">
            <summary>
            BYTE field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.ASCII">
            <summary>
            ASCII field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.SHORT">
            <summary>
            SHORT field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.LONG">
            <summary>
            LONG field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.RATIONAL">
            <summary>
            RATIONAL field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.SBYTE">
            <summary>
            SBYTE field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.UNDEFINED">
            <summary>
            UNDEFINED field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.SSHORT">
            <summary>
            SSHORT field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.SLONG">
            <summary>
            SLONG field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.SRATIONAL">
            <summary>
            SRATIONAL field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.FLOAT">
            <summary>
            FLOAT field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.DOUBLE">
            <summary>
            DOUBLE field type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.Code">
            <summary>
            Code
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FieldType.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FieldType.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="code">Code</param>
            <param name="size">Size</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FieldType.Get(System.Int32)">
            <summary>
            Get field type
            </summary>
            <param name="code">Field type code</param>
            <returns>Field type</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FieldType.ToString">
            <summary>
            To string
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GeoHeader">
            <summary>
            GeoHeader
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo">
            <summary>
            GeoTiff data info
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read GeoTiff data info
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>
            <returns>Data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GeoTiffDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.IFDEntry">
            <summary>
            Image file directory entry
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IFDEntry.Tag">
            <summary>
            Get or set tag
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IFDEntry.Type">
            <summary>
            Get or set type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IFDEntry.Length">
            <summary>
            Get or set length
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IFDEntry.ValueOffset">
            <summary>
            Get or set value/offset
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.KeyEntry">
            <summary>
            KeyEntry
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Tag.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
            <param name="code">code</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Tag.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="code">code</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Tag.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Tag.Code">
            <summary>
            Get or set code
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2Tables">
            <summary>
            GRIB 2 tables
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getProductDefinitionName(System.Int32)">
             productDefinition  Name.
             from code table 4.0.
            
             @param productDefinition productDefinition
             @return ProductDefinitionName
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTypeGenProcessName(System.String)">
             typeGenProcess name.
             GRIB2 - TABLE 4.3
             TYPE OF GENERATING PROCESS
             Section 4, Octet 12
             Created 05/11/05
            
             @param typeGenProcess _more_
             @return GenProcessName
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTypeGenProcessName(System.Int32)">
            <summary>
            Get TypeGenProcessName
            </summary>
            <param name="typeGenProcess">typeGenProcess number</param>
            <returns>typeGenProcessName string</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTimeRangeUnitName(System.Int32)">
             return Time Range Unit Name from code table 4.4.
            
             @param timeRangeUnit timeRangeUnit
             @return TimeRangeUnitName
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTypeSurfaceName(System.Int32)">
             type of vertical coordinate: Name
             code table 4.5.
            
             @param id surface type
             @return SurfaceName
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTypeSurfaceNameShort(System.Int32)">
             type of vertical coordinate: short Name
             derived from code table 4.5.
            
             @param id surfaceType
             @return SurfaceNameShort
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getTypeSurfaceUnit(System.Int32)">
             type of vertical coordinate: Units.
             code table 4.5.
            
             @param id units id as int
             @return surfaceUnit
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getEnsembleType(System.Int32,System.Int32)">
             Makes a Ensemble, Derived, Probability or error type
            
             @param productType,    productType
             @param type            of ensemble, derived, probability
             @return Ensemble type as String
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2Tables.VectorComponentFlag">
             enum for componet_flag  for both Grib2 and Grib1
            
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Tables.VectorComponentFlag.easterlyNortherlyRelative">
            <summary>
            Easterly northerly relative
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Tables.VectorComponentFlag.gridRelative">
            <summary>
            Grid relative
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getGridName(System.Int32)">
             .
            
             @param gdtn Grid definition template number same as type of grid
             @return GridName as a String
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Tables.getShapeName(System.Int32)">
             .
            
             @param shape as an int
             @return shapeName as a String
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.IGridDataInfo">
            <summary>
            Grid data info interface
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IGridDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HDF5DataInfo">
            <summary>
            HDF 5 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HDF5DataInfo.X">
            <summary>
            X coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HDF5DataInfo.Y">
            <summary>
            Y coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HDF5DataInfo.Levels">
            <summary>
            level list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.HDF5DataInfo.CurrentVariable">
            <summary>
            Get or set current variable
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.HDF5DataInfo.IsSWATH">
            <summary>
            Get if is SWATH
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info from a file
            </summary>
            <param name="aFile">file path</param>
            <returns>is ok</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HDF5DataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MetaGroup">
            <summary>
            HDF4 MetaGroup
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaGroup.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="lines">lines</param>
            <param name="groupName">group name</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MetaGroup.ParaLines">
            <summary>
            Get parameter lines
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MetaGroup.Lines">
            <summary>
            Get lines
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaGroup.GetGroup(System.String)">
            <summary>
            Get meta group
            </summary>
            <param name="groupName">group name</param>
            <returns>meta group</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaGroup.GetObject(System.String)">
            <summary>
            Get meta object
            </summary>
            <param name="objectName">object name</param>
            <returns>meta object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaGroup.GetParaStr(System.String)">
            <summary>
            Get parameter string value
            </summary>
            <param name="paraName">parameter name</param>
            <returns>string value</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MetaObject">
            <summary>
            Meta object
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaObject.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Constructor
            </summary>
            <param name="lines">lines</param>
            <param name="objectName">object name</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MetaObject.ParaLines">
            <summary>
            Get parameter lines
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MetaObject.GetParaStr(System.String)">
            <summary>
            Get parameter string value
            </summary>
            <param name="paraName">parameter name</param>
            <returns>string value</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HRITDataInfo">
            <summary>
            LRIT/HRIT data info - for meteorological satellite
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.PrimaryHeader.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.PrimaryHeader.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.PrimaryHeader.File_Type_Code">
            <summary>
            File type code
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.PrimaryHeader.Total_Header_Length">
            <summary>
            Total header length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.PrimaryHeader.Data_Field_Length">
            <summary>
            Data field length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.NB">
            <summary>
            Number of bits per pixel - 16: for image data; 1: for overlay data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.NC">
            <summary>
            Number of columns
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.NL">
            <summary>
            Number of lines
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageStructure.Compression_Flag">
            <summary>
            Compression flag - 0: no compression; 1: lossless compression; 2: lossy compression
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.Projection_Name">
            <summary>
            Projection name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.CFAC">
            <summary>
            Column scaling factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.LFAC">
            <summary>
            Line scaling factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.COFF">
            <summary>
            Column offset
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageNavigation.LOFF">
            <summary>
            Line offset
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageDataFunction.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageDataFunction.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageDataFunction.Data_Definition_Block">
            <summary>
            Data definition block
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.Annotation.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.Annotation.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.Annotation.Annotation_Text">
            <summary>
            Annotation text
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.TimeStamp.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.TimeStamp.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.TimeStamp.CDS_P_Field">
            <summary>
            P-Field fixed vlue according to CCSDS
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.TimeStamp.CDS_T_Field">
            <summary>
            T-Field according to CCSDS
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageSegmentIdentification.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageSegmentIdentification.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageSegmentIdentification.Image_Segm_Seq_No">
            <summary>
            Image segment sequence number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageSegmentIdentification.Total_No_Image_Segm">
            <summary>
            Total number of image segments
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageSegmentIdentification.Line_No_Image_Segm">
            <summary>
            Line number of the image segment
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageCompensationInformation.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageCompensationInformation.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageCompensationInformation.Image_Compensation_Information">
            <summary>
            Image compensation information
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageObservationTime.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageObservationTime.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageObservationTime.Image_Observation_Time">
            <summary>
            Image observation time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageQualityInformation.Header_Type">
            <summary>
            Header type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageQualityInformation.Header_Record_Length">
            <summary>
            Header record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageQualityInformation.Image_Quality_Information">
            <summary>
            Image quality information
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.STime">
            <summary>
            start observation time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ETime">
            <summary>
            end observation time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.ImageBytes">
            <summary>
            Image bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.WorldFileP">
            <summary>
            World file parameter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.varList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HRITDataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.HRITDataInfo.XNum">
            <summary>
            Get x number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.HRITDataInfo.YNum">
            <summary>
            Get y number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.HRITDataInfo.ProductType">
            <summary>
            Get product type
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>       
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_All">
            <summary>
            Get all grid data
            </summary>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HRITDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ExpressionBase">
            <summary>The base class for expressions</summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.ExpressionBase.ArgumentCount">
            <summary>Gets the number of arguments this expression uses.</summary>
            <value>The argument count.</value>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.ExpressionBase.Evaluate">
            <summary>Gets or sets the evaluate delegate.</summary>
            <value>The evaluate delegate.</value>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ExpressionBase.Validate(System.Object[])">
            <summary>Validates the specified numbers for the expression.</summary>
            <param name="numbers">The numbers to validate.</param>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.ExpressionBase.ArgumentCount"/>.</exception>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.FunctionExpression">
            <summary>
            A class representing the System.Math function expressions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.FunctionExpression.mathFunctions">
            <summary>The supported math functions by this class.</summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.FunctionExpression"/> class.</summary>
            <param name="function">The function name for this instance.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.FunctionExpression"/> class.</summary>
            <param name="function">The function.</param>
            <param name="validate">if set to <c>true</c> to validate the function name.</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.FunctionExpression.Function">
            <summary>Gets the name function for this instance.</summary>
            <value>The function name.</value>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.Execute(System.Object[])">
            <summary>Executes the function on specified numbers.</summary>
            <param name="numbers">The numbers used in the function.</param>
            <returns>The result of the function execution.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.FunctionExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.Execute_old(System.Object[])">
            <summary>Executes the function on specified numbers.</summary>
            <param name="numbers">The numbers used in the function.</param>
            <returns>The result of the function execution.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.FunctionExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.FunctionExpression.ArgumentCount">
            <summary>Gets the number of arguments this expression uses.</summary>
            <value>The argument count.</value>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.IsFunction(System.String)">
            <summary>Determines whether the specified function name is a function.</summary>
            <param name="function">The function name.</param>
            <returns><c>true</c> if the specified name is a function; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.FunctionExpression.GetFunctionNames">
            <summary>
            Gets the function names.
            </summary>
            <returns>An array of function names.</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.IExpression">
            <summary>
            The interface used when running expressions
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IExpression.ArgumentCount">
            <summary>Gets the number of arguments this expression uses.</summary>
            <value>The argument count.</value>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.IExpression.Evaluate">
            <summary>Gets or sets the evaluate delegate.</summary>
            <value>The evaluate delegate.</value>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MathEvaluate">
            <summary>Delegate used by an expression to do the math evaluation.</summary>
            <param name="numbers">The numbers to evaluate.</param>
            <returns>The result of the evaluated numbers.</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MathOperators">
            <summary>Math Operators</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Add">
            <summary>Add Operator</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Subtract">
            <summary>Subtract Operator</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Multiple">
            <summary>Multiple Operator</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Divide">
            <summary>Divide Operator</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Modulo">
            <summary>Modulo Operator</summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MathOperators.Power">
            <summary>Power Operator</summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MathParser">
            <summary>
            Math parser
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MathParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MathParser.#ctor(MeteoInfoC.Data.MeteoData.MeteoDataInfo)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MathParser.Evaluate(System.String)">
            <summary>Evaluates the specified expression.</summary>
            <param name="expression">The expression to evaluate.</param>
            <returns>The result of the evaluated expression.</returns>
            <exception cref="T:System.ArgumentNullException">When expression is null or empty.</exception>
            <exception cref="T:MeteoInfoC.Data.MeteoData.ParseException">When there is an error parsing the expression.</exception>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2JpegDecoder">
            <summary>
            GRIB 2 Jpeg decoder
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex">
            <summary>
            GRIB message index
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.Position">
            <summary>
            Message start position bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1MessageIndex.Equals(MeteoInfoC.Data.MeteoData.GRIB1MessageIndex)">
            <summary>
            Judge if two message index are equal
            </summary>
            <param name="aMessageIdx">a message index</param>
            <returns>if equal</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Category">
            <summary>
            GRIB 2 category
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Category.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Category.Number">
            <summary>
            Get or set discipline number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Category.Name">
            <summary>
            Get or set discipline name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Category.ParameterTable">
            <summary>
            Get category table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Category.SetParameter(MeteoInfoC.Data.MeteoData.Variable)">
            <summary>
            Add a parameter
            </summary>
            <param name="aPar">parameter</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Category.GetParameter(System.Int32)">
            <summary>
            Get a parameter
            </summary>
            <param name="parNum">parameter number</param>
            <returns>parameter</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Discipline">
            <summary>
            GRIB 2 Discipline
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Discipline.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Discipline.Number">
            <summary>
            Get or set discipline number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Discipline.Name">
            <summary>
            Get or set discipline name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Discipline.CategoryTable">
            <summary>
            Get category table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Discipline.SetCategory(MeteoInfoC.Data.MeteoData.Category)">
            <summary>
            Add a category
            </summary>
            <param name="aCat">category</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Discipline.GetCategory(System.Int32)">
            <summary>
            Get a category
            </summary>
            <param name="catNum">category number</param>
            <returns>category</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection">
            <summary>
            GRIB edition 2 bit map section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection.SectionNum">
            <summary>
            Number of section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection.BitMapIndicator">
            <summary>
            Bit map indicator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection.Bitmap">
            <summary>
            The bit map
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2BitMapSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2DataInfo">
            <summary>
            GRIB edition 2 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.IsLatLon">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.TimeStartPos">
            <summary>
            List of lengths of all records
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.MessageIdxList">
            <summary>
            Message index list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.MessageNumber">
            <summary>
            Total message number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.HeaderLength">
            <summary>
            Header length
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GenerateInfoText">
            <summary>
            Generate info text
            </summary>
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB 1 grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Time/Lon
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Time/Lat
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Lat
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="tIdx">time index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Lon
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="tIdx">time index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Time
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="lonIdx">longitude index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetOneDimData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - level
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="timeIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetOneDimData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - level
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="timeIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - longitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetOneDimData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - longitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - latitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataInfo.GetOneDimData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - latitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection">
            <summary>
            GRIB edition 2 data representation section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.SectionNum">
            <summary>
            Section number: 5
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.DataPoints">
            <summary>
            Number of data points
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.DataTemplateNum">
            <summary>
            Data representation template number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.ReferenceValue">
            <summary>
            Reference value (R) (IEEE 32-bit floating-point value).
            </summary>       
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.BinaryScaleFactor">
            <summary>
            Binary scale factor (E).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.DecimalScaleFactor">
            <summary>
            Decimal scale factor (D).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.NumberOfBits">
            <summary>
            Number of bits used for each packed value.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.originalType">
            <summary>
            data type of original field values.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.splittingMethod">
            <summary>
            Group splitting method used (see Code Table 5.4).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.compressionMethod">
            <summary>
            Type compression method used (see Code Table 5.40000).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.compressionRatio">
            <summary>
            Compression ratio used.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.MissingValueManagement">
            <summary>
            Missing value management used (see Code Table 5.5).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.PrimaryMissingValue">
            <summary>
            Primary missing value substitute.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.SecondaryMissingValue">
            <summary>
            Secondary missing value substitute.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.NumberOfGroups">
            <summary>
            NG - Number of groups of data values into which field is split.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.ReferenceGroupWidths">
            <summary>
            Reference for group widths (see Note 12).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.BitsGroupWidths">
            <summary>
            Number of bits used for the group widths (after the reference value.
            in octet 36 has been removed)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.ReferenceGroupLength">
            <summary>
            Reference for group lengths (see Note 13).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.LengthIncrement">
            <summary>
            Length increment for the group lengths (see Note 14).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.LengthLastGroup">
            <summary>
            Length for the last group (see Note 14).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.BitsScaledGroupLength">
            <summary>
            Number of bits used for the scaled group lengths (after subtraction of
            the reference value given in octets 38-41 and division by the length
            increment given in octet 42).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.OrderSpatial">
            <summary>
            Order of spatial differencing (see Code Table 5.6).
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.DescriptorSpatial">
            <summary>
            Number of octets required in the Data Section to specify extra
            descriptors needed for spatial differencing (octets 6-ww in Data
            Template 7.3) .
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2DataSection">
            <summary>
            GRIB edition 2 data section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataSection.SectionNum">
            <summary>
            Number of section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataSection.Data">
            <summary>
            Unpacked data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataSection.scanMode">
            <summary>
            Scan mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2DataSection.staticMissingValueInUse">
            <summary>
             flag to signifly if a static Missing Value is used. Since it's possible to have different missing values
            in a Grib file, the first record's missing value might not be the correct missing value for the current
            record. If a static missing value is used (float.NaN) then there will be no conflict of missing value
            processing.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2DataSection.#ctor(System.IO.BinaryReader,MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection,MeteoInfoC.Data.MeteoData.GRIB2DataRepresentationSection,MeteoInfoC.Data.MeteoData.GRIB2BitMapSection)">
             <summary>
             Constructor
             </summary>
            <param name="br">binary reader</param>
            <param name="gds">grid definition section</param>
            <param name="drs">data representation section</param>
            <param name="bms">bit map section</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection">
            <summary>
            GRIB edition 2 grid definition section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.tenToNegSix">
            <summary>
            scale factor for Lat/Lon variables in degrees.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.tenToNegThree">
            <summary>
            scale factor for dx and dy variables plus others
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.SectionNum">
            <summary>
            Number of section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.SourceGridDef">
            <summary>
            Source of grid definition
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.NumPoints">
            <summary>
            Number of data points
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.Olon">
            <summary>
            olon > 0 is a quasi regular grid.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.Iolon">
            <summary>
            are extreme points in the quasi regular grid.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.olonPts">
            <summary>
            number of points in each parallel for quasi grids.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.maxPts">
            <summary>
            Max number of points in parallel for quasi grids.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.TemplateNum">
            <summary>
            Grid definition template number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GridName">
            <summary>
            Grid name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.Shape">
            <summary>
            Grid definitions from template 3
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.earthRadius">
            <summary>
            Earth radius
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.majorAxis">
            <summary>
            Major axis
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.minorAxis">
            <summary>
            Minor axis
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.NX">
            <summary>
            Numbe of grid columns
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.NY">
            <summary>
            Number of grid rows
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.Angle">
            <summary>
            Angle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.la1">
            <summary>
            First latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lo1">
            <summary>
            First longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.resolution">
            <summary>
            resolution
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.la2">
            <summary>
            2nd latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lo2">
            <summary>
            2nd longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lad">
            <summary>
            lad
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lov">
            <summary>
            lov
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.dx">
            <summary>
            x-distance between two grid points. can be delta-Lon or delta x.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.dy">
            <summary>
             y-distance of two grid points. can be delta-Lat or delta y.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.grid_units">
            <summary>
            units of the dx and dy variables
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.projectionCenter">
            <summary>
            Projection center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.ScanMode">
            <summary>
            Scan mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.latin1">
            <summary>
            latin1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.latin2">
            <summary>
            latin2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.spLat">
            <summary>
            spLat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.spLon">
            <summary>
            spLon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.rotationangle">
            <summary>
            Rotatoin angle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.poleLat">
            <summary>
            poleLat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.poleLon">
            <summary>
            poleLon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lonofcenter">
            <summary>
            lon of center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.factor">
            <summary>
            factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.n">
            <summary>
            n
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.j">
            <summary>
            j
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.k">
            <summary>
            k
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.m">
            <summary>
            m
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.method">
            <summary>
            method
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.mode">
            <summary>
            mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.xp">
            <summary>
            xp
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.yp">
            <summary>
            yp
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lap">
            <summary>
            lap
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.lop">
            <summary>
            lop
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.xo">
            <summary>
            xo
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.yo">
            <summary>
            yo
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.altitude">
            <summary>
            Altitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.isOrtho">
            <summary>
            Is orthographic projection
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.n2">
            <summary>
            n2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.n3">
            <summary>
            n3
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.ni">
            <summary>
            ni
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.nd">
            <summary>
            nd
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.position">
            <summary>
            position
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.order">
            <summary>
            order
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.nb">
            <summary>
            nb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.nr">
            <summary>
            nr
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.dstart">
            <summary>
            dstart
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetProjectionInfo">
            <summary>
            Get projection info
            </summary>
            <returns>projection info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetXArray">
            <summary>
            Get X coordinate array
            </summary>
            <returns>X array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetYArray">
            <summary>
            Get Y coordinate array
            </summary>
            <returns>Y array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetGaussYArray">
            <summary>
            Get Y coordinate array of Gaussian grid
            </summary>
            <returns>Y coordinate array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetXYArray(System.Double[]@,System.Double[]@)">
            <summary>
            Get X/Y coordinate array
            </summary>
            <param name="X">ref X array</param>
            <param name="Y">ref Y array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetGridName(System.Int32)">
            <summary>
            Get grid name
            </summary>
            <param name="gdtn">grid difinition template number</param>
            <returns>grid name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2GridDefinitionSection.GetShapeName(System.Int32)">
            <summary>
            Get shape name
            </summary>
            <param name="shape">shape integer</param>
            <returns>shape name</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection">
            <summary>
            GRIB edition 2 identification section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.SectionNum">
            <summary>
            Number of section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.MasterTableVersion">
            <summary>
            Parameter Table Version number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.LocalTableVersion">
            <summary>
            Local table version number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.SReferenceTime">
            <summary>
            Significance of reference time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.CenterID">
            <summary>
            Identification of center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.BaseTime">
            <summary>
            Base (analysis) time of the forecast
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.SubCenterID">
            <summary>
            Identification of sub-center (allocated by the originating center.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.ProductStatus">
            <summary>
            Production status of processed data in this GRIB message.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.ProductType">
            <summary>
            Type of processed data in this GRIB message.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.GetCenterIDName">
            <summary>
            Get center identification name
            </summary>
            <returns>center identification name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.GetSReferenceTimeName">
            <summary>
            Get significance reference time name
            </summary>
            <returns>significance reference time name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.GetProductStatusName">
            <summary>
            Get product status name
            </summary>
            <returns>product status name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IdentificationSection.GetProductTypeName">
            <summary>
            Get product type name
            </summary>
            <returns>product type name</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection">
            <summary>
            GRIB edition 2 indicator section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.RecordLength">
            <summary>
            Length in bytes of GRIB record
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.Length">
            <summary>
            Length in bytes of this section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.Edition">
            <summary>
            Edition of GRIB - 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.Discipline">
            <summary>
            Discipline - GRIB Master Table Number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.Title">
            <summary>
            Title - GRIB
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2IndicatorSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2LocalUseSection">
            <summary>
            GRIB edition 2 local use section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2LocalUseSection.Length">
            <summary>
            Section length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2LocalUseSection.SectionNum">
            <summary>
            Number of section
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2LocalUseSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2Message">
            <summary>
            GRIB edition 2 message
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribINS">
            <summary>
            Indicator Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribIDS">
            <summary>
            Identification Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribLUS">
            <summary>
            Local Use Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribGDS">
            <summary>
            Grid Definition Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribPDS">
            <summary>
            Product Definition Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribDRS">
            <summary>
            Data Representation Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribBMS">
            <summary>
            Bit Map Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2Message.GribDS">
            <summary>
            Data Section
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Message.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Message.#ctor(System.IO.BinaryReader,System.Int32,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
            <param name="startSection">start section</param>
            <param name="startPos">start position</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2Message.GetDataArray">
            <summary>
            Get data 2-D array
            </summary>
            <returns>data array</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex">
            <summary>
            GRIB 2 message index
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.MessagePos">
            <summary>
            Message start position bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.DataPos">
            <summary>
            Grid data position. record repeat start postion
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.StartSection">
            <summary>
            repeat start section.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2MessageIndex.Equals(MeteoInfoC.Data.MeteoData.GRIB2MessageIndex)">
            <summary>
            Judge if two message index are equal
            </summary>
            <param name="aMessageIdx">a message index</param>
            <returns>if equal</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2ParameterTable">
            <summary>
            GRIB edition 2 parameter table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ParameterTable.#ctor">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.GRIB2ParameterTable.ParameterTable">
            <summary>
            Parameter table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ParameterTable.GetParameter(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a parameter
            </summary>
            <param name="disNum">discipline number</param>
            <param name="catNum">category number</param>
            <param name="parNum">parameter number</param>
            <returns>parameter</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ParameterTable.GetDiscipline(System.Int32)">
            <summary>
            Get a discipline
            </summary>
            <param name="disNum">discipline number</param>
            <returns>discipline</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection">
            <summary>
            GRIB edition 2 product definition section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.UNDEF">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.Length">
            <summary>
            Length in bytes of this PDS.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.SectionNum">
            <summary>
            Number of this section, should be 4.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.coordinates">
            Number of this coordinates.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.productDefinition">
            productDefinition.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.parameterCategory">
            parameterCategory.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.parameterNumber">
            parameterNumber.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.typeGenProcess">
            typeGenProcess.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.backGenProcess">
            backGenProcess.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.analysisGenProcess">
            analysisGenProcess.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.HoursAfter">
            <summary>
            Hour after
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.minutesAfter">
            minutesAfter.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.timeRangeUnit">
            timeRangeUnit.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.forecastTime">
            forecastTime.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.TypeFirstFixedSurface">
            typeFirstFixedSurface.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.FirstFixedSurfaceValue">
            value of FirstFixedSurface.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.typeSecondFixedSurface">
            typeSecondFixedSurface.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.SecondFixedSurfaceValue">
            SecondFixedSurface Value.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.typeEnsemble">
            Type of Ensemble.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.perturbNumber">
            Perturbation number.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.numberForecasts">
            number of Forecasts.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.nb">
            number of bands.
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.endTI">
            Model Run/Analysis/Reference time.
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetParameter(MeteoInfoC.Data.MeteoData.GRIB2ParameterTable,System.Int32)">
            <summary>
            Get parameter
            </summary>
            <param name="aParTable">parameter table</param>
            <param name="disNum">discipline number</param>
            <returns>parameter</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetProductParameter">
            <summary>
            Get product parameter
            </summary>
            <returns>parameter</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.CalculateIncrement(System.Int32,System.Int32)">
            <summary>
            calculates the increment between time intervals 
            </summary>
            <param name="tui">tui time unit indicator</param>
            <param name="length">length of interval</param>
            <returns>increment</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetForecastTime(System.DateTime)">
            <summary>
            Get forecast time
            </summary>
            <param name="baseTime">base time</param>
            <returns>forecast time</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetProductDefinitionName(System.Int32)">
            <summary>
            Get product definition name
            </summary>
            <param name="productDefinition">definition number</param>
            <returns>product definition name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeEnsemble(System.String)">
            <summary>
            typeEnsemble number.
            </summary>
            <param name="tgp">tyeGenProcess</param>
            <returns>type ensemble</returns>        
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeGenProcess">
            <summary>
            type of Generating Process.
            </summary>
            <returns>type</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeGenProcessName(System.String)">
            <summary>
            typeGenProcess name. GRIB2 - TABLE 4.3  
            </summary>
            <param name="typeGenProcess">type of generating process</param>
            <returns>name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeGenProcessName(System.Int32)">
            <summary>
            Get type of generating process name
            </summary>
            <param name="typeGenProcess">type of generating process</param>
            <returns>name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTimeRangeUnitName(System.Int32)">
            <summary>
            return Time Range Unit Name from code table 4.4.
            </summary>
            <param name="timeRangeUnit">time range unit</param>
            <returns>time range unit name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeSurfaceName(System.Int32)">
            <summary>
            type of vertical coordinate: Name
            </summary>
            <param name="id">id</param>
            <returns>name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeSurfaceNameShort(System.Int32)">
            <summary>
            type of vertical coordinate: short Name
            </summary>
            <param name="id">Surface type id</param>
            <returns>short name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB2ProductDefinitionSection.GetTypeSurfaceUnit(System.Int32)">
            <summary>
            type of vertical coordinate: Units.
            </summary>
            <param name="id">units id</param>
            <returns>units type</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIBParameterTable">
            <summary>
            GRIB edition 1 parameter table
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIBParameterTable.FileName">
            <summary>
            Table file name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIBParameterTable.CenterID">
            <summary>
            Center id
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIBParameterTable.SubCenterID">
            <summary>
            Sub center id
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIBParameterTable.TableNum">
            <summary>
            Table edition number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIBParameterTable.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBParameterTable.#ctor(System.String,System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.Parameter[])">
            <summary>
            Constructor
            </summary>
            <param name="name">file name</param>
            <param name="cen">center id</param>
            <param name="sub">subcenter id</param>
            <param name="tab">table number</param>
            <param name="par">parameter tables</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBParameterTable.GetDefaultParameter(System.Int32)">
            <summary>
            Get default parameter
            </summary>
            <param name="paramNum">parameter number</param>
            <returns>parameter</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBParameterTable.getTypeSurfaceNameShort(System.Int32)">
             type of vertical coordinate: short Name
             derived from code table 4.5.
            
             @param id surfaceType
             @return SurfaceNameShort
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection">
            <summary>
            GRIB edition 1 binary data section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.UNDEF">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.Length">
            <summary>
            Length in bytes of this BDS
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.BinScale">
            <summary>
            Binary scale factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.RefValue">
            <summary>
            Reference value, the base for all parameter values
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.NumBits">
            <summary>
            Number of bits per value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.Data">
            <summary>
            Array of parameter values
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.MinValue">
            <summary>
            Minimal parameter value in grid.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.MaxValue">
            <summary>
            Maximal parameter value in grid.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.IsConstant">
            <summary>
            rdg - added this to prevent a divide by zero error if variable data empty       
            Indicates whether the BMS is represented by a single value
             -  Octet 12 is empty, and the data is represented by the reference value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1BinaryDataSection.#ctor(System.IO.BinaryReader,System.Int32,MeteoInfoC.Data.MeteoData.GRIB1BitMapSection,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
            <param name="decimalscale">decimal scale</param>
            <param name="bms">GRIB 1 BMS</param>
            <param name="scanMode">scan mode</param>
            <param name="Xlength">X coordinate number</param>
            <param name="Ylength">Y coordinate number</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1BitMapSection">
            <summary>
            GRIB edition 1 bit map section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BitMapSection.Length">
            <summary>
            Length in octets of Bit Map Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1BitMapSection.Bitmap">
            <summary>
            The bit map
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1BitMapSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection">
            <summary>
            GRIB edition 1 grid define section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Length">
            <summary>
            Length in octets of the Grid Description Section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.NV">
            <summary>
            The number of vertical coordinate parameters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.P_VorL">
            <summary>
            PV, the location (octet number) of the list of vertical coordinate parameters, if present
            or
            PL, the location (octet number) of the list of
            numbers of points in each row (when no vertical
            parameters are present), if present
            or
            255 (all bits set to 1) if neither are present
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GridType">
            <summary>
            Date representation type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.NX">
            <summary>
            Number of grid columns
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.XReverse">
            <summary>
            If x reverse
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.YReverse">
            <summary>
            If y reverse
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.NY">
            <summary>
            Number of grid rows
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lat1">
            <summary>
            Latitude of grid start point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lon1">
            <summary>
            Longitude of grid start point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Resolution">
            <summary>
            Resolution of grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lat2">
            <summary>
            Latitude of grid last point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lon2">
            <summary>
            Longitude of grid last point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.DX">
            <summary>
            X-distance of two grid points
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.DY">
            <summary>
            Y-distance of two grid points
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.NP">
            <summary>
            Number of parallels between a pole and the equator.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lov">
            <summary>
            Orientation of the grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Proj_Center">
            <summary>
            Projection center flag
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Latin1">
            <summary>
            The first latitude from pole at which secant cone cuts the sperical earth
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Latin2">
            <summary>
            The second latitude from pole at which secant cone cuts the sperical earth
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.ScanMode">
            <summary>
            Scanning mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Latsp">
            <summary>
            Latitude of south pole
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Lonsp">
            <summary>
            Longitude of south pole
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.Rotang">
            <summary>
            Angle of rotation
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.ThinnedGrid">
            <summary>
            If is thinned grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.ThinnedXNums">
            <summary>
            X number on each latitude of thinned grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.ThinnedGridNum">
            <summary>
            Total thinned grid data number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GetGridName(System.Int32)">
            <summary>
            Get grid name
            </summary>
            <param name="type">grid type</param>
            <returns>grid name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GetProjectionInfo">
            <summary>
            Get projection info
            </summary>
            <returns>projection info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GetXArray">
            <summary>
            Get X coordinate array
            </summary>
            <returns>X array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GetYArray">
            <summary>
            Get Y coordinate array
            </summary>
            <returns>Y array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1GridDefineSection.GetXYArray(System.Double[]@,System.Double[]@)">
            <summary>
            Get X/Y coordinate array
            </summary>
            <param name="X">ref X array</param>
            <param name="Y">ref Y array</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection">
            <summary>
            GRIB edition 1 indicator section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection.RecordLength">
            <summary>
            Length in bytes of GRIB record
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection.Length">
            <summary>
            Length in bytes of this section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection.Edition">
            <summary>
            Edition of GRIB - 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection.Title">
            <summary>
            Title of the message - GRIB
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1IndicatorSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection">
            <summary>
            GRIB edition 1 product define section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.Length">
            <summary>
            PDS length in bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.TableVersion">
            <summary>
            Parameter Table Version number, currently 3 for internatioanl exchange.
            Parameter table version mubers 128-254 are reserved for local use.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.CenterID">
            <summary>
            Identification of center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.TypeGenProcess">
            <summary>
            Generating process ID number, allocated by the originating center.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.GridID">
            <summary>
            Grid Identification (geographical location and area, defined by the originating center.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.GDSExist">
            <summary>
            If GDS exist
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.BMSExist">
            <summary>
            If BMS exist
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.ParameterIndicator">
            <summary>
            Indicator of parameter and units
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.Parameter">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.LevelType">
            <summary>
            Indicator of type of level or layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.LevelValue">
            <summary>
            Height of the level or layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.BaseTime">
            <summary>
            Base (analysis) time of the forecast
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.ForecastTimeUnit">
            <summary>
            Forecast time unit
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.P1">
            <summary>
            Period of time (Number of time units)
            0 for analysis or initialize analysis.       
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.P2">
            <summary>
            Period of time (Number of time units)
            or time interval between successive analyses
            or successive initialized analyses, or forecasts
            or undergoing averaging or accumulation        
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.TimeRangeIndicator">
            <summary>
            Time range indicator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.AveInclude">
            <summary>
            Number included in average, when 'Time range indicator' indicates an average of
            accumulation; otherwise set to zero.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.NumMissing">
            <summary>
            Number Missing from averages or accumulations
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.InitialCentral">
            <summary>
            Century of Initial (Reference) time (=20 until Jan. 1, 2001)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.SubCenterID">
            <summary>
            Identification of sub-center (allocated by the originating center.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.DecimalScale">
            <summary>
            The decimal scale factor D
            A negative value is indicated by setting the high order bit(bit No.1)
            in octet 27 to 1 (on)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.#ctor(System.IO.BinaryReader)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.GetForecastTime">
            <summary>
            Get forecast time
            </summary>
            <returns>forecast time</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1ProductDefineSection.CalculateIncrement(System.Int32,System.Int32)">
            <summary>
            calculates the increment between time intervals 
            </summary>
            <param name="tui">tui time unit indicator</param>
            <param name="length">length of interval</param>
            <returns>increment</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1Message">
            <summary>
            GRIB edition 1 message
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1Message.RecordIS">
            <summary>
            Indeicator section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1Message.RecordPDS">
            <summary>
            Product definition section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1Message.RecordGDS">
            <summary>
            Grid definition section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1Message.RecordBMS">
            <summary>
            Bitmap section
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1Message.RecordBDS">
            <summary>
            Binary data section
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Message.#ctor(System.IO.BinaryReader,MeteoInfoC.Data.MeteoData.GRIB1DataInfo)">
            <summary>
            Constructor
            </summary>
            <param name="br">binary reader</param>
            <param name="aDataInfo">GRIB1 data info</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Message.GetDataArray">
            <summary>
            Get data 2-D array
            </summary>
            <returns>data array</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1Tables">
            <summary>
            GRIB 1 tables
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetTypeGenProcessName(System.Int32)">
            <summary>
            Get type generation process name
            </summary>
            <param name="typeGenProcess"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetCenter_idName(System.Int32)">
            <summary>
            Get center name
            </summary>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetSubCenter_idName(System.Int32,System.Int32)">
            <summary>
            Get sub center name
            </summary>
            <param name="center_id"></param>
            <param name="subCenter"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetProductDefinitionName(System.Int32)">
            <summary>
            Get product definition name
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetTimeUnit(System.Int32)">
            <summary>
            Get time unit
            </summary>
            <param name="tUnit"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetTimeRange(System.Int32)">
            <summary>
            Get time range
            </summary>
            <param name="tRange"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetLevelDescription(System.Int32)">
            <summary>
            Get level description
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetLevelName(System.Int32)">
            <summary>
            Get level name
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetLevelUnits(System.Int32)">
            <summary>
            Get level units
            </summary>
            <param name="id"></param>
            <returns></returns>         
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetGridName(System.Int32)">
            <summary>
            Get grid name
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetShapeName(System.Int32)">
            <summary>
            Get shape of grid
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetShapeRadius">
            <summary>
            Get shpe radius. Grib 1 has static radius
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetShapeMajorAxis">
            <summary>
            Get shape major axis. Grib 1 has static MajorAxis
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1Tables.GetShapeMinorAxis">
            <summary>
            Get shape minor axis. Grib 1 has static MinorAxis.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIB1DataInfo">
            <summary>
            GRIB 1 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.IsLatLon">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.TimeStartPos">
            <summary>
            List of lengths of all records
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.MessageNumber">
            <summary>
            Total message number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.MessageIdxList">
            <summary>
            Message index list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.HeaderLength">
            <summary>
            Header length
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read GRIB data info
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GenerateInfoText">
            <summary>
            Generate info text
            </summary>
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_LonLat_Old(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB 1 grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB 1 grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Time/Lon
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Time/Lat
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Lat
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="tIdx">time index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Lon
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="tIdx">time index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get GRIB1 data - Level/Time
            </summary>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="lonIdx">longitude index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Time
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetOneDimData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Time
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - level
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="timeIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetOneDimData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - level
            </summary>
            <param name="lonIdx">longitude index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="timeIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - longitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetOneDimData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - longitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="latIdx">latitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - latitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIB1DataInfo.GetOneDimData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - latitude
            </summary>
            <param name="timeIdx">time index</param>
            <param name="lonIdx">longitude index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>one dimension data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GRIBData">
            <summary>
            GRIB data info
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBData.GetGRIBEdition(System.String,System.Int32@)">
            <summary>
            Get GRIB edition number
            </summary>
            <param name="aFile">file path</param>
            <param name="headerLen">header length</param>
            <returns>GRIB edition number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBData.ReadSectionNumber(System.IO.BinaryReader)">
            <summary>
            Read section number - GRIB 2
            </summary>
            <param name="br">binary reader</param>
            <returns>section number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GRIBData.GetMeanLongitude(System.Double,System.Double)">
            <summary>
            Get mean longitude between tow longitude
            </summary>
            <param name="lon1">longitude 1</param>
            <param name="lon2">longitude 2</param>
            <returns>mean longitude</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Parameter">
            <summary>
            GRIB parameter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.Number">
            <summary>
            Parameter number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.Name">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.LevelType">
            <summary>
            Level type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.LevelNum">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.Levels">
            <summary>
            Level list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.Units">
            <summary>
            Units
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Parameter.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="aNum">Parameter number</param>
            <param name="aName">name</param>
            <param name="aDesc">description</param>
            <param name="aUnit">units</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.Clone">
            <summary>
            Clone
            </summary>
            <returns>parameter object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.Equals(MeteoInfoC.Data.MeteoData.Parameter)">
            <summary>
            Judge if two parameter are equal
            </summary>
            <param name="aVar">variable</param>
            <returns>if equal</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.TEquals(MeteoInfoC.Data.MeteoData.Parameter)">
            <summary>
            Judge if two parameter are totally equal
            </summary>
            <param name="aVar">variable</param>
            <returns>if equal</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.AddLevel(System.Single)">
            <summary>
            Add a level
            </summary>
            <param name="levelValue">level value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Parameter.GetTrueLevelNumber">
            <summary>
            Get true level number
            </summary>
            <returns>true level number</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NumberExpression">
            <summary>
            Class representing a constant number expression.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NumberExpression.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.NumberExpression"/> class.</summary>
            <param name="value">The number value for this expression.</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.NumberExpression.ValueType">
            <summary>
            Get or set value type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.NumberExpression.ArgumentCount">
            <summary>Gets the number of arguments this expression uses.</summary>
            <value>The argument count.</value>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.NumberExpression.Value">
            <summary>Gets the number value for this expression.</summary>
            <value>The number value.</value>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NumberExpression.IsNumber(System.Char)">
            <summary>Determines whether the specified char is a number.</summary>
            <param name="c">The char to test.</param>
            <returns><c>true</c> if the specified char is a number; otherwise, <c>false</c>.</returns>
            <remarks>This method checks if the char is a digit or a decimal separator.</remarks>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NumberExpression.IsNegativeSign(System.Char)">
            <summary>Determines whether the specified char is negative sign.</summary>
            <param name="c">The char to check.</param>
            <returns><c>true</c> if the specified char is negative sign; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NumberExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.OperatorExpression">
            <summary>
            Class representing a math operator expression.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.OperatorExpression.operatorSymbols">
            <summary>The supported math operators by this class.</summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.OperatorExpression"/> class.</summary>
            <param name="operator">The operator to use for this class.</param>
            <exception cref="T:System.ArgumentNullException">When the operator is null or empty.</exception>
            <exception cref="T:System.ArgumentException">When the operator is invalid.</exception>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.OperatorExpression.MathOperator">
            <summary>Gets the math operator.</summary>
            <value>The math operator.</value>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount">
            <summary>Gets the number of arguments this expression uses.</summary>
            <value>The argument count.</value>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Add(System.Object[])">
            <summary>Adds the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Subtract(System.Object[])">
            <summary>Subtracts the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Multiple(System.Object[])">
            <summary>Multiples the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Divide(System.Object[])">
            <summary>Divides the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Modulo(System.Object[])">
            <summary>Modulo the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.Power(System.Object[])">
            <summary>Power for the specified numbers.</summary>
            <param name="numbers">The numbers.</param>
            <returns>The result of the operation.</returns>
            <exception cref="T:System.ArgumentNullException">When numbers is null.</exception>
            <exception cref="T:System.ArgumentException">When the length of numbers do not equal <see cref="P:MeteoInfoC.Data.MeteoData.OperatorExpression.ArgumentCount"/>.</exception>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.IsSymbol(System.String)">
            <summary>Determines whether the specified string is a math symbol.</summary>
            <param name="s">The string to check.</param>
            <returns><c>true</c> if the specified string is a math symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.IsSymbol(System.Char)">
            <summary>Determines whether the specified char is a math symbol.</summary>
            <param name="c">The char to check.</param>
            <returns><c>true</c> if the specified char is a math symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.OperatorExpression.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterPriority>2</filterPriority>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ValueType">
            <summary>
            Value type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ValueType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ValueType.Grid">
            <summary>
            Grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ValueType.Station">
            <summary>
            Station
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo">
            <summary>
            MICAPS 13 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Time">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.YNum">
            <summary>
            Y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.XNum">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Lon_LB">
            <summary>
            Left bottom longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Lat_LB">
            <summary>
            Left bottom latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.ProjOption">
            <summary>
            Projection: 1-lambert  2-mecator  3-北半球  4-南半球
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.ZoomFactor">
            <summary>
            Zoom factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.ImageType">
            <summary>
            Image type: 1—红外云图 2—雷达拼图 3—地形图 4—可见光云图 5—水汽图
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.TableName">
            <summary>
            Table name: 象素值与相应物理量对照表文件名
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Lon_Center">
            <summary>
            Center longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Lat_Center">
            <summary>
            Center latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.ImageBytes">
            <summary>
            Image bytes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.WorldFileP">
            <summary>
            World file parameter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GenerateInfoText">
            <summary>
            Get MICAPS 13 data info text
            </summary>        
            <returns>Info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS13DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo">
            <summary>
            MICAPS 2 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.StNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.VarNum">
            <summary>
            Variable number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.DataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read MICAPS 2 data info
            </summary>
            <param name="aFile">file path</param>       
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.GenerateInfoText">
            <summary>
            Generate data info text of MICAPS 2
            </summary>       
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.GetDiscreteData(System.Int32,System.Collections.Generic.List{System.String}@,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete data from MICAPS 2 data info
            </summary>        
            <param name="vIdx">variable index</param>
            <param name="stations">ref stations</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discreted data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS2DataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo">
            <summary>
            MICAPS 3 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.StationNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.Level">
            <summary>
            Height level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.ContourNum">
            <summary>
            Contour number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.Contours">
            <summary>
            Contour values
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.varNum">
            <summary>
            Variable number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.DataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>                
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GetDiscreteData(System.Int32,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete Lon/Lat station data
            </summary>        
            <param name="vIdx">varible index</param>
            <param name="dataExtent"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GetDiscreteData(System.Int32,System.Collections.Generic.List{System.String}@,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete Lon/Lat station data
            </summary>        
            <param name="vIdx">varible index</param>
            <param name="stations">ref stations</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discrete data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS3DataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo">
            <summary>
            MICAPS 5 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.StNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.VarNum">
            <summary>
            Variable number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read MICAPS 5 data info
            </summary>
            <param name="aFile">file path</param>       
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.GenerateInfoText">
            <summary>
            Generate data info text of MICAPS 5
            </summary>       
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS5DataInfo.GetOneStationData(System.String)">
            <summary>
            Get one station vertical data
            </summary>
            <param name="stId">station identifer</param>
            <returns>station vertical data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo">
            <summary>
            MICAPS 7 data info (Typhoon)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.FileNames">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.TrajeoryNumber">
            <summary>
            Number of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.TrajeoryNums">
            <summary>
            Number of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.TrajDirections">
            <summary>
            Trajectory direction - foreward or backward
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.VerticalMotions">
            <summary>
            Vertical motion
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.TrajInfos">
            <summary>
            Information list of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.VarNums">
            <summary>
            Number of variables
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.VarNames">
            <summary>
            Variable name list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.ReadDataInfo(System.String[])">
            <summary>
            Read MICAPS 7 data info
            </summary>
            <param name="TrajFiles">File paths</param>        
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.CreateTrajLineLayer">
            <summary>
            Read MICAPS 7 data and create a polyline layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.CreateTrajStartPointLayer">
            <summary>
            Read MICAPS 7 data and create a trajectory start point layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.CreateTrajPointLayer">
            <summary>
            Read MICAPS 7 data and create a trajectory point layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.GetATrajData(System.Int32)">
            <summary>
            Read one typhoon points data
            </summary>        
            <returns>A typhoon points data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS7DataInfo.GenerateInfoText">
            <summary>
            Get MICAPS 7 data info text
            </summary>        
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPSDataInfo">
            <summary>
            Base MICAPS data info class
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.UNDEF">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSDataInfo.ReadMICAPSHead(System.String)">
            <summary>
            Read MICAPS data head
            </summary>
            <param name="aFile"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Conventions">
            <summary>
            NetCDF conventions enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Conventions.CF">
            <summary>
            Climate and Forecast (CF) Metadata Conventions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Conventions.IOAPI">
            <summary>
            CMAQ Model 3 IOAPI Conventions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Conventions.WRFOUT">
            <summary>
            WRF Out Coventions
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ParseException">
            <summary>
            Parse exception
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ParseException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.ParseException"/> class.</summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ParseException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.ParseException"/> class.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ParseException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.ParseException"/> class.</summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MeteoInfoC.Data.MeteoData.ParseException"/> class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.IStationDataInfo">
            <summary>
            Station data info interface
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IStationDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IStationDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.IStationDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.SYNOPDataInfo">
            <summary>
            SYNOP data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.StFileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.StationNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.DataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read SYNOP data info
            </summary>
            <param name="dataFN">METAR data file name</param>       
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>data information text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SYNOPDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ITrajDataInfo">
            <summary>
            Trajectory data info interface
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ITrajDataInfo.CreateTrajLineLayer">
            <summary>
            Create trajectory line layer
            </summary>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ITrajDataInfo.CreateTrajPointLayer">
            <summary>
            Create trajectory point layer
            </summary>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ITrajDataInfo.CreateTrajStartPointLayer">
            <summary>
            Create trajectory start point layer
            </summary>
            <returns>Map layer</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Variable">
            <summary>
            Variable class
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.Number">
            <summary>
            Parameter number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.Name">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.LevelType">
            <summary>
            Level type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.Levels">
            <summary>
            Level list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.Units">
            <summary>
            Units
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Variable.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="aNum">Parameter number</param>
            <param name="aName">name</param>
            <param name="aDesc">description</param>
            <param name="aUnit">units</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.DimNumber">
            <summary>
            Get dimention number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.LevelNum">
            <summary>
            Get level number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.HDFPath">
            <summary>
            Get or set HDF path
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.Dimensions">
            <summary>
            Get or set dimensions
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.XDimension">
            <summary>
            Get or set X dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.YDimension">
            <summary>
            Get or set Y dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.ZDimension">
            <summary>
            Get or set Z dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.TDimension">
            <summary>
            Get or set T dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.DimIds">
            <summary>
            Get dimension identifers
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.IsStation">
            <summary>
            Get or set if the variable is station data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.IsSwath">
            <summary>
            Get or set if the variable is swath data set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.NCType">
            <summary>
            Get of set NC type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.Attributes">
            <summary>
            Get or set attributes
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.AttNumber">
            <summary>
            Get or set attribute number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.VarId">
            <summary>
            Get or set variable id
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.IsCoorVar">
            <summary>
            Get or set if the variable is coordinate variable
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.LevelIdxs">
            <summary>
            Get or set level index list - for ARL data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.VarInLevelIdxs">
            <summary>
            Get or set Variable index in level index list - for ARL data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.Variable.IsPlottable">
            <summary>
            Get if the variable is plottable - has both X and Y dimension for grid data,
            or is station data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.Clone">
            <summary>
            Clone
            </summary>
            <returns>parameter object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.Equals(MeteoInfoC.Data.MeteoData.Variable)">
            <summary>
            Judge if two parameter are equal
            </summary>
            <param name="aVar">variable</param>
            <returns>if equal</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.TEquals(MeteoInfoC.Data.MeteoData.Variable)">
            <summary>
            Judge if two parameter are totally equal
            </summary>
            <param name="aVar">variable</param>
            <returns>if equal</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.AddLevel(System.Single)">
            <summary>
            Add a level
            </summary>
            <param name="levelValue">level value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetTrueLevelNumber">
            <summary>
            Get true level number
            </summary>
            <returns>true level number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetDimension(MeteoInfoC.Data.MeteoData.DimensionType)">
            <summary>
            Get dimension by type
            </summary>
            <param name="dimType">dimension type</param>
            <returns>dimensioin</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.SetDimension(MeteoInfoC.Data.MeteoData.Dimension)">
             <summary>
             Set dimension
             </summary>
            <param name="aDim">a dimension</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.SetDimension(MeteoInfoC.Data.MeteoData.Dimension,MeteoInfoC.Data.MeteoData.DimensionType)">
            <summary>
            Set dimension by dimension type
            </summary>
            <param name="aDim">a dimension</param>
            <param name="dimType">dimension type</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetDimIndex(MeteoInfoC.Data.MeteoData.Dimension)">
            <summary>
            Get index of a dimension
            </summary>
            <param name="aDim">a dimension</param>
            <returns>index</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.HasXtrackDimension">
            <summary>
            Judge is has Xtrack dimension
            </summary>
            <returns>if has Xtrack dimension</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.HasDimension(System.Int32)">
            <summary>
            Judge if the variable has a dimension
            </summary>
            <param name="dimId">dimension id</param>
            <returns>result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetAttributeIndex(System.String)">
            <summary>
            Get attribute index by name, return -1 if the name not exist.
            </summary>
            <param name="attName">attribute name</param>
            <returns>attribute index</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetAttributeString(System.String)">
            <summary>
            Get attribute value string by name
            </summary>
            <param name="attName">attribute name</param>
            <returns>attribute value string</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.AddAttribute(System.String,System.String)">
            <summary>
            Add attribute
            </summary>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.AddAttribute(System.String,System.Double)">
            <summary>
            Add attribute
            </summary>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Variable.GetTimes">
            <summary>
            Get time list
            </summary>
            <returns>Time list</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ARLDataInfo">
            <summary>
            ARL meteo data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.isLatLon">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.dataHead">
            <summary>
            Data head
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.recLen">
            <summary>
            Record length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.indexLen">
            <summary>
            Index length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.recsPerTime">
            <summary>
            Record number per time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.LevelVarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.levelNum">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.levels">
            <summary>
            Level list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLDataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read ARL data info
            </summary>
            <param name="aFile"></param>                
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>       
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Lon/Lat
            </summary>
            <param name="timeIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="tIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="cvarIdx"></param>
            <param name="tIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="tIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="cvarIdx"></param>
            <param name="tIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level/Time
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="lonIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetARLGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - LevelTime
            </summary>
            <param name="latIdx"></param>
            <param name="cvarIdx"></param>
            <param name="lonIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Time
            </summary>
            <param name="lonIdx"></param>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Level
            </summary>
            <param name="lonIdx"></param>
            <param name="latIdx"></param>
            <param name="cvarIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Longitude
            </summary>
            <param name="timeIdx"></param>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get ARL data - Latitude
            </summary>
            <param name="timeIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.CreateDataFile(System.String)">
            <summary>
            Create a ARL binary data file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.CloseDataFile">
            <summary>
            Close the data file created by previos step
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.GetDataHead(MeteoInfoC.Projections.ProjectionInfo,System.String,System.Int32)">
            <summary>
            Get data header of index record
            </summary>
            <param name="projInfo">Projection info</param>
            <param name="model">Data source</param>
            <param name="kFlag">Level flag</param>
            <returns>The data header</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.WriteIndexRecord(System.DateTime,MeteoInfoC.Data.MeteoData.DataHead)">
            <summary>
            Write index record
            </summary>
            <param name="time">The time</param>
            <param name="aDH">The data header</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.WriteGridData(MeteoInfoC.Data.MeteoData.DataLabel,MeteoInfoC.Data.GridData)">
            <summary>
            Write grid data
            </summary>
            <param name="aDL">The data label</param>
            <param name="gridData">The grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLDataInfo.WriteGridData(System.DateTime,System.Int32,System.String,System.Int32,System.Int32,MeteoInfoC.Data.GridData)">
            <summary>
            Write grid data
            </summary>
            <param name="time">The time</param>
            <param name="levelIdx">The level index</param>
            <param name="varName">The variable</param>
            <param name="forecast">The forecast hour</param>
            <param name="grid">The grid id</param>
            <param name="gridData">The grid data</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ARLMeteoData">
            <summary>
            ARL meteo data
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ARLVAR">
            <summary>
            ARL variable set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLVAR.VName">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLVAR.LevelNum">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLVAR.LevelIdxs">
            <summary>
            Level idex list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ARLVAR.VarInLevelIdxs">
            <summary>
            Variable in level index list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ARLVAR.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DataHead">
            <summary>
            ARL Data head
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.MODEL">
            <summary>
            MODEL - Dada source
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.ICX">
            <summary>
            Forecast hour (>99 the header forecast hr = 99)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.MN">
            <summary>
            Minutes associated with data time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.POLE_LAT">
            <summary>
            Standard conformal projections are drawn around a central (polar) point. 
            A Normal Projection is one where this point is either the North Pole (latitude = +90.°) 
            or the South Pole (latitude = -90.°). 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.POLE_LON">
            <summary>
            Polar longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.REF_LAT">
            <summary>
            Reference latitude is the angle at which the cone of a Lambert Conformal projection is tangent to the Earth
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.REF_LON">
            <summary>
            Reference longitude is the longitude furthest from the cut
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.SIZE">
            <summary>
            At reference longitude and latitude point,
            the scale (gridsize in km.) and orientation (degrees between local North and the y-axis) 
            have the specified values
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.ORIENT">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.TANG_LAT">
            <summary>
            TANG_LAT: Stereographic Projections are commonly drawn on a plane tangent to the North or South Pole,
            and Mercator projections on a cylinder parallel to the axis between the two poles
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.SYNC_XP">
            <summary>
            SYNC_XP
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.SYNC_YP">
            <summary>
            SYNC_YP
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.SYNC_LAT">
            <summary>
            SYNC_LAT: To align (synchronize) the grid coordinates with the map, 
            we specify the latitude and longitude coordinates of a specific grid point, 
            which could be the origin or could be the midpoint of the grid, 
            or any other point in the grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.SYNC_LON">
            <summary>
            SYNU_LON
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.DUMMY">
            <summary>
            DUMMY
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.NX">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.NY">
            <summary>
            Y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.NZ">
            <summary>
            Z number - levels
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.K_FLAG">
            <summary>
            Vertical coordinate system flag
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataHead.LENH">
            <summary>
            Length in bytes of the index record, excluding the first 50 bytes
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DataLabel">
            <summary>
            ARL Data label
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Forecast">
            <summary>
            Forecast
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Grid">
            <summary>
            Grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Exponent">
            <summary>
            Exponent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Precision">
            <summary>
            Precision
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DataLabel.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DataLabel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DataLabel.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="time">Time</param>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.DataLabel.Time">
            <summary>
            Get or set time
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo">
            <summary>
            ASCII GRID data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.isLonLat">
            <summary>
            if data set is lon/lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.levels">
            <summary>
            levels array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.X">
            <summary>
            x coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.Y">
            <summary>
            y coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.XDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.YDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.XNum">
            <summary>
            x number, y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.YNum">
            <summary>
            x number, y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.XMin">
            <summary>
            x minimum, y minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.YMin">
            <summary>
            x minimum, y minimum
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read ASCII GRID data info
            </summary>
            <param name="aFile">file path</param>
            <returns>ASCII GRID data info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.ReadData">
            <summary>
            Read grid data
            </summary>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ASCIIGRIDDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ISHDataInfo">
            <summary>
            ISH NOAA data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ISHDataInfo.dateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ISHDataInfo.stNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ISHDataInfo.varList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ISHDataInfo.dataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read ISH data info
            </summary>
            <param name="dataFN">ISH data file name</param>        
            <returns>void</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>Info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GetDiscreteData(System.Int32,System.Collections.Generic.List{System.String}@,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discreted data
            </summary>
            <param name="varIdx">Variable index</param>
            <param name="stIDList">ref station identifer list</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discreted data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GetStationModelData(System.Collections.Generic.List{System.String}@,MeteoInfoC.Global.Extent@)">
            <summary>
            Get station model data
            </summary>        
            <param name="stIDList">ref station identifer list</param>
            <param name="dataExtent">ref data extent</param>
            <returns>station model data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.ISHDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo">
            <summary>
            Lon/Lat stations data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read Lon/Lat station data info
            </summary>
            <param name="aFile">data file name</param>                
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.GetNullStationData">
            <summary>
            Get Lon/Lat station data - all data are missing data
            </summary>               
            <returns>null station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.LonLatStationDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.SurferGridDataInfo">
            <summary>
            Surfer grid data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.isLonLat">
            <summary>
            if data set is lat/lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.levels">
            <summary>
            levels array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.X">
            <summary>
            x coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.Y">
            <summary>
            y coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.XDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.YDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.XNum">
            <summary>
            x number, y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.YNum">
            <summary>
            x number, y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.XMin">
            <summary>
            x/y minimum, x/y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.XMax">
            <summary>
            x/y minimum, x/y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.YMin">
            <summary>
            x/y minimum, x/y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.YMax">
            <summary>
            x/y minimum, x/y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.ZMin">
            <summary>
            z minimum, z maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.ZMax">
            <summary>
            z minimum, z maximum
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.#ctor(System.String)">
             <summary>
             Constructor
             </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info
            </summary>
            <param name="aFile">file path</param>        
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.ReadData">
            <summary>
            Read grid data
            </summary>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.SurferGridDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DrawMeteoData">
            <summary>
            Draw meteo data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.InterpolateData(MeteoInfoC.Data.StationData,MeteoInfoC.Data.MeteoData.InterpolationSetting)">
            <summary>
            Interpolate station data to grid data
            </summary>
            <param name="aStData">The station data</param>
            <param name="interpSet">Interpolation setting</param>
            <returns>Interpolated grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create a layer from grid data
            </summary>
            <param name="gridData">The grid data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="layerName">Layer name</param>
            <param name="fieldName">Field name</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create a layer from two grid data
            </summary>
            <param name="uData">U/WindDirection grid data</param>
            <param name="vData">V/WindSpeed grid data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="LayerName">Layer name</param>
            <param name="isUV">If is U/V</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean,System.Int32)">
            <summary>
            Create a streamline layer from two grid data
            </summary>
            <param name="uData">U/WindDirection grid data</param>
            <param name="vData">V/WindSpeed grid data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="LayerName">Layer name</param>
            <param name="isUV">If is U/V</param>
            <param name="density">Density</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create a layer from three grid data
            </summary>
            <param name="uData">U/WindDirection grid data</param>
            <param name="vData">V/WindSpeed grid data</param>
            <param name="gridData">Grid data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="LayerName">Layer name</param>
            <param name="isUV">If is U/V</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create a layer from station data
            </summary>
            <param name="stationData">Station data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="layerName">Layer name</param>
            <param name="fieldName">Field name (for station point layer) or weather type (for weather symbol layer)</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create a layer from station data
            </summary>
            <param name="stationData">Station data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="layerName">Layer name</param>        
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateLaeyr(MeteoInfoC.Data.StationData,MeteoInfoC.Data.MeteoData.DrawType2D,MeteoInfoC.Legend.LegendScheme,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a layer with station data
            </summary>
            <param name="stationData">Station data</param>
            <param name="drawType">Draw type</param>
            <param name="aLS">Legend scheme</param>
            <param name="layerName">Layer name</param>
            <param name="weathers">Weathers</param>
            <returns>Created layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateXYLayer(System.String,System.Int32,System.Int32,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create point layer from text file with lon/lat column - comma dilimit
            </summary>
            <param name="filePath">File path</param>
            <param name="lonIdx">Longitude column index</param>
            <param name="latIdx">Latitude column index</param>
            <param name="aLS">Legend Scheme</param>
            <param name="lName">Layer Name</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTPointLayer(System.Double[0:,0:],MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station point layer
            </summary>
            <param name="DiscreteData"></param>
            <param name="aLS"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTPointLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create station point layer
            </summary>
            <param name="stationData">station data</param>
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTInfoLayer(MeteoInfoC.Data.StationInfoData,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station info layer
            </summary>
            <param name="stInfoData">Station Info data</param>
            <param name="aLS">Legend scheme</param>
            <param name="LName">Layer nmae</param>
            <returns>Station info vector layre</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTInfoLayer(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}},MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station info layer
            </summary>
            <param name="fieldList">field list</param>
            <param name="varList">variable list</param>
            <param name="DiscreteData">data list</param>
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridPointLayer(System.Double[0:,0:],System.Double[],System.Double[],MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create grid point layer
            </summary>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="aLS"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridPointLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create grid point layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <returns>VectorLayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridFillLayer(System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Double,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create grid fill layer
            </summary>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="XDelt"></param>
            <param name="YDelt"></param>
            <param name="aLS"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridFillLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create grid fill layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <returns>VectorLayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateContourLayer(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],System.Boolean,System.Double,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create contour layer
            </summary>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="CValues"></param>
            <param name="hasNoData"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateContourLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create contour layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <returns>VectorLayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateContourLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String,System.Boolean)">
            <summary>
            Create contour layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <param name="smooth">Smooth or not</param>
            <returns>VectorLayer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateShadedLayer(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],System.Drawing.Color[],System.Double,System.Double,System.Boolean,System.Double,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create shaded layer
            </summary>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="CValues"></param>
            <param name="Colors"></param>
            <param name="MaxData"></param>
            <param name="MinData"></param>
            <param name="hasNoData"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateShadedLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String)">
            <summary>
            Create shaded layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateShadedLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.String,System.String,System.Boolean)">
            <summary>
            Create shaded layer
            </summary>
            <param name="gridData">grid data</param>        
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="fieldName">field name</param>
            <param name="smooth">Smooth or not</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridVectorLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create grid wind vector layer from U/V or direction/speed grid data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="gridData"></param>
            <param name="aLS"></param>
            <param name="ifColor"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridVectorLayer(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create wind vector layer from grid data
            </summary>
            <param name="Udata"></param>
            <param name="Vdata"></param>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridVectorLayer_UV(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create vector layer
            </summary>
            <param name="Udata"></param>
            <param name="Vdata"></param>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridVectorLayer_DS(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create vector layer from grid data (direction/speed)
            </summary>
            <param name="windDirData"></param>
            <param name="windSpeedData"></param>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateStreamlineLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,System.Int32,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create streamline layer by U/V or wind direction/speed grid data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="density"></param>
            <param name="aLS"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateStreamlineLayer(System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Int32,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create Streamline layer
            </summary>
            <param name="Udata">U component array</param>
            <param name="Vdata">V component array</param>       
            <param name="X">X coordinate array</param>
            <param name="Y">Y coordinate array</param>
            <param name="MissingValue">undefine data</param>
            <param name="density">streamline density</param>
            <param name="aLS">legend scheme</param>        
            <param name="LName">layer name</param>
            <returns>retult layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridBarbLayer(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create grid barb layer from U/V or wind direction/speed grid data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="gridData"></param>
            <param name="aLS"></param>
            <param name="ifColor"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateGridBarbLayer(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double[],System.Double[],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create grid barb layer
            </summary>
            <param name="Udata"></param>
            <param name="Vdata"></param>
            <param name="GridData"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTVectorLayer_old(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create station vector layer
            </summary>
            <param name="uData">U station data</param>
            <param name="vData">V station data</param>
            <param name="stData">station data</param>
            <param name="aLS">legend scheme</param>
            <param name="ifColor">if color</param>
            <param name="lName">layer name</param>
            <param name="isUV">if is U/V</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTVectorLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create station vector layer
            </summary>
            <param name="uData">U station data</param>
            <param name="vData">V station data</param>
            <param name="stData">station data</param>
            <param name="aLS">legend scheme</param>
            <param name="lName">layer name</param>
            <param name="isUV">if is U/V</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTVectorLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create station vector layer
            </summary>
            <param name="uData">U station data</param>
            <param name="vData">V station data</param>
            <param name="aLS">legend scheme</param>
            <param name="lName">layer name</param>
            <param name="isUV">if is U/V</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTVectorLayer_UV(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create station vector layer
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="DiscreteData"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTVectorLayer_DS(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create station vector layer
            </summary>
            <param name="windDirData"></param>
            <param name="windSpeedData"></param>
            <param name="DiscreteData"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTBarbLayer_old(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create station barb layer from U/V or direction/speed station data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="stData"></param>
            <param name="aLS"></param>
            <param name="ifColor"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTBarbLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create station barb layer from U/V or direction/speed station data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="stData"></param>
            <param name="aLS"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTBarbLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create station barb layer from U/V or direction/speed station data
            </summary>
            <param name="uData"></param>
            <param name="vData"></param>
            <param name="aLS"></param>
            <param name="lName"></param>
            <param name="isUV"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateSTBarbLayer(System.Double[0:,0:],System.Double[0:,0:],System.Double[0:,0:],System.Double,MeteoInfoC.Legend.LegendScheme,System.Boolean,System.String)">
            <summary>
            Create station barb layer
            </summary>
            <param name="windDirData"></param>
            <param name="windSpeedData"></param>
            <param name="DiscreteData"></param>
            <param name="MissingValue"></param>
            <param name="aLS"></param>
            <param name="IfColor"></param>
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateWeatherSymbolLayer(MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station weather symbol layer
            </summary>
            <param name="weatherData">weather data</param>
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <returns>vector weather symbol layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateWeatherSymbolLayer(MeteoInfoC.Data.StationData,System.String,MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station weather symbol layer
            </summary>
            <param name="weatherData">Weather data</param>
            <param name="WeatherType">Weather type</param>        
            <param name="aLS">Legend scheme</param>
            <param name="LName">Layer name</param>
            <returns>Weather symbol layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateWeatherSymbolLayer(MeteoInfoC.Data.StationData,System.Collections.Generic.List{System.Int32},MeteoInfoC.Legend.LegendScheme,System.String)">
            <summary>
            Create station weather symbol layer
            </summary>
            <param name="weatherData">Weather data</param>
            <param name="wList">Weather index list</param>        
            <param name="aLS">Legend scheme</param>
            <param name="LName">Layer name</param>
            <returns>Weather symbol layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateStationModelLayer(MeteoInfoC.Data.StationModelData,System.Double,MeteoInfoC.Legend.LegendScheme,System.String,System.Boolean)">
            <summary>
            Create station model layer
            </summary>
            <param name="stationModelData">station model data</param>
            <param name="MissingValue">undefine data</param>
            <param name="aLS">legend scheme</param>
            <param name="LName">layer name</param>
            <param name="isSurface">if is surface</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateWeatherSymbolLayer(MeteoInfoC.Data.StationData,System.String,System.String)">
            <summary>
            Create station weather symbol layer
            </summary>
            <param name="weatherData"></param>
            <param name="WeatherType"></param>        
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateWeatherSymbolLayer(MeteoInfoC.Data.StationData,System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Create station weather symbol layer
            </summary>
            <param name="weatherData"></param>
            <param name="wList"></param>        
            <param name="LName"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateRasterLayer(MeteoInfoC.Data.GridData,System.String,System.String)">
             <summary>
             Create raster layer
             </summary>
             <param name="GridData">grid data</param>        
            <param name="LName">layer name</param>
            <param name="paletteFile">palette file</param>
             <returns>raster layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateRasterLayer(MeteoInfoC.Data.GridData,System.String,MeteoInfoC.Legend.LegendScheme)">
             <summary>
             Create raster layer
             </summary>
             <param name="GridData">grid data</param>        
            <param name="LName">layer name</param>
            <param name="aLS">legend scheme</param>
             <returns>raster layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateImageLayer(System.Drawing.Image,MeteoInfoC.Layer.WorldFilePara,System.String)">
            <summary>
            Create image layer
            </summary>
            <param name="aImage">image</param>
            <param name="aWFP">world file paramters</param>
            <param name="LName">layer name</param>
            <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateImageLayer(System.Double[0:,0:],System.Double[],System.Double[],System.String)">
             <summary>
             Create image layer
             </summary>
             <param name="GridData">grid data</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>
            <param name="LName">layer name</param>
             <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateImageLayer(System.Byte[],System.Int32,System.Int32,MeteoInfoC.Layer.WorldFilePara,System.String)">
             <summary>
             Create image layer
             </summary>
             <param name="imageBytes">byte data array</param>
             <param name="xNum">x number</param>
             <param name="yNum">y number</param>
            <param name="aWFP">world file parameter</param>
            <param name="LName">layer name</param>
             <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateImageLayer(System.String,System.Byte[],System.Int32,System.Int32,MeteoInfoC.Layer.WorldFilePara,System.String)">
             <summary>
             Create image layer
             </summary>
             <param name="pFile">palette file</param>
             <param name="imageBytes">byte data array</param>
             <param name="xNum">x number</param>
             <param name="yNum">y number</param>
            <param name="aWFP">world file parameter</param>
            <param name="LName">layer name</param>
             <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.CreateBitmap(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get bitmap from bytes
            </summary>
            <param name="originalImageData">original bytes data</param>
            <param name="originalWidth">width</param>
            <param name="originalHeight">heigth</param>
            <returns>bitmap</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.SetPalette(System.String,System.Drawing.Image)">
            <summary>
            Set color palette to a image from a palette file
            </summary>
            <param name="aFile">file path</param>
            <param name="aImage">image</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.SetPalette(System.Collections.Generic.List{System.Drawing.Color},System.Drawing.Image)">
            <summary>
            Set color palette to a image
            </summary>
            <param name="colors">color array</param>
            <param name="aImage">image</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.SetTransparencyColor(System.Drawing.Color,System.Drawing.Image)">
            <summary>
            Set a transparency color
            </summary>
            <param name="tColor">transparency color</param>
            <param name="aImage">image</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.SetPalette(System.Collections.Generic.List{System.Drawing.Color},System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Set palette with grey colors
            </summary>
            <param name="colors">color list</param>
            <param name="paletteStart">start index</param>
            <param name="paletteEnd">end index</param>
            <param name="curImageStream">memory stream</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.ReadData(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            从内存流中指定位置，读取数据
            </summary>
            <param name="curStream"></param>
            <param name="startPosition"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.WriteData(System.IO.MemoryStream,System.Int32,System.Int32,System.Int32)">
            <summary>
            向内存流中指定位置，写入数据
            </summary>
            <param name="curStream"></param>
            <param name="startPosition"></param>
            <param name="length"></param>
            <param name="value"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.DrawMeteoData.GetWeatherTypes(System.String)">
            <summary>
            Get weather list
            </summary>
            <param name="weatherType"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.Options">
            <summary>
            GrADS data options
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.pascals">
            <summary>
            (GrADS version 2.0) (For DTYPE grib2 only) Indicates that pressure values that appear in 
            the descriptor file (in the ZDEF entry and in the GRIB2 codes in the variable declarations) 
            are given in units of Pascals. 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.yrev">
            <summary>
            Indicates that the Y dimension (latitude) in the data file has been written in the reverse 
            order from what GrADS assumes. 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.zrev">
            <summary>
            Indicates that the Z dimension (pressure) in the data file has been written from top to bottom,
            rather than from bottom to top as GrADS assumes. 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.template">
            <summary>
            Indicates that a template for multiple data files is in use.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.sequential">
            <summary>
            Indicates that the file was written in sequential unformatted I/O. 
            This keyword may be used with either station or gridded data. 
            If your gridded data is written in sequential format, 
            then each record must be an X-Y varying grid. 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.calendar_365_day">
            <summary>
            Indicates the data file was created with perpetual 365-day years,
            with no leap years. This is used for some types of model ouput.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.byteswapped">
            <summary>
            Indicates the binary data file is in reverse byte order from the normal byte order of your machine.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.big_endian">
            <summary>
            Indicates the data file contains 32-bit IEEE floats created on a big endian platform (e.g., sun, sgi)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.little_endian">
            <summary>
            Indicates the data file contains 32-bit IEEE floats created on a little endian platform (e.g., iX86, and dec)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.Options.cray_32bit_ieee">
            <summary>
            Indicates the data file contains 32-bit IEEE floats created on a cray.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.Options.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.PDEFS">
            <summary>
            Projection define of GrADS data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEFS.PDEF_Type">
            <summary>
            PDEF type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEFS.PDEF_Content">
            <summary>
            PDEF content
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.PDEFS.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.PDEF_LCC">
            <summary>
            Lambert projection define of GrADS data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.PType">
            <summary>
            Projection type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.isize">
            <summary>
            The size of the native grid in the x direction
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.jsize">
            <summary>
            The size of the native grid in the y direction
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.latref">
            <summary>
            reference latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.lonref">
            <summary>
            reference longitude (in degrees, E is positive, W is negative)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.iref">
            <summary>
            i of ref point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.jref">
            <summary>
            j of ref point 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.Struelat">
            <summary>
            S true lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.Ntruelat">
            <summary>
            N true lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.slon">
            <summary>
            Standard longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.dx">
            <summary>
            grid X increment in meters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PDEF_LCC.dy">
            <summary>
            grid y increment in meters
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo">
            <summary>
            HYSPLIT particle dump data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.Parameters">
            <summary>
            list of particle number, pollutant number and stream start position
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.ReadDataInfo(System.String)">
            <summary>
            Read HYSPLIT particle dump data info
            </summary>
            <param name="aFile">Particle dump file name path</param>
            <returns>HYSPLIT particle data info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.GenerateInfoText">
            <summary>
            Get HYSPLIT particle dump data info text
            </summary>       
            <returns>data information text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITParticleInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo">
            <summary>
            HYSPLIT trajectory data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.FileNames">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.MeteoFileNums">
            <summary>
            Number of meteorological files
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.TrajeoryNumber">
            <summary>
            Number of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.TrajeoryNums">
            <summary>
            Number of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.TrajDirections">
            <summary>
            Trajectory direction - foreward or backward
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.VerticalMotions">
            <summary>
            Vertical motion
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.TrajInfos">
            <summary>
            Information list of trajectories
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.VarNums">
            <summary>
            Number of variables
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.VarNames">
            <summary>
            Variable name list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.ReadDataInfo(System.String)">
            <summary>
            Read data info - one file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.ReadDataInfo(System.String[])">
            <summary>
            Read HYSPLIT trajectory data info
            </summary>
            <param name="TrajFiles">File paths</param>        
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.CreateTrajLineLayer">
            <summary>
            Read HYSPLIT trajectory data and create a polyline layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.CreateTrajStartPointLayer">
            <summary>
            Read HYSPLIT trajectory data and create a trajectory start point layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.CreateTrajPointLayer">
            <summary>
            Read HYSPLIT trajectory data and create a trajectory point layer
            </summary>        
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.GetATrajData(System.Int32)">
            <summary>
            Read one trajectory points data
            </summary>        
            <returns>A trajectory points data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITTrajectoryInfo.GenerateInfoText">
            <summary>
            Get HYSPLIT trajectory data info text
            </summary>        
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.TrajectoryInfo">
            <summary>
            Trajectory info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.TrajName">
            <summary>
            Trajectory name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.TrajID">
            <summary>
            Trajectory identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.TrajCenter">
            <summary>
            Trajectory center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.StartLat">
            <summary>
            Start latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.StartLon">
            <summary>
            Start longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TrajectoryInfo.StartHeight">
            <summary>
            Start height
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.METARDataInfo">
            <summary>
            METAR data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.METARDataInfo.StFileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.METARDataInfo.dateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.METARDataInfo.stNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.METARDataInfo.varList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.METARDataInfo.DataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read METAR data info
            </summary>
            <param name="dataFN">METAR data file name</param>      
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>data information text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.GetDiscreteData(System.Int32,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete METAR data
            </summary>        
            <param name="vIdx">variable index</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discrete data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.METARDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo">
            <summary>
            MICAPS 11 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.hours">
            <summary>
            Forecast hours
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.XDelt">
            <summary>
            X delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.YDelt">
            <summary>
            Y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.XMin">
            <summary>
            X minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.XMax">
            <summary>
            X maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.YMin">
            <summary>
            Y minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.YMax">
            <summary>
            Y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.YNum">
            <summary>
            Y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.XNum">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.isLonLat">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.UGridData">
            <summary>
            U Data array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.VGridData">
            <summary>
            V data array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.variableNames">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read MICAPS 11 data info
            </summary>
            <param name="aFile">file path</param>        
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GenerateInfoText">
            <summary>
            Generate data info text of MICAPS 11
            </summary>        
            <returns>data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS11DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.AttStruct">
            <summary>
            NetCDF attribute struct
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AttStruct.attName">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AttStruct.NCType">
            <summary>
            NetCDF data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AttStruct.attLen">
            <summary>
            Attribute length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.AttStruct.attValue">
            <summary>
            Attribute value
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.AttStruct.ToString">
            <summary>
            To string
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DimStruct">
            <summary>
            NetCDF dimension struct
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimStruct.dimName">
            <summary>
            Dimension name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimStruct.dimLen">
            <summary>
            Dimension length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimStruct.dimid">
            <summary>
            Dimension identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DimStruct.IsUnlimited">
            <summary>
            If is unlimited
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo">
            <summary>
            HYSPLIT concentration data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.Ident">
            <summary>
            Specie identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.forecast_hour">
            <summary>
            Forecast hour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.loc_num">
            <summary>
            Location number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.pack_flag">
            <summary>
            Pack flag
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.locArray">
            <summary>
            Location array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lat_point_num">
            <summary>
            Latitude point number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lon_point_num">
            <summary>
            Longitude point number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lat_delta">
            <summary>
            Latitude delta
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lon_delta">
            <summary>
            Longitude delta
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lon_LF">
            <summary>
            Longitude start
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.lat_LF">
            <summary>
            Latitude start
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.time_num">
            <summary>
            Time number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.level_num">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.heights">
            <summary>
            Height array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.pollutant_num">
            <summary>
            Pollutant number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.pollutants">
            <summary>
            Pollutant name array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.hByte_num">
            <summary>
            hByte number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.sample_start">
            <summary>
            Sample start time list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.sample_stop">
            <summary>
            Sample stop time list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read HYSPLIT concentration data info
            </summary>
            <param name="aFile">File path</param>       
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.ReadConcData(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read HYSPLIT concentration data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>        
            <param name="aFactor">Data scale factor</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read HYSPLIT concentration data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>        
            <param name="aFactor">Data scale factor</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GenerateInfoText">
            <summary>
            Get HYSPLIT concentration data info text
            </summary>        
            <returns>data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.HYSPLITData">
            <summary>
            HYSPLIT data operation
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITData.ReadConcDataInfo(System.String)">
            <summary>
            Read HYSPLIT concentration data info
            </summary>
            <param name="aFile">File path</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITData.ReadConcData(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo,System.Int32)">
            <summary>
            Read HYSPLIT concentration data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <param name="aDataInfo">HYSPLIT concentration data info</param>
            <param name="aFactor">Data scale factor</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.HYSPLITData.GenerateInfoText(MeteoInfoC.Data.MeteoData.HYSPLITConcDataInfo)">
            <summary>
            Get HYSPLIT concentration data info text
            </summary>
            <param name="aDataInfo">HYSPLIT concentration data info</param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo">
            <summary>
            MICAPS 1 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.stNum">
            <summary>
            Station number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.varNum">
            <summary>
            Variable number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.isAutoStation">
            <summary>
            If is auto station
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.hasAllCols">
            <summary>
            If has all data columns
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.FieldList">
            <summary>
            Field list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.VarList">
            <summary>
            Variable list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.DataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read MICAPS 1 data info
            </summary>
            <param name="aFile">file path</param>       
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GenerateInfoText">
            <summary>
            Generate data info text of MICAPS 1
            </summary>       
            <returns>info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GetDiscreteData(System.Int32,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete data from MICAPS 1 data info
            </summary>        
            <param name="vIdx">variable index</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discreted data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GetDiscreteData(System.Int32,System.Collections.Generic.List{System.String}@,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete data from MICAPS 1 data info
            </summary>        
            <param name="vIdx">variable index</param>
            <param name="stations">ref stations</param>
            <param name="dataExtent">ref data extent</param>
            <returns>discreted data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS1DataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo">
            <summary>
            MICAPS 4 data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.hours">
            <summary>
            Forecast hours
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.XDelt">
            <summary>
            X delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.YDelt">
            <summary>
            Y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.XMin">
            <summary>
            X minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.XMax">
            <summary>
            X maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.YMin">
            <summary>
            Y minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.YMax">
            <summary>
            Y maximum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.YNum">
            <summary>
            Y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.XNum">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.contourDelt">
            <summary>
            Contour delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.contourSValue">
            <summary>
            Contour start value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.contourEValue">
            <summary>
            Contour end value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.smoothCo">
            <summary>
            Smooth coefficient
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.boldValue">
            <summary>
            Bold contour value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.isLonLat">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GridData">
            <summary>
            Data array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.ReadDataInfo(System.String)">
            <summary>
            Read MICAPS 4 data info
            </summary>
            <param name="aFile"></param>    
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GenerateInfoText">
            <summary>
            Generate data info text of MICAPS 4
            </summary>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LonLat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - TimeLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLat
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelLon
            </summary>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - LevelTime
            </summary>
            <param name="latIdx">Laititude index</param>
            <param name="varIdx">Variable index</param>
            <param name="lonIdx">Longitude index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Time
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read grid data - Level
            </summary>
            <param name="lonIdx">Longitude index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="timeIdx">Time index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lon
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="latIdx">Latitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level Index</param>
            <returns>Grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPS4DataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get grid data - Lat
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="lonIdx">Longitude index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Grid data</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MICAPSData">
            <summary>
            MICAPS data methods
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.ReadMICAPSHead(System.String)">
            <summary>
            Read MICAPS data head
            </summary>
            <param name="aFile"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.ReadMicaps1(System.String)">
            <summary>
            Read MICAPS 1 data info
            </summary>
            <param name="aFile"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.ReadMicaps4(System.String)">
            <summary>
            Read MICAPS 4 data info
            </summary>
            <param name="aFile"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.ReadMicaps11(System.String)">
            <summary>
            Read MICAPS 11 data info
            </summary>
            <param name="aFile">file path</param>
            <returns>MICAPS 11 data info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.GetDiscreteData_M1(MeteoInfoC.Data.MeteoData.MICAPS1DataInfo,System.Int32,MeteoInfoC.Global.Extent@)">
            <summary>
            Get discrete data from MICAPS 1 data info
            </summary>
            <param name="aMDInfo"></param>
            <param name="vIdx"></param>
            <param name="dataExtent"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.GenerateInfoText_M1(MeteoInfoC.Data.MeteoData.MICAPS1DataInfo)">
            <summary>
            Generate data info text of MICAPS 1
            </summary>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.GenerateInfoText_M4(MeteoInfoC.Data.MeteoData.MICAPS4DataInfo)">
            <summary>
            Generate data info text of MICAPS 4
            </summary>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.GenerateInfoText_M11(MeteoInfoC.Data.MeteoData.MICAPS11DataInfo)">
            <summary>
            Generate data info text of MICAPS 11
            </summary>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.GetWeatherTypes(System.String)">
            <summary>
            Get weather list
            </summary>
            <param name="weatherType"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MICAPSData.MICAPS1ToGrADS(System.String,System.String)">
            <summary>
            Convert MICAPS1 data to GrADS station data
            </summary>
            <param name="inFile"></param>
            <param name="outFile"></param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDF4">
            <summary>
            NetCDF 4
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode">
            <summary>
            Create mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_NOWRITE">
            <summary>
            NC_NOWRITE
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_WRITE">
            <summary>
            NC_WRITE
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_CLOBBER">
            <summary>
            NC_CLOBBER
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_NOCLOBBER">
            <summary>
            NC_NOCLOBBER
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_FILL">
            <summary>
            NC_FILL
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_NOFILL">
            <summary>
            NC_NOFILL
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_LOCK">
            <summary>
            NC_LOCK
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.CreateMode.NC_SHARE">
            <summary>
            NC_SHARE
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDF4.NcType">
            <summary>
            NetCDF data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_BYTE">
            <summary>
            NC_BYTE
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_CHAR">
            <summary>
            NC_CHAR
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_SHORT">
            <summary>
            NC_SHORT
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_INT">
            <summary>
            NC_INT
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_FLOAT">
            <summary>
            NC_FLOAT
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NcType.NC_DOUBLE">
            <summary>
            NC_DOUBLE
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits">
            <summary>
            NetCDF limits
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits.NC_MAX_DIMS">
            <summary>
            Maximum dimensions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits.NC_MAX_ATTRS">
            <summary>
            Maximum attribute number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits.NC_MAX_VARS">
            <summary>
            Maximum variables per file
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits.NC_MAX_NAME">
            <summary>
            Maximum length of a name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NetCDF_limits.NC_MAX_VAR_DIMS">
            <summary>
            Maximum per variable dimensions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NC_UNLIMITED">
            <summary>
            Unlimited dimension identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDF4.NC_GLOBAL">
            <summary>
            Global attribute id
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_open(System.String,System.Int32,System.Int32@)">
            <summary>
            Open NetCDF data file
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="ncidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_create(System.String,System.Int32,System.Int32@)">
            <summary>
            Create NetCDF data file
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="ncidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_close(System.Int32)">
            <summary>
            Close NetCDF data file
            </summary>
            <param name="ncidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_sync(System.Int32)">
            <summary>
            nc_sync
            </summary>
            <param name="ncid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_enddef(System.Int32)">
            <summary>
            End defination
            </summary>
            <param name="ncid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_redef(System.Int32)">
            <summary>
            Redefination
            </summary>
            <param name="ncid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_strerror(System.Int32)">
            <summary>
            Error text
            </summary>
            <param name="ncerror"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_def_dim(System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            Define dimension
            </summary>
            <param name="ncid"></param>
            <param name="name"></param>
            <param name="len"></param>
            <param name="dimidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_def_var(System.Int32,System.String,System.Int32,System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Define variable
            </summary>
            <param name="ncid"></param>
            <param name="name"></param>
            <param name="xtype"></param>
            <param name="ndims"></param>
            <param name="dimids"></param>
            <param name="varidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Inquire
            </summary>
            <param name="ncid"></param>
            <param name="ndims"></param>
            <param name="nvars"></param>
            <param name="ngatts"></param>
            <param name="unlimdimid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_var(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@,System.Int32@,System.Int32[],System.Int32@)">
            <summary>
            Inquire variable
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="ndims"></param>
            <param name="dimids"></param>
            <param name="natts"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_varids(System.Int32,System.Int32@,System.Int32[])">
            <summary>
            Inquire variable ids
            </summary>
            <param name="ncid"></param>
            <param name="nvars"></param>
            <param name="varids"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_vartype(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Inquire variable type
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="xtypep"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_varnatts(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Inquire variable attributes
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="nattsp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_varid(System.Int32,System.String,System.Int32@)">
            <summary>
            Inquire variable id
            </summary>
            <param name="ncid"></param>
            <param name="name"></param>
            <param name="varidp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_ndims(System.Int32,System.Int32@)">
            <summary>
            Inquire dimension number
            </summary>
            <param name="ncid"></param>
            <param name="ndims"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_nvars(System.Int32,System.Int32@)">
            <summary>
            Inquire variable number
            </summary>
            <param name="ncid"></param>
            <param name="nvars"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_varname(System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Inquire variable name
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_varndims(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Inquire variable dimension number
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="ndims"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_vardimid(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Inquire variable dimension ids
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dimids"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_var_fill(System.Int32,System.Int32,System.Int32@,System.Object@)">
            <summary>
            Inquire variable fill
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="no_fill"></param>
            <param name="fill_value"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_natts(System.Int32,System.Int32@)">
            <summary>
            Inquire global attribute number
            </summary>
            <param name="ncid"></param>
            <param name="ngatts"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_unlimdim(System.Int32,System.Int32@)">
            <summary>
            Inquire unlimited dimension id
            </summary>
            <param name="ncid"></param>
            <param name="unlimdimid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_format(System.Int32,System.Int32@)">
            <summary>
            Inquire format
            </summary>
            <param name="ncid"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_attname(System.Int32,System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Inquire attribute name
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="attnum"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_atttype(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@)">
            <summary>
            Inquire attribute name
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_att(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
            Inquire attribute
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_dim(System.Int32,System.Int32,System.Text.StringBuilder,System.Int32@)">
            <summary>
            Inquire dimension
            </summary>
            <param name="ncid"></param>
            <param name="dimid"></param>
            <param name="name"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_dimname(System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Inquire dimension name
            </summary>
            <param name="ncid"></param>
            <param name="dimid"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_dimid(System.Int32,System.String,System.Int32@)">
            <summary>
            Inquire dimension id
            </summary>
            <param name="ncid"></param>
            <param name="name"></param>
            <param name="dimid"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_inq_dimlen(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Inquire dimension length
            </summary>
            <param name="ncid"></param>
            <param name="dimid"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_text(System.Int32,System.Int32,System.String,System.Text.StringBuilder)">
            <summary>
            Get attribute text
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_schar(System.Int32,System.Int32,System.String,System.SByte[])">
            <summary>
            Get attribute schar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_uchar(System.Int32,System.Int32,System.String,System.Byte[])">
            <summary>
            Get attribute uchar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_short(System.Int32,System.Int32,System.String,System.Int16[])">
            <summary>
            Get attribute short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_int(System.Int32,System.Int32,System.String,System.Int32[])">
            <summary>
            Get attribute int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_float(System.Int32,System.Int32,System.String,System.Single[])">
            <summary>
            Get attribute float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_att_double(System.Int32,System.Int32,System.String,System.Double[])">
            <summary>
            Get attribute double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_text(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[])">
            <summary>
            Get vara text
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_schar(System.Int32,System.Int32,System.Int32[],System.Int32[],System.SByte[])">
            <summary>
            Get vara schar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_uchar(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[])">
            <summary>
            Get vara uchar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_short(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int16[])">
            <summary>
            Get vara short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_ubyte(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[])">
            <summary>
            Get vara ubyte
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_long(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int64[])">
            <summary>
            Get vara long
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_int(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Get vara int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_float(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Single[])">
            <summary>
            Get vara float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_double(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Get vara double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_vara_string(System.Int32,System.Int32,System.Int32[],System.Int32[],System.String[])">
            <summary>
            Get vara string
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_string(System.Int32,System.Int32,System.String[])">
            <summary>
            Get variable string
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_text(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Get variable text
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_schar(System.Int32,System.Int32,System.SByte[])">
            <summary>
            Get variable schar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_short(System.Int32,System.Int32,System.Int16[])">
            <summary>
            Get variable short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_int(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Get variable int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_long(System.Int32,System.Int32,System.Int64[])">
            <summary>
            Get variable long
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_float(System.Int32,System.Int32,System.Single[])">
            <summary>
            Get variable float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_double(System.Int32,System.Int32,System.Double[])">
            <summary>
            Get variable double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_get_var_ubyte(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Get variable byte
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_text(System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Put attribute text
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_double(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Double[])">
            <summary>
            Put attribute double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_int(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Put attribute int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_short(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int16[])">
            <summary>
            Put attribute short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_float(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Single[])">
            <summary>
            Put attribute float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_att_byte(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.SByte[])">
            <summary>
            Put attribute byte
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="len"></param>
            <param name="tp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_double(System.Int32,System.Int32,System.Double[])">
            <summary>
            Put variable double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_float(System.Int32,System.Int32,System.Single[])">
            <summary>
            Put variable float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_short(System.Int32,System.Int32,System.Int16[])">
            <summary>
            Put variable short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_int(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Put variable int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_long(System.Int32,System.Int32,System.Int64[])">
            <summary>
            Put variable long
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_ubyte(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Put variable ubyte
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_schar(System.Int32,System.Int32,System.SByte[])">
            <summary>
            Put variable schar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_var_string(System.Int32,System.Int32,System.String[])">
            <summary>
            Put variable string
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_double(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Put vara double
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_float(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Single[])">
            <summary>
            Put vara float
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="fp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_short(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int16[])">
            <summary>
            Put vara short
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_int(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Put vara int
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_long(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int64[])">
            <summary>
            Put vara long
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="lp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_ubyte(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[])">
            <summary>
            Put vara ubyte
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="bp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_schar(System.Int32,System.Int32,System.Int32[],System.Int32[],System.SByte[])">
            <summary>
            Put vara schar
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_string(System.Int32,System.Int32,System.Int32[],System.Int32[],System.String[])">
            <summary>
            Put vara string
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDF4.nc_put_vara_text(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Byte[])">
            <summary>
            put vara text
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="start"></param>
            <param name="count"></param>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDFData">
            <summary>
            NetCDF data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
            <param name="tDimName">time dimension name</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles_Time(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
            <param name="timeDimStr">time dimension name string</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles_Time_bak2(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
            <param name="timeDimStr">time dimension name string</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles_Time_bak1(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
            <param name="timeDimStr">time dimension name string</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles_Time_bak(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
            <param name="timeDimStr">time dimension name string</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.JoinDataFiles_Variable(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Join data files
            </summary>
            <param name="inFiles">input nc files</param>
            <param name="outFile">joined output nc file</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.AddTimeDimension(System.String,System.String,System.DateTime)">
            <summary>
            Add time dimension
            </summary>
            <param name="inFile">input nc file</param>
            <param name="outFile">output nc file</param>
            <param name="aTime">time</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFData.AddTimeDimension(System.String,System.String,System.DateTime,System.String)">
            <summary>
            Add time dimension
            </summary>
            <param name="inFile">input nc file</param>
            <param name="outFile">output nc file</param>
            <param name="aTime">time</param>
            <param name="timeUnit">time unit (days, minutes, seconds)</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.NetCDFDataInfo">
            <summary>
            NetCDF data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.ncid">
            <summary>
            ncid of the file
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.ndims">
            <summary>
            number of dimensions
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.nvars">
            <summary>
            number of variables
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.natts">
            <summary>
            number of global attributes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.unlimdimid">
            <summary>
            id of unlimited dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.isLatLon">
            <summary>
            if data set is lat/lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo._dimList">
            <summary>
            dimension list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.gAttList">
            <summary>
            global attribute list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.levels">
            <summary>
            levels array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.X">
            <summary>
            x coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.Y">
            <summary>
            y coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.XDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.YDelt">
            <summary>
            x delt, y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.Convention">
            <summary>
            Data convention, CF or others
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.times">
            <summary>
            Times
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.DimensionNames">
            <summary>
            Get dimension name list
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.Dimensions">
            <summary>
            Get dimensions
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read NetCDF data info
            </summary>
            <param name="aFile">file path</param>       
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetStartTimeInfo">
            <summary>
            Get start time and time unit
            </summary>
            <returns>Start time and time unit</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetPSDTimeInfo(System.String,System.DateTime@,MeteoInfoC.Data.MeteoData.TimeUnit@)">
            <summary>
            Get start time and time unit from time string
            </summary>
            <param name="tStr">Time string</param>
            <param name="sTime">Start time</param>
            <param name="aTU">Time unit</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetTimeVariable">
            <summary>
            Get time coordinate variable
            </summary>
            <returns>Time variable</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>        
            <returns>data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetAttStr(MeteoInfoC.Data.MeteoData.AttStruct)">
            <summary>
            Get attribute structure string
            </summary>
            <param name="aAttS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Lon/Lat
            </summary>
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>   
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Lon/Lat
            </summary>
            <param name="timeIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Time/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_TimeLon(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Time/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Time/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_TimeLat(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Time/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Level/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_LevelLon(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Level/Lon
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Level/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_LevelLat(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Level/Lat
            </summary>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Level/Time
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="lonIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_LevelTime(System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Level/Time
            </summary>
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="lonIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF grid data - Time
            </summary>
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF grid data - Time
            </summary>
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF data - Level
            </summary>
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF data - Level
            </summary>
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF data - Longitude
            </summary>
            <param name="latIdx"></param>
            <param name="timeIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF data - Longitude
            </summary>
            <param name="latIdx"></param>
            <param name="timeIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get NetCDF data - Latitude
            </summary>
            <param name="timeIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetNetCDFGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDFDataInfo)">
            <summary>
            Get NetCDF data - Latitude
            </summary>
            <param name="timeIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>
            <param name="aDataInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.Clone">
            <summary>
            Clone
            </summary>
            <returns>NetCDF data info</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddDimension(MeteoInfoC.Data.MeteoData.Dimension)">
            <summary>
            Add dimension
            </summary>
            <param name="aDimS">a dimension</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetVarData(MeteoInfoC.Data.MeteoData.Variable,System.Object[]@)">
            <summary>
            Get variable data
            </summary>
            <param name="aVarS">a variable</param>
            <param name="data">data</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.GetVaraData(MeteoInfoC.Data.MeteoData.Variable,System.Int32[],System.Int32[],System.Object[]@)">
            <summary>
            Get part of variable data
            </summary>
            <param name="aVarS">a variable</param>
            <param name="start">start array</param>
            <param name="count">count array</param>
            <param name="data">ref data</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteNetCDFData(System.String,System.Object[])">
            <summary>
            Write NetCDF data file
            </summary>
            <param name="aFile">file path</param>        
            <param name="data">data array</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteAtt(System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.AttStruct)">
            <summary>
            Write attribute
            </summary>
            <param name="ncid"></param>
            <param name="varid"></param>
            <param name="aAttS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddDimension(System.String,System.Int32)">
            <summary>
            Add a dimension
            </summary>
            <param name="dimName">dimension name</param>
            <param name="dimLen">dimension length</param>
            <returns>dimension</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddVariable(MeteoInfoC.Data.MeteoData.Variable)">
            <summary>
            Add a variable
            </summary>
            <param name="aVar">variable</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddNewVariable(MeteoInfoC.Data.MeteoData.Variable,System.Int32)">
            <summary>
            Add a new variable in cn file
            </summary>
            <param name="aVarS">variable</param>
            <param name="ncid">nc file identifer</param>
            <returns>is ok</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddVariable(System.String,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,System.Collections.Generic.List{MeteoInfoC.Data.MeteoData.Dimension})">
            <summary>
            Add a variable
            </summary>
            <param name="varName">variable name</param>
            <param name="ncType">NcType</param>
            <param name="dims">dimension list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddVariable(System.String,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,MeteoInfoC.Data.MeteoData.Dimension[])">
            <summary>
            Add a variable
            </summary>
            <param name="varName">variable name</param>
            <param name="ncType">NcType</param>
            <param name="dims">dimension list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddVariableAttribute(System.String,System.String,System.String)">
            <summary>
            Add attribute to the variable
            </summary>
            <param name="varName">variable name</param>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddVariableAttribute(System.String,System.String,System.Double)">
            <summary>
            Add attribute to the variable
            </summary>
            <param name="varName">variable name</param>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.AddGlobalAttribute(System.String,System.String)">
            <summary>
            Add global attribute
            </summary>
            <param name="gAttName">attribute name</param>
            <param name="gAttValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.CreateNCFile(System.String)">
            <summary>
            Create NetCDF file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteNetCDFDataInfo(System.Int32)">
            <summary>
            Write NetCDF data info
            </summary>
            <param name="ncid">data file identifer</param>        
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVar(System.String,System.Object[])">
            <summary>
            Write variable data
            </summary>
            <param name="varName">variable name</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVar(MeteoInfoC.Data.MeteoData.Variable,System.Object[])">
            <summary>
            Write variable data
            </summary>
            <param name="aVar">variable</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVar(System.String,System.Double[])">
            <summary>
            Write variable data
            </summary>
            <param name="varName">variable name</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVara(MeteoInfoC.Data.MeteoData.Variable,System.Int32[],System.Int32[],System.Object[])">
            <summary>
            Write variable data
            </summary>
            <param name="aVar">variable</param>
            <param name="start">start position array</param>
            <param name="count">count array</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVara(System.String,System.Int32[],System.Int32[],System.Object[])">
            <summary>
            Write variable data
            </summary>
            <param name="varName">variable name</param>
            <param name="start">start position array</param>
            <param name="count">count array</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVara(System.String,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Write variable data
            </summary>
            <param name="varName">variable name</param>
            <param name="start">start position array</param>
            <param name="count">count array</param>
            <param name="data">data array</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVarData(System.Int32,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,System.Object[])">
            <summary>
            Write data of a variable
            </summary>       
            <param name="varid">variable identifer</param>        
            <param name="ncType">NetCDF data type</param>
            <param name="data">data array</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVarData(System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,System.Object[])">
            <summary>
            Write data of a variable
            </summary>      
            <param name="ncid">nc file identifer</param>
            <param name="varid">variable identifer</param>        
            <param name="ncType">NetCDF data type</param>
            <param name="data">data array</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVaraData(System.Int32,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,System.Int32[],System.Int32[],System.Object[])">
            <summary>
            Write data of a variable
            </summary>       
            <param name="varid">variable identifer</param>        
            <param name="ncType">NetCDF data type</param>
            <param name="start">start position array</param>
            <param name="count">count array</param>
            <param name="data">data array</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.WriteVaraData(System.Int32,System.Int32,MeteoInfoC.Data.MeteoData.NetCDF4.NcType,System.Int32[],System.Int32[],System.Object[])">
            <summary>
            Write data of a variable
            </summary>       
            <param name="ncid">nc identifer</param>
            <param name="varid">variable identifer</param>        
            <param name="ncType">NetCDF data type</param>
            <param name="start">start position array</param>
            <param name="count">count array</param>
            <param name="data">data array</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.NetCDFDataInfo.CloseNCFile">
            <summary>
            Close NetCDF file
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.DrawType2D">
            <summary>
            2D draw type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Contour">
            <summary>
            Contour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Shaded">
            <summary>
            Shaded
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Grid_Fill">
            <summary>
            Grid fill
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Grid_Point">
            <summary>
            Grid point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Vector">
            <summary>
            Vector
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Barb">
            <summary>
            Barb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Streamline">
            <summary>
            Streamline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Station_Point">
            <summary>
            Station point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Weather_Symbol">
            <summary>
            Weather symbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Station_Model">
            <summary>
            Station model
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Traj_Line">
            <summary>
            Trajectory line
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Traj_StartPoint">
            <summary>
            Trajectory start point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Traj_Point">
            <summary>
            Trajectory point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Station_Info">
            <summary>
            Station information
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.DrawType2D.Raster">
            <summary>
            Raster
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GrADSDataInfo">
            <summary>
            GrADS data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.DESCRIPTOR">
            <summary>
            Descriptor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.DSET">
            <summary>
            Data file name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.isLatLon">
            <summary>
            Is Lat/Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.EarthWind">
            <summary>
            If rotate vector
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.DTYPE">
            <summary>
            Data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.OPTIONS">
            <summary>
            Options
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.TITLE">
            <summary>
            Title
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.PDEF">
            <summary>
            Projection set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.XDEF">
            <summary>
            X set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.YDEF">
            <summary>
            Y set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ZDEF">
            <summary>
            Level set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.TDEF">
            <summary>
            Time set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.VARDEF">
            <summary>
            Variable set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.FILEHEADER">
            <summary>
            A header record of length bytes that precedes the data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.THEADER">
            <summary>
            A header record of length bytes preceding each time block of binary data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.XYHEADER">
            <summary>
            A header record of length bytes preceding each horizontal grid (XY block) of binary data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.isGlobal">
            <summary>
            Is global
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo._recordLen">
            <summary>
            Record length in bytes for x/y varying grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo._recLenPerTime">
            <summary>
            Record length per time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.X">
            <summary>
            X coordinate
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.Y">
            <summary>
            Y coordinate
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.XNum">
            <summary>
            X coordinate number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GrADSDataInfo.YNum">
            <summary>
            Y coordinate number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.GrADSDataInfo.UpperVariables">
            <summary>
            Get variable list they have upper levels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.GrADSDataInfo.UpperVariableNames">
            <summary>
            Get variable name list they have upper levels
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ReadDataInfo(System.String)">
            <summary>
            Read GrADS data info
            </summary>
            <param name="aFile">ctl file path</param>
            <returns>is correct</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ReadDataInfo(System.String,System.String@)">
            <summary>
            Read GrADS ctl file
            </summary>
            <param name="aFile"></param>
            <param name="errorStr"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSCTLFile">
            <summary>
            Write GrADS control file
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSCtlFile_Station(System.String,MeteoInfoC.Data.MeteoData.MICAPS1DataInfo)">
            <summary>
            Write GrADS ctl file - station
            </summary>
            <param name="aFile"></param>
            <param name="aM1DataInfo"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSCtlFile_Station(System.String,System.Collections.Generic.List{System.String},System.Double,System.String,System.DateTime,System.Int32)">
            <summary>
            Write GrADS ctl file -station
            </summary>
            <param name="aFile"></param>
            <param name="varNames"></param>
            <param name="MissingValue"></param>
            <param name="tIncrement"></param>
            <param name="sTime"></param>
            <param name="timeNum"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Lat/Lon
            </summary>        
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ReadGrADSData_Grid_LonLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Lat/Lon
            </summary>        
            <param name="timeIdx">time index</param>
            <param name="varIdx">variable index</param>
            <param name="levelIdx">level index</param>        
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_TimeLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Time/Lon
            </summary>        
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_TimeLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Time/Lat
            </summary>        
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_LevelLat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Level/Lat
            </summary>        
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>       
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_LevelLon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Level/Lon
            </summary>        
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_LevelTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Level/Time
            </summary>       
            <param name="latIdx"></param>
            <param name="varIdx"></param>
            <param name="lonIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_Time(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Time
            </summary>        
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="levelIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_Level(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Level
            </summary>        
            <param name="latIdx"></param>
            <param name="lonIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_Lon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS grid data - Longitude
            </summary>        
            <param name="latIdx"></param>
            <param name="levelIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_Lat(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read GrADS data - Latitude
            </summary>        
            <param name="lonIdx"></param>
            <param name="levelIdx"></param>
            <param name="varIdx"></param>
            <param name="timeIdx"></param>        
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ReadGrADSData_Station(System.Int32)">
            <summary>
            Read GrADS station data
            </summary>       
            <param name="timeIdx">time index</param>            
            <returns>station data list</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGridData_Station(System.Int32,System.String)">
            <summary>
            Read GrADS station data
            </summary>       
            <param name="vIdx">variable index</param>
            <param name="stID">statin identifer</param>   
            <returns>station data list</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetUpperLevelStations(System.Int32)">
            <summary>
            Get Upper Level stations
            </summary>
            <param name="timeIdx">time index</param>
            <returns>upper level stations</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGridData(MeteoInfoC.Data.GridData)">
            <summary>
            Write grid data to a GrADS binary data file
            </summary>
            <param name="gridData">grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGridData(System.Double[0:,0:])">
            <summary>
            Write grid data to a GrADS binary data file
            </summary>
            <param name="gridData">grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSData_Grid(System.String,System.Double[0:,0:])">
            <summary>
            Write GrADS grid data
            </summary>
            <param name="aFile">File name</param>
            <param name="gridData">Grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSData_Grid(System.IO.BinaryWriter,System.Double[0:,0:])">
            <summary>
            Write GrADS grid data
            </summary>
            <param name="bw">File name</param>
            <param name="gridData">Grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGridData_Null">
            <summary>
            Write undefine grid data GrADS data file
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSData_Grid_Null(System.IO.BinaryWriter)">
            <summary>
            Write undefine grid data to GrADS file
            </summary>
            <param name="bw">binary writer</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSStationData(System.String,MeteoInfoC.Data.MeteoData.MICAPS1DataInfo)">
            <summary>
            Write GrADS station data
            </summary>
            <param name="aFile">Output GrADS station binary data file</param>
            <param name="aM1DataInfo">The MICAPS 1 data info</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSStationData(System.String,MeteoInfoC.Data.MeteoData.MICAPS1DataInfo,System.Collections.Generic.List{System.Int32})">
            <summary>
            Write GrADS station data
            </summary>
            <param name="aFile">file path</param>
            <param name="aM1DataInfo">MICAPS 1 data info</param>
            <param name="varIdxList">variable index list</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSStationData(System.IO.BinaryWriter,MeteoInfoC.Data.MeteoData.MICAPS1DataInfo,System.Collections.Generic.List{System.Int32})">
            <summary>
            Write GrADS station data
            </summary>
            <param name="bw"></param>
            <param name="aM1DataInfo"></param>
            <param name="varIdxList"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteStationData(MeteoInfoC.Data.StationInfoData)">
            <summary>
            Write GrADS station data
            </summary>
            <param name="stInfoData">Station info data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteStationData(System.IO.BinaryWriter,MeteoInfoC.Data.StationInfoData)">
            <summary>
            Write GrADS station data
            </summary>
            <param name="bw">Binary writer</param>
            <param name="stInfoData">Station info data</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.WriteGrADSStationDataNull(System.IO.BinaryWriter)">
            <summary>
            Write GrADS station data null (no data at that time)
            </summary>
            <param name="bw"></param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetStationData(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read station data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="varIdx">Variable index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetStationInfoData(System.Int32,System.Int32)">
            <summary>
            Read station info data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>StationInfoData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetStationModelData(System.Int32,System.Int32)">
            <summary>
            Read station model data
            </summary>
            <param name="timeIdx">Time index</param>
            <param name="levelIdx">Level index</param>
            <returns>Station model data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGroundDiscretedData(System.Collections.Generic.List{MeteoInfoC.Data.MeteoData.STData},System.Int32,MeteoInfoC.Global.Extent@)">
            <summary>
            Generate ground discrete data
            </summary>
            <param name="stDataList"></param>
            <param name="varIdx"></param>
            <param name="dataExtent"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGroundStationData(System.Collections.Generic.List{MeteoInfoC.Data.MeteoData.STData},System.Int32)">
            <summary>
            Get ground station data
            </summary>
            <param name="stDataList">station data list</param>
            <param name="varIdx">variable index</param>        
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGroundStationInfoData(System.Int32)">
            <summary>
            Get ground station info data
            </summary>
            <param name="timeIdx">Time index</param>        
            <returns>Station info data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GetGroundStationInfoData(System.Collections.Generic.List{MeteoInfoC.Data.MeteoData.STData})">
            <summary>
            Get ground station info data
            </summary>
            <param name="stDataList">station data list</param>        
            <returns>station info data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.GenerateInfoText">
            <summary>
            Generate data info text
            </summary>
            <returns>Data info text</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.CreateDataFile(System.String)">
            <summary>
            Create a GrADS binary data file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.CloseDataFile">
            <summary>
            Close the data file created by prevoid step
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.SwapByteOrder(System.Single)">
            <summary>
            Swaps the byte order of an Single
            </summary>
             <param name="d">Single to swap</param>
             <returns>Byte Order swapped Single</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.VaxSingleFromBytes(System.Byte[])">
            <summary>
            Reading some binary files created under OpenVMS (Alpha)
            </summary>
            <param name="bytes">byte array</param>
            <returns>Float value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.GrADSDataInfo.ConvertToNCData(System.String)">
            <summary>
            Convert to netCDF data
            </summary>
            <param name="ncFilePath">output netCDF data file path</param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.GridDataSetting">
            <summary>
            Grid data parameter set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GridDataSetting.DataExtent">
            <summary>
            Data extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GridDataSetting.XNum">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.GridDataSetting.YNum">
            <summary>
            Y number
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.InterpolationMethods">
            <summary>
            Grid interpolation methods
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.InterpolationMethods.IDW_Radius">
            <summary>
            IDW radius
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.InterpolationMethods.IDW_Neighbors">
            <summary>
            IDV neighbors
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.InterpolationMethods.Cressman">
            <summary>
            Cressman analysis
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.InterpolationMethods.AssignPointToGrid">
            <summary>
            Assign point to grid
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.InterpolationSetting">
            <summary>
            Grid interpolation
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.InterpolationSetting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.InterpolationSetting.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String,System.Single,System.Int32)">
            <summary>
            Set grid interpolation parameters
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
            <param name="xNum">x number</param>
            <param name="yNum">y nunmber</param>
            <param name="aInterMethod">interpolation method</param>
            <param name="radius">radius</param>
            <param name="minNum">mininum number</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.InterpolationSetting.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Set grid interpolation parameters
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
            <param name="xNum">x number</param>
            <param name="yNum">y nunmber</param>
            <param name="aInterMethod">interpolation method</param>
            <param name="radList">radius</param>        
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.GridDataSet">
            <summary>
            Get or set grid data parameter
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.InterpolationMethod">
            <summary>
            Get or set grid interpolation method
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.MinPointNum">
            <summary>
            Get or set minimum point number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.Radius">
            <summary>
            Get or set search radius
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.UnDefData">
            <summary>
            Get or set undefine data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.InterpolationSetting.RadList">
            <summary>
            Get or set radius list
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MeteoDataDrawSet">
            <summary>
            Meteo data drawing set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataDrawSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataDrawSet.WeatherType">
            <summary>
            Get or set weather type
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataDrawSet.GetWeatherTypes(System.String)">
            <summary>
            Get weather type
            </summary>
            <param name="weatherType">Weather type string</param>
            <returns>ArrayList of weather codes</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MeteoDataInfo">
            <summary>
            Meteo data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.DataType">
            <summary>
            Meteological data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.IsLonLat">
            <summary>
            Is Lont/Lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.ProjInfo">
            <summary>
            ProjectionInfo
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.EarthWind">
            <summary>
            If the U/V of the wind are along latitude/longitude.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo._dataInfo">
            <summary>
            Meteorological data info
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.InfoText">
            <summary>
            Data information text
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.MissingValue">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.MeteoUVSet">
            <summary>
            Wind U/V variable name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.XReserve">
            <summary>
            If X reserved
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataInfo.YReserve">
            <summary>
            If Y reserved
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.DataInfo">
            <summary>
            Get or set DataInfo
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.DimensionSet">
            <summary>
            Get or set plot dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.TimeIndex">
            <summary>
            Get or set time index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.LevelIndex">
            <summary>
            Get or set level index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.VariableIndex">
            <summary>
            Get or set variable index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.LonIndex">
            <summary>
            Get or set longitude index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.LatIndex">
            <summary>
            Get or set latitude index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.IsGridData">
            <summary>
            Get if is grid data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.IsStationData">
            <summary>
            Get if is station data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.IsTrajData">
            <summary>
            Get if is trajectory data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.IsSWATHData">
            <summary>
            Get if is SWATH data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoDataInfo.DimensionNumber">
            <summary>
            Get variable dimension number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenGrADSData(System.String)">
            <summary>
            Open GrADS data
            </summary>
            <param name="aFile">data file</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenMICAPSData(System.String)">
            <summary>
            Open MICAPS data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenARLData(System.String)">
            <summary>
            Open ARL packed meteorological data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenGRIBData(System.String)">
            <summary>
            Open GRIB meteorological data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenNCData(System.String)">
            <summary>
            Open NetCDF data
            </summary>
            <param name="aFile">file path</param>
            <returns>if success</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHDFData(System.String)">
            <summary>
            Open HDF data
            </summary>
            <param name="aFile">file path</param>
            <returns>if ok</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenAWXData(System.String)">
            <summary>
            Open AWX data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenGeoTiffData(System.String)">
            <summary>
            Open GeoTiff data
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHRITData(System.String)">
            <summary>
            Open HRIT data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenLonLatData(System.String)">
            <summary>
            Open lon/lat station data
            </summary>
            <param name="aFile">file path</param>
            <returns>Is data opened correctly</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHYSPLITConc(System.String)">
            <summary>
            Open HYSPLIT concentration data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHYSPLITTraj(System.String)">
            <summary>
            Open HYSPLIT trajectory data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHYSPLITTraj(System.String[])">
            <summary>
            Open HYSPLIT trajectory data
            </summary>
            <param name="trajFiles">file paths</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenHYSPLITParticle(System.String)">
            <summary>
            Open HYSPLIT particle data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenMETARData(System.String)">
            <summary>
            Open METAR data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenSYNOPData(System.String,System.String)">
            <summary>
            Open SYNOP data
            </summary>
            <param name="aFile">data file path</param>
            <param name="stFile">station file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenISHData(System.String)">
            <summary>
            Open ISH data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenSuferGridData(System.String)">
            <summary>
            Open Surfer grid data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.OpenASCIIGridData(System.String)">
            <summary>
            Open ESRI ASCII grid data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData(System.String)">
            <summary>
            Get grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.getGridData">
            <summary>
            Get grid data
            </summary>
            <returns>The grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_LonLat(System.String)">
            <summary>
            Get Lon_Lat grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_TimeLon(System.String)">
            <summary>
            Get Time_Lon grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_TimeLat(System.String)">
            <summary>
            Get Time_Lat grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_LevelLon(System.String)">
            <summary>
            Get Level_Lon grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_LevelLat(System.String)">
            <summary>
            Get Level_Lat grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_LevelTime(System.String)">
            <summary>
            Get Level_Time grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_Lat(System.String)">
            <summary>
            Get latitude grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_Lon(System.String)">
            <summary>
            Get longitude grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_Level(System.String)">
            <summary>
            Get level grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetGridData_Time(System.String)">
            <summary>
            Get time grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetStationData(System.String)">
            <summary>
            Get station data
            </summary>
            <param name="varName">Variable name</param>
            <returns>The station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetStationData">
            <summary>
            Get station data
            </summary>
            <returns>The station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetStationModelData">
            <summary>
            Get station model data
            </summary>
            <returns>station model data array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetStationInfoData">
            <summary>
            Get station info data
            </summary>
            <returns>The station info data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetStationInfoData(System.Int32)">
            <summary>
            Get station info data
            </summary>
            <param name="timeIndex">Time index</param>
            <returns>The station info data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetFileName">
            <summary>
            Get file name
            </summary>
            <returns>file name</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetTimeNumber">
            <summary>
            Get time number
            </summary>
            <returns>time number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetTime">
            <summary>
            Get DateTime
            </summary>
            <returns>DateTime</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetTime(System.Int32)">
            <summary>
            Get DateTime by time index
            </summary>
            <param name="timeIdx">time index</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetTimeIndex(System.DateTime)">
            <summary>
            Get time index
            </summary>
            <param name="aTime">a DateTime</param>
            <returns>time index</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetLevelNumber(System.String)">
            <summary>
            Get level number
            </summary>
            <param name="varName">variable name</param>
            <returns>level number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetLevelNumber(System.Int32)">
            <summary>
            Get level number
            </summary>
            <param name="varIdx">variable index</param>
            <returns>level number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetLevelNumber">
            <summary>
            Get level number by first variable
            </summary>
            <returns>level number</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetVariables">
            <summary>
            Get variable list
            </summary>
            <returns>variable list</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetVariable(System.String)">
            <summary>
            Get variable by name
            </summary>
            <param name="varName">Variable name</param>
            <returns>The variable</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetVariableNames">
            <summary>
            Get variable list
            </summary>
            <returns>variable name list</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetVariableIndex(System.String)">
            <summary>
            Get variable index
            </summary>
            <param name="varName">Variable name</param>
            <returns>Variable index</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetTimes">
            <summary>
            Get time list
            </summary>
            <returns>time list</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetLevels">
            <summary>
            Get levels
            </summary>
            <returns>levels</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetX">
            <summary>
            Get X coordinates
            </summary>
            <returns>X</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetY">
            <summary>
            Get Y coordinates
            </summary>
            <returns>Y</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.GetFunctionGridData(System.String)">
            <summary>
            Get function grid data
            </summary>
            <param name="functionString">function string</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoDataInfo.ParseExpr(System.String@)">
            <summary>
            Parse expression
            </summary>
            <param name="expr">ref expression string</param>
            <returns>return int</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MeteoDataType">
            <summary>
            Meteorological data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.GrADS_Grid">
            <summary>
            GrADS grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.GrADS_Station">
            <summary>
            GrADS station
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_1">
            <summary>
            MICAPS 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_2">
            <summary>
            MICAPS 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_3">
            <summary>
            MICAPS 3
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_4">
            <summary>
            MICAPS 4
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_7">
            <summary>
            MICAPS 7
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_11">
            <summary>
            MICAPS 11
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.MICAPS_13">
            <summary>
            MICAPS 13
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.HYSPLIT_Conc">
            <summary>
            HYSPLIT concentration
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.HYSPLIT_Particle">
            <summary>
            HYSPLIT particle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.HYSPLIT_Traj">
            <summary>
            HYSPLIT trajectory
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.ARL_Grid">
            <summary>
            ARL grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.NetCDF">
            <summary>
            NetCDF
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.HDF">
            <summary>
            HDF
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.ASCII_Grid">
            <summary>
            ASCII grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.Sufer_Grid">
            <summary>
            Sufer grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.SYNOP">
            <summary>
            SYNOP
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.METAR">
            <summary>
            METAR
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.ISH">
            <summary>
            NOAA ISH dataset
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.LonLatStation">
            <summary>
            Lon/Lat stations
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.GRIB1">
            <summary>
            GRIB edition 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.GRIB2">
            <summary>
            GRIB edition 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.AWX">
            <summary>
            AWX - FY satellite data format
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.HRIT">
            <summary>
            HRIT/LRIT satellite data format
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.MeteoDataType.GeoTiff">
            <summary>
            GeoTiff
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.MeteoUVSet">
            <summary>
            Wind U V variable names
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoUVSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.UStr">
            <summary>
            Get or set U variable name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.VStr">
            <summary>
            Get or set V variable name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.IsFixUVStr">
            <summary>
            Get or set if fix U/V variable names
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.IsUV">
            <summary>
            Get or set if is U/V or Direction/Speed
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.SkipX">
            <summary>
            Get or set skip X
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.MeteoUVSet.SkipY">
            <summary>
            Get or set skip Y
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.MeteoUVSet.AutoSetUVStr(System.Collections.Generic.List{System.String})">
            <summary>
            Try to set U/V variable names automatic
            </summary>
            <param name="vList">Variables list</param>
            <returns>Boolean result if can find U/V variables</returns>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.PlotDimension">
            <summary>
            Plot dimension
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Lat_Lon">
            <summary>
            Lat_Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Time_Lon">
            <summary>
            Time_Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Time_Lat">
            <summary>
            Time_Lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Level_Lon">
            <summary>
            Level_Lon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Level_Lat">
            <summary>
            Level_Lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Level_Time">
            <summary>
            Level_Time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Lon">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.PlotDimension.Lat">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.STData">
            <summary>
            GrADS station data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STData.STHead">
            <summary>
            Station data head
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STData.dataList">
            <summary>
            Data list
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.STDataHead">
            <summary>
            GrADS station data head
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.STID">
            <summary>
            Station identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.Lat">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.Lon">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.T">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.NLev">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STDataHead.Flag">
            <summary>
            Flag
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.STLevData">
            <summary>
            GrADS station level data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STLevData.lev">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.STLevData.data">
            <summary>
            Data array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.TDEFS">
            <summary>
            GrADS Time dimension set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.Type">
            <summary>
            Type - linear or ...
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.TNum">
            <summary>
            Time number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.STime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.TDelt">
            <summary>
            Time delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.DeltaValue">
            <summary>
            Time delta value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.Unit">
            <summary>
            Time unit
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.TDEFS.times">
            <summary>
            Time array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.VAR">
            <summary>
            GrADS variable set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VAR.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VAR.VName">
            <summary>
            Get or set Variable name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VAR.LevelNum">
            <summary>
            Get or set Level number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VAR.Units">
            <summary>
            Units
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VAR.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.VARDEFS">
            <summary>
            GrADS variable dimension set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VARDEFS.VNum">
            <summary>
            Get Number of variables
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VARDEFS.Vars">
            <summary>
            Get or set Variables
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VARDEFS.AddVar(MeteoInfoC.Data.MeteoData.Variable)">
            <summary>
            Add var
            </summary>
            <param name="aVar"></param>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.YDEFS">
            <summary>
            GrADS Y dimension set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.YDEFS.Type">
            <summary>
            Type - linear or ...
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.YDEFS.YNum">
            <summary>
            Y number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.YDEFS.YMin">
            <summary>
            Y minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.YDEFS.YDelt">
            <summary>
            Y delt
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.YDEFS.Y">
            <summary>
            Y array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.XDEFS">
            <summary>
            GrADS X dimension set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.XDEFS.Type">
            <summary>
            Type - linear or ...
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.XDEFS.XNum">
            <summary>
            X number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.XDEFS.XMin">
            <summary>
            X minimum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.XDEFS.XDelt">
            <summary>
            X delta
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.XDEFS.X">
            <summary>
            X array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.ZDEFS">
            <summary>
            Z dimension set
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ZDEFS.Type">
            <summary>
            Type - linear or ...
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ZDEFS.ZNum">
            <summary>
            Level number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ZDEFS.SLevel">
            <summary>
            Start level
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ZDEFS.ZDelt">
            <summary>
            Level delta
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.ZDEFS.ZLevels">
            <summary>
            Level array
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.MeteoData.VarStruct">
            <summary>
            NetCDF variable struct
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.varName">
            <summary>
            Variable name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.varid">
            <summary>
            Variable identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.ncType">
            <summary>
            NetCDF data type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.dimids">
            <summary>
            Dimension identifer array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.Dimensions">
            <summary>
            Dimension list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.nAtts">
            <summary>
            Attribute number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.attList">
            <summary>
            Attribute list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.isDataVar">
            <summary>
            If is data variable
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.MeteoData.VarStruct.Levels">
            <summary>
            Level list
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VarStruct.DimNumber">
            <summary>
            Get dimention number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.MeteoData.VarStruct.LevelNum">
            <summary>
            Get level number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.GetAttributeIndex(System.String)">
            <summary>
            Get attribute index by name, return -1 if the name not exist.
            </summary>
            <param name="attName">attribute name</param>
            <returns>attribute index</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.GetAttributeString(System.String)">
            <summary>
            Get attribute value string by name
            </summary>
            <param name="attName">attribute name</param>
            <returns>attribute value string</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.AddAttribute(System.String,System.String)">
            <summary>
            Add attribute
            </summary>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.AddAttribute(System.String,System.Double)">
            <summary>
            Add attribute
            </summary>
            <param name="attName">attribute name</param>
            <param name="attValue">attribute value</param>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.HasDimension(System.Int32)">
            <summary>
            Judge if the variable has a dimension
            </summary>
            <param name="dimId">dimension id</param>
            <returns>result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.MeteoData.VarStruct.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Data.StationData">
            <summary>
            Station data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.StationData.Data">
            <summary>
            station data: longitude, latitude, value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.StationData.Stations">
            <summary>
            Station identifer list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.StationData.DataExtent">
            <summary>
            Data extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.StationData.MissingValue">
            <summary>
            Undef data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.#ctor(MeteoInfoC.Data.StationData)">
            <summary>
            Construction
            </summary>
            <param name="aStData">station data</param>
        </member>
        <member name="P:MeteoInfoC.Data.StationData.StNum">
            <summary>
            Get station number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationData.X">
            <summary>
            Get X coodinates array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationData.Y">
            <summary>
            Get Y coodinates array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Addition(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator + for two station data
            </summary>
            <param name="aStData">a station data</param>
            <param name="bStData">a station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Addition(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator + between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Addition(System.Double,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator + between a double data and a station data
            </summary>
            <param name="aData">a double data</param>
            <param name="aStData">a station data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Subtraction(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator - for two station data
            </summary>
            <param name="aStData">a station data</param>
            <param name="bStData">a station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Subtraction(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator - between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Subtraction(System.Double,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator - between a double data and a station data
            </summary>
            <param name="aData">a double data</param>
            <param name="aStData">a station data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Multiply(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator * for two station data
            </summary>
            <param name="aStData">a station data</param>
            <param name="bStData">a station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Multiply(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator * between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Multiply(System.Double,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator * between a double data and a station data
            </summary>
            <param name="aData">a double data</param>
            <param name="aStData">a station data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Division(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator / for two station data
            </summary>
            <param name="aStData">a station data</param>
            <param name="bStData">a station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Division(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator / between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_Division(System.Double,MeteoInfoC.Data.StationData)">
            <summary>
            Override operator / between a double data and a station data
            </summary>
            <param name="aData">a double data</param>
            <param name="aStData">a station data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_GreaterThan(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator > between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_GreaterThanOrEqual(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator >= between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_LessThan(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator less than between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.op_LessThanOrEqual(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Override operator less than or equal between a station data and a double data
            </summary>
            <param name="aStData">a station data</param>
            <param name="aData">a double data</param>        
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.GetMinValue">
            <summary>
            Get minimum value
            </summary>
            <returns>minimum value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.GetMaxValue">
            <summary>
            Get maximum value
            </summary>
            <returns>maximum value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Sum">
            <summary>
            Get summary value
            </summary>
            <returns>summary value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Average">
            <summary>
            Get average value
            </summary>
            <returns>average value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Maskout(MeteoInfoC.Shape.PolygonShape)">
            <summary>
            Mask out station data with a polygon layer
            </summary>
            <param name="aPGS">maskout layer</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Maskout(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Mask out station data with a polygon layer
            </summary>
            <param name="maskLayer">maskout layer</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Maskout(MeteoInfoC.Map.MapView,System.String)">
            <summary>
            Maskout station data by a polygon layer
            </summary>
            <param name="aMapView">MapView</param>
            <param name="layerName">layer name</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Extract(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Extract station data by extent
            </summary>
            <param name="sX">start X</param>
            <param name="eX">end X</param>
            <param name="sY">start Y</param>
            <param name="eY">end Y</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.SaveAsCSVFile(System.String,System.String)">
            <summary>
            Save as CSV data file
            </summary>
            <param name="aFile">file path</param>
            <param name="fieldName">data field name</param>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.SaveAsCSVFile(System.String,System.String,System.Boolean)">
            <summary>
            Save as CSV data file
            </summary>
            <param name="aFile">file path</param>
            <param name="fieldName">data field name</param>
            <param name="saveUndefData">if save undefine data</param>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.Projection(MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project station data
            </summary>
            <param name="fromProj">from projection info</param>
            <param name="toProj">to projection info</param>
            <returns>projected station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.StationData.UpdateExtent">
            <summary>
            Update data extent
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.StationInfoData">
            <summary>
            Station Info data - multi variables
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationInfoData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationInfoData.Variables">
            <summary>
            Get or set variables
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationInfoData.Fields">
            <summary>
            Get or set fields
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationInfoData.Stations">
            <summary>
            Get or set station identifer list
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationInfoData.DataList">
            <summary>
            Get or set data list - the first three columns are stid, lon and lat
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationInfoData.SaveAsCSVFile(System.String)">
            <summary>
            Save the station info data to CSV file
            </summary>
            <param name="aFile">File path</param>
        </member>
        <member name="T:MeteoInfoC.Data.StationModel">
            <summary>
            Station model data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.StationModel.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="initValue">initialize value</param>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.StationIdentifer">
            <summary>
            Get or set station identifer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.StationName">
            <summary>
            Get or set station name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Longitude">
            <summary>
            Get or set longitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Latitude">
            <summary>
            Get or set latitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.CloudCover">
            <summary>
            Get or set cloud cover
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.WindDirection">
            <summary>
            Get or set wind direction
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.WindSpeed">
            <summary>
            Get or set wind speed
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Pressure">
            <summary>
            Get or set pressure
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.PressureChange">
            <summary>
            Get or set pressure change
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Weather">
            <summary>
            Get or set weather
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.PreviousWeather">
            <summary>
            Get or set previous weather
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Visibility">
            <summary>
            Get or set visibility
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.Temperature">
            <summary>
            Get or set temperature
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModel.DewPoint">
            <summary>
            Get or set dew point
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.StationModelData">
            <summary>
            Station model data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModelData.Data">
            <summary>
            Get or set data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModelData.DataExtent">
            <summary>
            Get or set data extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModelData.MissingValue">
            <summary>
            Get or set undefine value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.StationModelData.DataNum">
            <summary>
            Get data number
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.GridData">
            <summary>
            Grid data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.GridData.Data">
            <summary>
            Grid data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.GridData.X">
            <summary>
            x coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.GridData.Y">
            <summary>
            y coordinate array
            </summary>
        </member>
        <member name="F:MeteoInfoC.Data.GridData.MissingValue">
            <summary>
            Undef data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.#ctor">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Data.GridData.#ctor(MeteoInfoC.Data.GridData)">
            <summary>
            Constructor
            </summary>
            <param name="aGridData">grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.#ctor(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="xStart">x start</param>
            <param name="xDelt">x delt</param>
            <param name="xNum">x number</param>
            <param name="yStart">y start</param>
            <param name="yDelt">y delt</param>
            <param name="yNum">y number</param>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.XNum">
            <summary>
            Get X number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.YNum">
            <summary>
            Get Y number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.XDelt">
            <summary>
            Get X delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.YDelt">
            <summary>
            Get Y delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.IsGlobal">
            <summary>
            Get if the data is global
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.XStag">
            <summary>
            Get or set if is X stag
            </summary>
        </member>
        <member name="P:MeteoInfoC.Data.GridData.YStag">
            <summary>
            Get or set if is Y stag
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Addition(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator + for two GridData
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="bGrid">a GridData</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Addition(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator + for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Addition(System.Double,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator + for a double data and a GridData
            </summary>
            /// <param name="aData">a double data</param>
            <param name="aGrid">a GridData</param>        
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Subtraction(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator - for GridData
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="bGrid">a GridData</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Subtraction(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator - for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Subtraction(System.Double,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator - for a double data and a GridData
            </summary>
            /// <param name="aData">a double data</param>
            <param name="aGrid">a GridData</param>        
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Multiply(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator * for GridData
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="bGrid">a GridData</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Multiply(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator * for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Multiply(System.Double,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator * for a double data and a GridData
            </summary>
            <param name="aData">a double data</param>
            <param name="aGrid">a GridData</param>        
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Division(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator / for GridData
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="bGrid">a GridData</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Division(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator / for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_Division(System.Double,MeteoInfoC.Data.GridData)">
            <summary>
            Override operator / for a double data and a GridData
            </summary>
            <param name="aData">a double data</param>
            <param name="aGrid">a GridData</param>       
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_GreaterThan(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator > for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_GreaterThanOrEqual(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator >= for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_LessThan(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator less than for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.op_LessThanOrEqual(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Override operator less than or equal for a GridData and a double data
            </summary>
            <param name="aGrid">a GridData</param>
            <param name="aData">a double data</param>
            <returns>result GridData</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.YReverse">
            <summary>
            Y reverse to the grid data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.GetMinValue">
            <summary>
            Get minimum value
            </summary>
            <returns>minimum value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.GetMaxValue">
            <summary>
            Get maximum value
            </summary>
            <returns>maximum value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Sum">
            <summary>
            Calculate Summary value
            </summary>
            <returns>summary value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Average">
            <summary>
            Calculate average value
            </summary>
            <returns>average value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Maskout(MeteoInfoC.Data.GridData)">
            <summary>
            Mask out grid data with a polygon shape
            </summary>
            <param name="maskGrid">Mask grid data</param>
            <returns>Maskouted grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Maskout(MeteoInfoC.Shape.PolygonShape)">
            <summary>
            Mask out grid data with a polygon shape
            </summary>
            <param name="aPGS">Polygon shape</param>
            <returns>Maskouted grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Maskout(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Mask out grid data with a polygon layer
            </summary>
            <param name="maskLayer">maskout layer</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Maskout(MeteoInfoC.Map.MapView,System.String)">
            <summary>
            Maskout grid data by a polygon layer
            </summary>
            <param name="aMapView">MapView</param>
            <param name="layerName">layer name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SaveAsSurferASCIIFile(System.String)">
            <summary>
            Save as Surfer ASCII data file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SaveAsMICAPS4File(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Save as MICAPS 4 data file
            </summary>
            <param name="aFile">file path</param>
            <param name="description">description</param>
            <param name="aTime">data time</param>
            <param name="hours">hours</param>
            <param name="level">level</param>
            <param name="smooth">smooth coefficient</param>
            <param name="boldValue">bold value</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SaveAsMICAPS4File(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            Save as MICAPS 4 data file
            </summary>
            <param name="aFile">file path</param>
            <param name="description">description</param>
            <param name="aTime">data time</param>
            <param name="hours">hours</param>
            <param name="level">level</param>
            <param name="smooth">smooth coefficient</param>
            <param name="boldValue">bold value</param>
            <param name="dNum">Decimal number of the data</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SaveAsMICAPS4File(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Single,System.Single,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Save as MICAPS 4 data file
            </summary>
            <param name="aFile">file path</param>
            <param name="description">description</param>
            <param name="aTime">data time</param>
            <param name="hours">hours</param>
            <param name="level">level</param>
            <param name="smooth">smooth coefficient</param>
            <param name="boldValue">bold value</param>
            <param name="projInfo">projection information</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SaveAsMICAPS4File(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Single,System.Single,MeteoInfoC.Projections.ProjectionInfo,System.Int32)">
            <summary>
            Save as MICAPS 4 data file
            </summary>
            <param name="aFile">file path</param>
            <param name="description">description</param>
            <param name="aTime">data time</param>
            <param name="hours">hours</param>
            <param name="level">level</param>
            <param name="smooth">smooth coefficient</param>
            <param name="boldValue">bold value</param>
            <param name="projInfo">projection information</param>
            <param name="dNum">Decimal number of the data</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Extract(MeteoInfoC.Global.Extent)">
            <summary>
            Extract grid data by extent
            </summary>
            <param name="extent">extent</param>
            <returns>Extracted grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Extract(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Extract grid data by extent
            </summary>
            <param name="sX">start X</param>
            <param name="eX">end X</param>
            <param name="sY">start Y</param>
            <param name="eY">end Y</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Extract(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract grid by extent index
            </summary>
            <param name="sXIdx">start x index</param>
            <param name="sYIdx">start y index</param>
            <param name="xNum">x number</param>
            <param name="yNum">y number</param>
            <returns>Extracted grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Skip(System.Int32,System.Int32)">
            <summary>
            Skip the grid data by two dimension skip factor
            </summary>
            <param name="skipI">skip factor I</param>
            <param name="skipJ">skip factor J</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.GetValue(System.Double,System.Double)">
            <summary>
            Get a cell value by X/Y coordinate - nearest cell
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>Cell value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ToStation(System.Double,System.Double)">
            <summary>
            Interpolate grid data to a station point
            </summary>
            <param name="x">x coordinate of the station</param>
            <param name="y">y coordinate of the station</param>
            <returns>interpolated value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ToStation_Gaussian(System.Double,System.Double)">
            <summary>
            Interpolate grid data to a station point
            </summary>
            <param name="x">x coordinate of the station</param>
            <param name="y">y coordinate of the station</param>
            <returns>interpolated value</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ToStation(MeteoInfoC.Data.StationData)">
            <summary>
            Interpolate grid data to station data
            </summary>
            <param name="inStData">input station data</param>
            <returns>interpolated station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ToStation(System.String,System.String)">
            <summary>
            Interpolate grid data to stations imported from station file
            </summary>
            <param name="inFile">input station file</param>
            <param name="outFile">output station file</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Regrid(MeteoInfoC.Data.GridData)">
            <summary>
            Regrid data with double linear interpolation method
            </summary>
            <param name="gridData">output grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SetValue(System.Double)">
            <summary>
            Set constant value
            </summary>
            <param name="aValue">value</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SetValue(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Set grid value by vectorlayer - the grid point was assigned a value of
            the index of the shape where the point is located in
            </summary>
            <param name="aLayer">Vector layer</param>
            <returns>New grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.SetValue(MeteoInfoC.Layer.VectorLayer,System.String)">
            <summary>
            Set grid value by vectorlayer - the grid point was assigned a value of
            the field value of the shape where the point is located in
            </summary>
            <param name="aLayer">Vector layer</param>
            <param name="fieldName">Field name - must be the double or int field</param>
            <returns>New grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ReplaceValue(System.Double,System.Double,System.Boolean)">
            <summary>
            Replace grid data value by a threshold - the values bigger/smaller than the threshold value
            will be replaced by the new value
            </summary>
            <param name="aValue">threshold value</param>
            <param name="bValue">new value</param>
            <param name="bigger">bigger or smaller</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.UnStagger_X">
            <summary>
            Un stag grid data through x dimension
            </summary>
            <returns>Un stagged grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.UnStagger_Y">
            <summary>
            Un stag grid data through y dimension
            </summary>
            <returns>Un stagged grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Clone">
            <summary>
            Clone
            </summary>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ExtendToGlobal">
            <summary>
            Extend the grid data to global by add a new column data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Extend(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extend grid coordinates
            </summary>
            <param name="leftNum">Left extent number</param>
            <param name="rightNum">Right extent number</param>
            <param name="topNum">Top extent number</param>
            <param name="bottomNum">Bottom extent number</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ShiftTo180">
            <summary>
            Shift global grid data from (0 - 360 degree) to (-180 - 180 degree)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Union(MeteoInfoC.Data.GridData)">
            <summary>
            Union grid data - latter grid will overlap ahead grid, the latter undefine data will not overlap ahead data.
            All grid data should have same X/Y coordinate value
            </summary>
            <param name="gridData">grid data</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.ToOneDimData">
            <summary>
            Convert grid two dimension data to one dimension data
            </summary>
            <returns>one dimension data array</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Project(MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project grid data
            </summary>
            <param name="fromProj">from projection</param>
            <param name="toProj">to projection</param>
            <returns>projected grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.Project(MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo,System.Double[],System.Double[])">
            <summary>
            Project grid data
            </summary>
            <param name="fromProj">from projection info</param>
            <param name="toProj">to projection info</param>
            <param name="newX">new X coordinates</param>
            <param name="newY">new Y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.GassianToLatLon">
            <summary>
            Convert Gassian grid to lat/lon grid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.GridData.GassianToLatLon_Simple">
            <summary>
            Convert Gassian grid to lat/lon grid - only convert Y coordinate
            </summary>
        </member>
        <member name="T:MeteoInfoC.Data.DataMath">
            <summary>
            Data math
            </summary>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Add(System.Object,System.Object)">
            <summary>
            Take add operator of two objects
            </summary>
            <param name="a">object a</param>
            <param name="b">object b</param>
            <returns>object result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Subtract(System.Object,System.Object)">
            <summary>
            Take subtract operator of two objects
            </summary>
            <param name="a">object a</param>
            <param name="b">object b</param>
            <returns>object result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Multiple(System.Object,System.Object)">
            <summary>
            Take multiple operator of two objects
            </summary>
            <param name="a">object a</param>
            <param name="b">object b</param>
            <returns>object result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Divide(System.Object,System.Object)">
            <summary>
            Take divide operator of two objects
            </summary>
            <param name="a">object a</param>
            <param name="b">object b</param>
            <returns>object result</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Abs(MeteoInfoC.Data.GridData)">
            <summary>
            Take absolute value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Abs(MeteoInfoC.Data.StationData)">
            <summary>
            Get absolute value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Abs(System.Object)">
            <summary>
            Take abstract value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Acos(MeteoInfoC.Data.GridData)">
            <summary>
            Take anti-Cosine value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Acos(MeteoInfoC.Data.StationData)">
            <summary>
            Get anti-Cosine value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Acos(System.Object)">
            <summary>
            Take anti-Cosine value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Asin(MeteoInfoC.Data.GridData)">
            <summary>
            Take Anti-Sine value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Asin(MeteoInfoC.Data.StationData)">
            <summary>
            Get anti-Sine value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Asin(System.Object)">
            <summary>
            Take anti-Sine value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Atan(MeteoInfoC.Data.GridData)">
            <summary>
            Take Anti-Tangent value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Atan(MeteoInfoC.Data.StationData)">
            <summary>
            Get anti-Tangent value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Atan(System.Object)">
            <summary>
            Take anti-Tangent value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Cos(MeteoInfoC.Data.GridData)">
            <summary>
            Take cosine value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Cos(MeteoInfoC.Data.StationData)">
            <summary>
            Get Cosine value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Cos(System.Object)">
            <summary>
            Take Cosine value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sin(MeteoInfoC.Data.GridData)">
            <summary>
            Take sine value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sin(MeteoInfoC.Data.StationData)">
            <summary>
            Get Sine value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sin(System.Object)">
            <summary>
            Take Sine value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Tan(MeteoInfoC.Data.GridData)">
            <summary>
            Take tangent value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Tan(MeteoInfoC.Data.StationData)">
            <summary>
            Get Tangent value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Tan(System.Object)">
            <summary>
            Take Tangent value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Exp(MeteoInfoC.Data.GridData)">
            <summary>
            Take e raised specific power value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Exp(MeteoInfoC.Data.StationData)">
            <summary>
            Take e raised specific power value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Exp(System.Object)">
            <summary>
            Take Exponent value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Pow(MeteoInfoC.Data.GridData,System.Double)">
            <summary>
            Take power value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <param name="p">power value</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Pow(MeteoInfoC.Data.StationData,System.Double)">
            <summary>
            Take power value of a station data
            </summary>
            <param name="aStData">station data</param>
            <param name="p">power</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Pow(System.Object,System.Double)">
            <summary>
            Take power value
            </summary>
            <param name="a">object a</param>
            <param name="b">double b</param>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sqrt(MeteoInfoC.Data.GridData)">
            <summary>
            Take square root value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sqrt(MeteoInfoC.Data.StationData)">
            <summary>
            Take square root value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Sqrt(System.Object)">
            <summary>
            Take square root value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log(MeteoInfoC.Data.GridData)">
            <summary>
            Take natural logarithm value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log(MeteoInfoC.Data.StationData)">
            <summary>
            Take natural logarithm value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log(System.Object)">
            <summary>
            Take natural logarithm value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log10(MeteoInfoC.Data.GridData)">
            <summary>
            Take base 10 logarithm value of a grid data
            </summary>
            <param name="aGrid">a grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log10(MeteoInfoC.Data.StationData)">
            <summary>
            Take base 10 logarithm value of a station data
            </summary>
            <param name="aStData">station data</param>
            <returns>result station data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Log10(System.Object)">
            <summary>
            Take base 10 logrithm value
            </summary>
            <param name="a">object a</param>        
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Maximum(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Take maximum grid data from two grid data
            </summary>
            <param name="aGrid">grid data</param>
            <param name="bGrid">grid data</param>
            <returns>maximum grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Minimum(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Take minimum grid data from two grid data
            </summary>
            <param name="aGrid">grid data</param>
            <param name="bGrid">grid data</param>
            <returns>minimum grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Magnitude(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Take magnitude value from U/V data
            </summary>
            <param name="UData">U data</param>
            <param name="VData">V data</param>
            <returns>magnitude data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Magnitude(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Take magnitude value from U/V data
            </summary>
            <param name="UData">U data</param>
            <param name="VData">V data</param>
            <returns>magnitude data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Cdiff(MeteoInfoC.Data.GridData,System.Boolean)">
            <summary>
            Performs a centered difference operation on a grid data in the x or y direction
            </summary>
            <param name="aData">grid data</param>
            <param name="isX">if is x direction</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Hcurl(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Calculates the vertical component of the curl (ie, vorticity) 
            </summary>
            <param name="UData">U component</param>
            <param name="VData">V component</param>
            <returns>curl</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Hdivg(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Calculates the horizontal divergence using finite differencing 
            </summary>
            <param name="UData">U component</param>
            <param name="VData">V component</param>
            <returns>divergence</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Average(System.Collections.Generic.List{MeteoInfoC.Data.GridData})">
            <summary>
            Calculate average grid data from grid data list
            </summary>
            <param name="gDataList">grid data list</param>
            <returns>average grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Average(System.Collections.Generic.List{MeteoInfoC.Data.GridData},System.Boolean)">
            <summary>
            Calculate average grid data from grid data list
            </summary>
            <param name="gDataList">grid data list</param>
            <param name="ignoreUndef">if ignore undefine data</param>
            <returns>average grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Average(System.Collections.Generic.List{MeteoInfoC.Data.GridData},System.Boolean,System.Int32)">
            <summary>
            Calculate average grid data from grid data list
            </summary>
            <param name="gDataList">grid data list</param>
            <param name="ignoreUndef">if ignore undefine data</param>
            <param name="validNum">valid number</param>
            <returns>average grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Union(System.Collections.Generic.List{MeteoInfoC.Data.GridData})">
            <summary>
            Union grid data - latter grid will overlap ahead grid, the latter undefine data will not overlap ahead data.
            All grid data should have same X/Y coordinate value
            </summary>
            <param name="gDataList">grid data list</param>
            <returns>overlaped grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Gauss2Lats(System.Int32)">
            <summary>
            This function provides latitudes on a Gaussian grid from the
            number of latitude lines.
            </summary>
            <param name="nlat">the number of latitude lines</param>
            <returns>the latitudes of hemisphere</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.Gord(System.Int32,System.Double)">
            <summary>
            Calculates the value of an ordinary Legendre polynomial at a latitude
            </summary>
            <param name="n">the degree of the polynomial</param>
            <param name="x">cos(colatitude)</param>
            <returns>the value of the Legendre polynomial of degree n at  latitude asin(x)</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.GetUVFromDS(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData@,MeteoInfoC.Data.GridData@)">
            <summary>
            Get wind U/V grid data from wind direction/speed grid data
            </summary>
            <param name="windDirData">wind direction data</param>
            <param name="windSpeedData">wind speed data</param>
            <param name="uData">ref U data</param>
            <param name="vData">ref V data</param>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.GetUVFromDS(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData@,MeteoInfoC.Data.StationData@)">
            <summary>
            Get wind U/V station data from wind direction/speed station data
            </summary>
            <param name="windDirData">wind direction data</param>
            <param name="windSpeedData">wind speed data</param>
            <param name="uData">ref U data</param>
            <param name="vData">ref V data</param>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.GetDSFromUV(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData@,MeteoInfoC.Data.GridData@)">
            <summary>
            Get wind direction/speed grid data from wind U/V grid data
            </summary>
            <param name="uData">U data</param>
            <param name="vData">V data</param>
            <param name="windDirData">ref wind direction data</param>
            <param name="windSpeedData">ref wind speed data</param>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.GetDSFromUV(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData@,MeteoInfoC.Data.StationData@)">
            <summary>
            Get wind direction/speed station data from wind U/V station data
            </summary>
            <param name="uData">U data</param>
            <param name="vData">V data</param>
            <param name="windDirData">ref wind direciton data</param>
            <param name="windSpeedData">ref wind speed data</param>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.leastSquareTrend(System.Double[],System.Double[])">
            <summary>
            Determine the least square trend equation - linear fitting
            </summary>
            <param name="xData"> X data array</param>
            <param name="yData">Y data array</param>
            <returns>array - y intercept and slope</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.leastSquareTrend(System.Collections.Generic.List{MeteoInfoC.Data.GridData},System.Double[])">
            <summary>
            Determine the least square trend equation - linear fitting
            </summary>
            <param name="dataList">Grid data list</param>
            <param name="xData">X data array</param>
            <returns>Result grid data - slop</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.mann_Kendall_Trend(System.Double[])">
            <summary>
            Mann-Kendall trend statistics
            </summary>
            <param name="ts">Input data array</param>
            <returns>Result array - z (trend)/beta (change value per unit time)</returns>
        </member>
        <member name="M:MeteoInfoC.Data.DataMath.mann_Kendall_Trend_1(System.Double[])">
            <summary>
            Mann-Kendall trend statistics
            </summary>
            <param name="ts">Input data array</param>
            <returns>Result array - z (trend)/beta (change value per unit time)</returns>
        </member>
        <member name="T:MeteoInfoC.Drawing.MarkerType">
            <summary>
            Marker type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.MarkerType.Simple">
            <summary>
            Simple
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.MarkerType.Character">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.MarkerType.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="T:MeteoInfoC.Drawing.ContourDraw">
            <summary>
            Contour draw
            </summary>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.GetHasUndefineData(System.Double[0:,0:],System.Double)">
            <summary>
            Get if has undefine data
            </summary>
            <param name="S">data array</param>
            <param name="undefine">undefine data</param>        
            <returns>if has undefine data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.GetHasUndefineData(MeteoInfoC.Data.GridData)">
            <summary>
            Get if has undefine data
            </summary>
            <param name="gridData">grid data</param>          
            <returns>if has undefine data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.GetMaxMinValue(System.Double[0:,0:],System.Double,System.Double@,System.Double@)">
            <summary>
            Get maximum and miminum value from grid data
            </summary>
            <param name="S"></param>
            <param name="noData"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.GetMaxMinValueFDiscreteData(System.Double[0:,0:],System.Double,System.Double@,System.Double@)">
            <summary>
            Get maximum and minimum value from discrete data
            </summary>
            <param name="S"></param>
            <param name="noData"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.CreateGridXY(MeteoInfoC.Data.MeteoData.GridDataSetting,System.Double[]@,System.Double[]@)">
            <summary>
            Create grid X/y coordinate from discrete data
            </summary>
            <param name="aGDP"></param>
            <param name="X"></param>
            <param name="Y"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.FilterDiscreteData_Radius(System.Double[0:,0:],System.Double,MeteoInfoC.Global.Extent,System.Double)">
            <summary>
            Filter discrete data with radius
            </summary>
            <param name="S"></param>
            <param name="radius"></param>
            <param name="aExtent"></param>
            <param name="unDef"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.InterpolateDiscreteData_Neighbor(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double)">
            <summary>
            Interpolate discrete data by IDW neighous method
            </summary>
            <param name="S">discrete data</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>
            <param name="pNum">minimum point number</param>
            <param name="unDefData">Undefine data</param>
            <returns>grid array</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.InterpolateDiscreteData_Radius(System.Double[0:,0:],System.Double[],System.Double[],System.Int32,System.Double,System.Double)">
            <summary>
            Interpolate discrete data by IDW radius method
            </summary>
            <param name="S">discrete data</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>
            <param name="minPNum">mininum point number</param>
            <param name="radius">radius</param>
            <param name="unDefData">undefine data</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.InterpolateDiscreteData_Cressman(System.Double[0:,0:],System.Double[],System.Double[],System.Double,System.Collections.Generic.List{System.Double})">
            <summary>
            Interpolate discrete data by cressman method
            </summary>
            <param name="S">discrete data</param>
            <param name="X">X array</param>
            <param name="Y">Y array</param>               
            <param name="unDefData">undefine data</param>
            <param name="radList">radius list</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.AssignPointToGrid(System.Double[0:,0:],System.Double[],System.Double[],System.Double)">
            <summary>
            Interpolate discrete data to Grid data
            </summary>
            <param name="S">discrete data</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <param name="unDefData">undefined value</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.Interpolate_Grid(MeteoInfoC.Data.GridData)">
            <summary>
            Interpolate grid data
            </summary>
            <param name="aGridData">origin grid data</param>
            <returns>result grid data</returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.TracingContourLines(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],System.Double,System.Collections.Generic.List{wContour.Border}@)">
            <summary>
            Tracing contour lines with undefine data
            </summary>
            <param name="gridData"></param>
            <param name="cValues"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="noData"></param>
            <param name="borders"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.ContourDraw.TracingPolygons(System.Double[0:,0:],System.Collections.Generic.List{wContour.PolyLine},System.Collections.Generic.List{wContour.Border},System.Double[],System.Double[],System.Double[])">
            <summary>
            Tracing shaded polygons with undefine data
            </summary>
            <param name="gridData"></param>
            <param name="contourLines"></param>
            <param name="borders"></param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="cValues"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Drawing.Draw">
            <summary>
            Draw symbols
            </summary>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawArraw(System.Drawing.Color,System.Drawing.PointF,MeteoInfoC.Shape.WindArraw,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw wind arraw
            </summary>
            <param name="aColor"></param>
            <param name="sP"></param>
            <param name="aArraw"></param>
            <param name="g"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.CalArraw(System.Double,System.Double,System.Double,System.Single,MeteoInfoC.PointD)">
            <summary>
            Calculate wind arraw
            </summary>
            <param name="U"></param>
            <param name="V"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="sPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.CalWindBarb(System.Single,System.Single,System.Double,System.Single,MeteoInfoC.PointD)">
            <summary>
            Create wind barb from wind direction/speed
            </summary>
            <param name="windDir"></param>
            <param name="windSpeed"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="sPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.CalWindBarbUV(System.Double,System.Double,System.Double,System.Single,MeteoInfoC.PointD)">
            <summary>
            Create wind barb from U/V
            </summary>
            <param name="U"></param>
            <param name="V"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="sPoint"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawWindBarb(System.Drawing.Color,System.Drawing.PointF,MeteoInfoC.Shape.WindBarb,System.Drawing.Graphics,System.Single)">
            <summary>
            Draw wind barb
            </summary>
            <param name="aColor"></param>
            <param name="sP"></param>
            <param name="aWB"></param>
            <param name="g"></param>
            <param name="size"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawWindBarb(System.Drawing.Color,System.Drawing.PointF,MeteoInfoC.Shape.WindBarb,System.Drawing.Graphics,System.Single,System.Single)">
            <summary>
            Draw wind barb and cut the beginning
            </summary>
            <param name="aColor"></param>
            <param name="sP"></param>
            <param name="aWB"></param>
            <param name="g"></param>
            <param name="size"></param>
            <param name="cut"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.CalWeatherSymbol(System.Double,System.Int32,MeteoInfoC.PointD)">
            <summary>
            Create weather symbol
            </summary>
            <param name="value"></param>
            <param name="weather"></param>
            <param name="sP"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawWeatherSymbol(System.Drawing.Color,System.Drawing.PointF,MeteoInfoC.Shape.WeatherSymbol,System.Drawing.Graphics,System.Single)">
            <summary>
            Draw weather symbol
            </summary>
            <param name="aColor"></param>
            <param name="sP"></param>
            <param name="aWS"></param>
            <param name="g"></param>
            <param name="size"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.CalStationModel(System.Single,System.Single,System.Double,System.Single,MeteoInfoC.PointD,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create statioin model symbol
            </summary>
            <param name="windDir"></param>
            <param name="windSpeed"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="sPoint"></param>
            <param name="weather"></param>
            <param name="temp"></param>
            <param name="dewPoint"></param>
            <param name="pressure"></param>
            <param name="cloudCover"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawStationModel(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF,MeteoInfoC.Shape.StationModelShape,System.Drawing.Graphics,System.Single,System.Single)">
            <summary>
            Draw station model symbol
            </summary>
            <param name="aColor"></param>
            <param name="foreColor"></param>
            <param name="sP"></param>
            <param name="aSM"></param>
            <param name="g"></param>
            <param name="size"></param>
            <param name="cut"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPoint(MeteoInfoC.Drawing.PointStyle,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean,System.Boolean,System.Drawing.Graphics)">
            <summary>
            Draw point
            </summary>
            <param name="aPS"></param>
            <param name="aP"></param>
            <param name="color"></param>
            <param name="outlineColor"></param>
            <param name="aSize"></param>
            <param name="drawOutline"></param>
            <param name="drawFill"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPoint(System.Drawing.PointF,MeteoInfoC.Legend.PointBreak,System.Drawing.Graphics)">
            <summary>
            Draw point
            </summary>       
            <param name="aP"></param>
            <param name="aPB"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPoint_Simple(System.Drawing.PointF,MeteoInfoC.Legend.PointBreak,System.Drawing.Graphics)">
            <summary>
            Draw point
            </summary>       
            <param name="aP">Point position</param>
            <param name="aPB">Point break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawLabelPoint(System.Drawing.PointF,MeteoInfoC.Legend.LabelBreak,System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            Draw label point
            </summary>
            <param name="aPoint">screen point</param>
            <param name="aLB">label break</param>        
            <param name="g">graphics</param>
            <param name="rect">ref extent rectangle</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawChartPoint(System.Drawing.PointF,MeteoInfoC.Legend.ChartBreak,System.Drawing.Graphics)">
            <summary>
            Draw chart point
            </summary>
            <param name="aPoint">screen point</param>
            <param name="aCB">chart break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawBarChartSymbol(System.Drawing.PointF,MeteoInfoC.Legend.ChartBreak,System.Drawing.Graphics)">
            <summary>
            Draw bar chart symbol
            </summary>
            <param name="aPoint">start point</param>
            <param name="aCB">chart break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawBarChartSymbol(System.Drawing.PointF,MeteoInfoC.Legend.ChartBreak,System.Drawing.Graphics,System.Boolean,System.Drawing.Font)">
            <summary>
            Draw bar chart symbol
            </summary>
            <param name="aPoint">start point</param>
            <param name="aCB">chart break</param>
            <param name="g">graphics</param>
            <param name="drawValue">If draw value</param>
            <param name="font">Value font</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPieChartSymbol(System.Drawing.PointF,MeteoInfoC.Legend.ChartBreak,System.Drawing.Graphics)">
            <summary>
            Draw pie chart symbol
            </summary>
            <param name="aPoint">start point</param>
            <param name="aCB">chart break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolyLineSymbol(System.Drawing.Drawing2D.DashStyle,System.Drawing.PointF,System.Drawing.Color,System.Single,System.Single,System.Single,System.Drawing.Graphics)">
            <summary>
            Draw polyline symbol
            </summary>
            <param name="aDS"></param>
            <param name="aP"></param>
            <param name="aColor"></param>
            <param name="aSize"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolyLineSymbol(System.Drawing.PointF,System.Single,System.Single,MeteoInfoC.Legend.PolyLineBreak,System.Drawing.Graphics)">
            <summary>
            Draw polyline symbol
            </summary>
            <param name="aP"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="aPLB"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolygonSymbol(System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Drawing.Graphics)">
            <summary>
            draw polygon symbol
            </summary>
            <param name="aP"></param>
            <param name="aColor"></param>
            <param name="outlineColor"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="drawFill"></param>
            <param name="drawOutline"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolygonSymbol(System.Drawing.PointF,System.Single,System.Single,MeteoInfoC.Legend.PolygonBreak,System.Int32,System.Drawing.Graphics)">
            <summary>
            Draw polygon symbol
            </summary>
            <param name="aP">start point</param>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="aPGB">polygon break</param>
            <param name="transparencyPerc">transparency percent</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolygon(System.Drawing.PointF[],System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Boolean,System.Boolean,System.Drawing.Graphics)">
            <summary>
            draw polygon
            </summary>
            <param name="points"></param>
            <param name="aColor"></param>
            <param name="outlineColor"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="drawFill"></param>
            <param name="drawOutline"></param>
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolygon(System.Drawing.PointF[],MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw polygon
            </summary>
            <param name="points"></param>        
            <param name="aPGB"></param>        
            <param name="g"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawCircle(System.Drawing.PointF[],MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw circle
            </summary>
            <param name="points">points</param>
            <param name="aPGB">polygon break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawEllipse(System.Drawing.PointF[],MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw ellipse
            </summary>
            <param name="points">points</param>
            <param name="aPGB">polygon break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawRectangle(System.Drawing.PointF,System.Single,System.Single,MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw rectangle
            </summary>
            <param name="aPoint">start point</param>  
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="aPGB">polygon break</param>        
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPie(System.Drawing.PointF,System.Single,System.Single,System.Single,System.Single,MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw pie
            </summary>
            <param name="aPoint">start point</param>  
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="startAngle">start angle</param>
            <param name="sweepAngle">sweep angle</param>
            <param name="aPGB">polygon break</param>        
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawPolyline(System.Drawing.PointF[],MeteoInfoC.Legend.PolyLineBreak,System.Drawing.Graphics)">
            <summary>
            Draw polyline
            </summary>
            <param name="points">points</param>
            <param name="aPLB">polyline break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawCurveLine(System.Drawing.PointF[],MeteoInfoC.Legend.PolyLineBreak,System.Drawing.Graphics)">
            <summary>
            Draw Curve line
            </summary>
            <param name="points">points</param>
            <param name="aPLB">polyline break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawCurvePolygon(System.Drawing.PointF[],MeteoInfoC.Legend.PolygonBreak,System.Drawing.Graphics)">
            <summary>
            Draw Curve polygon
            </summary>
            <param name="points">points</param>
            <param name="aPGB">polygon break</param>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.GetMaxMinWindSpeed(System.Collections.Generic.List{MeteoInfoC.Shape.WindArraw},System.Single@,System.Single@)">
            <summary>
            Get maximum and minimum wind speed from wind arraw list
            </summary>
            <param name="arrawList"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawGrahpic(System.Drawing.PointF[],MeteoInfoC.Shape.Graphic,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draw graphic
            </summary>
            <param name="points">points</param>
            <param name="aGraphic">graphic</param>
            <param name="g">graphics</param>
            <param name="isEditingVertice">is editing vertice</param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawSelectedCorners(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw selected four corner rectangles
            </summary>
            <param name="g"></param>
            <param name="gRect"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawSelectedEdgeCenters(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw selected four bouder edge center rectangles
            </summary>
            <param name="g"></param>
            <param name="gRect"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawSelectedVertices(System.Drawing.Graphics,System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Draw selected vertices rectangles
            </summary>
            <param name="g"></param>
            <param name="points"></param>
        </member>
        <member name="M:MeteoInfoC.Drawing.Draw.DrawSelectedVertices(System.Drawing.Graphics,System.Drawing.PointF[])">
            <summary>
            Draw selected vertices rectangles
            </summary>
            <param name="g"></param>
            <param name="points"></param>
        </member>
        <member name="T:MeteoInfoC.Drawing.PointStyle">
            <summary>
            Point style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.UpTriangle">
            <summary>
            Up triangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.DownTriangle">
            <summary>
            Down triangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Diamond">
            <summary>
            Diamond
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.XCross">
            <summary>
            X cross
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Plus">
            <summary>
            Plus
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Star">
            <summary>
            Star
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.StarLines">
            <summary>
            Star lines
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.Pentagon">
            <summary>
            Pentagon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.UpSemiCircle">
            <summary>
            Up semi circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Drawing.PointStyle.DownSemiCircle">
            <summary>
            Down semi circle
            </summary>
        </member>
        <member name="T:MeteoInfoC.Geoprocess.BorderPoint">
            <summary>
            Border point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.BorderPoint.Id">
            <summary>
            Identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.BorderPoint.BorderIdx">
            <summary>
            Border index
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.BorderPoint.BInnerIdx">
            <summary>
            Border inner index
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.BorderPoint.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.BorderPoint.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:MeteoInfoC.Geoprocess.ClipLine">
            <summary>
            Clip line
            </summary>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.ClipLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Geoprocess.ClipLine.Value">
            <summary>
            Get or set line value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Geoprocess.ClipLine.IsLon">
            <summary>
            Get or set if is longitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Geoprocess.ClipLine.IsLeftOrTop">
            <summary>
            Get or set if is left (longitude) or top (latitude)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.ClipLine.IsInside(MeteoInfoC.PointD)">
            <summary>
            Determine if a point is inside
            </summary>
            <param name="aPoint">a point</param>
            <returns>if is inside</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.ClipLine.IsExtentCross(MeteoInfoC.Global.Extent)">
            <summary>
            Determine if an extent is cross
            </summary>
            <param name="aExtent">an extent</param>
            <returns>Is extent cross</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.ClipLine.IsExtentInside(MeteoInfoC.Global.Extent)">
            <summary>
            Determine if an extent is inside
            </summary>
            <param name="aExtent">an extent</param>
            <returns>Is extent inside</returns>
        </member>
        <member name="T:MeteoInfoC.Geoprocess.GeoComputation">
            <summary>
            Computational geometry
            </summary>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.IsClockwise(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Determine if a point list is clockwise
            </summary>
            <param name="pointList">point list</param>
            <returns>is or not clockwise</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.IsClockwise(System.Collections.Generic.List{MeteoInfoC.Shape.PointM})">
            <summary>
            Determine if a point list is clockwise
            </summary>
            <param name="pointList">point list</param>
            <returns>is or not clockwise</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.IsClockwise(MeteoInfoC.PointD[])">
            <summary>
            Determine if a point array is clockwise
            </summary>
            <param name="points">point array</param>
            <returns>is or not clockwise</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointInPolygon(System.Collections.Generic.List{MeteoInfoC.PointD},MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="poly">polygon border</param>
            <param name="aPoint">point</param>
            <returns>If the point is in the polygon</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointInPolygon(MeteoInfoC.Shape.Polygon,MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="aPolygon">polygon</param>
            <param name="aPoint">point</param>
            <returns>is in</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointInPolygon(MeteoInfoC.Shape.PolygonShape,MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="aPolygon">polygon</param>
            <param name="aPoint">point</param>
            <returns>is in</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointInPolygons(System.Collections.Generic.List{MeteoInfoC.Shape.PolygonShape},MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in polygons
            </summary>
            <param name="polygons">polygons</param>
            <param name="aPoint">point</param>
            <returns>is in</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointInPolygonLayer(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.PointD,System.Boolean)">
            <summary>
            Judge if a point is in a polygonLayer
            </summary>
            <param name="aLayer">a polygon layer</param>
            <param name="aPoint">a point</param>
            <param name="onlySel">if only use selected shapes</param>
            <returns>is in</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.dis_PointToLine(MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD)">
            <summary>
            Calculate the distance between point and a line segment
            </summary>
            <param name="point">The point</param>
            <param name="pt1">End point of the line segment</param>
            <param name="pt2">End point of the line segment</param>
            <returns>Distance</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.distance(MeteoInfoC.PointD,MeteoInfoC.PointD)">
            <summary>
            Get distance between two point
            </summary>
            <param name="pt1">Point one</param>
            <param name="pt2">Point two</param>
            <returns>Distance</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.SelectPolylineShape(MeteoInfoC.PointD,MeteoInfoC.Shape.PolylineShape,System.Double)">
            <summary>
            Select polyline shape by a point 
            </summary>
            <param name="sp">The point</param>
            <param name="aPLS">The polyline shape</param>
            <param name="buffer">Buffer</param>
            <returns>Is the polyline shape selected</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipLayer(MeteoInfoC.Layer.VectorLayer,System.Object)">
            <summary>
            Clip a layer
            </summary>
            <param name="oLayer">a layer</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped layer</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipShape(MeteoInfoC.Shape.Shape,System.Object)">
            <summary>
            Clip a shape
            </summary>
            <param name="aShape">a shape</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPointShape(MeteoInfoC.Shape.PointShape,System.Object)">
            <summary>
            Clip point shape with a clipping object
            </summary>
            <param name="aPS">point shape</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped point shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolygonShape(MeteoInfoC.Shape.PolygonShape,System.Object)">
            <summary>
            Clip polygon shape with a clipping object
            </summary>
            <param name="aPGS">polygon shape</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolygonShape_Lon(MeteoInfoC.Shape.PolygonShape,System.Double)">
            <summary>
            Clip polygon shape with a longitude
            </summary>
            <param name="aPGS">polygon shape</param>
            <param name="lon">longitude</param>
            <returns>clipped polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolygonShape_Lat(MeteoInfoC.Shape.PolygonShape,System.Double)">
            <summary>
            Clip polygon shape with a latitude
            </summary>
            <param name="aPGS">polygon shape</param>
            <param name="lat">latitude</param>
            <returns>clipped polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolygonShape_Lat(MeteoInfoC.Shape.PolygonShape,System.Double,System.Boolean)">
            <summary>
            Clip polygon shape with a latitude
            </summary>
            <param name="aPGS">polygon shape</param>
            <param name="lat">latitude</param>
            <param name="isTop">if is top</param>
            <returns>clipped polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolylineShape(MeteoInfoC.Shape.PolylineShape,System.Object)">
            <summary>
            Clip polyline shape with a clipping object
            </summary>
            <param name="aPLS">polyline shape</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped polyline shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolylineShape_Lon(MeteoInfoC.Shape.PolylineShape,System.Double)">
            <summary>
            Clip polyline shape with a longitude
            </summary>
            <param name="aPLS">polyline shape</param>
            <param name="lon">longitude</param>
            <returns>clipped polyline shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolylineShape_Lat(MeteoInfoC.Shape.PolylineShape,System.Double)">
            <summary>
            Clip polyline shape with a longitude
            </summary>
            <param name="aPLS">polyline shape</param>
            <param name="lat">latitude</param>
            <returns>clipped polyline shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolylineShape_Lat(MeteoInfoC.Shape.PolylineShape,System.Double,System.Boolean)">
            <summary>
            Clip polyline shape with a longitude
            </summary>
            <param name="aPLS">polyline shape</param>
            <param name="lat">latitude</param>
            <param name="isTop">if is top</param>
            <returns>clipped polyline shape</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetGridLabels(MeteoInfoC.Shape.PolyLine,MeteoInfoC.Global.Extent,System.Boolean)">
            <summary>
            Get grid labels of a polyline
            </summary>
            <param name="inPolyLine">polyline</param>
            <param name="clipExtent">clipping object</param>
            <param name="isVertical">if is vertical</param>
            <returns>clip points</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetGridLabels_StraightLine(MeteoInfoC.Shape.PolyLine,MeteoInfoC.Global.Extent,System.Boolean)">
            <summary>
            Get grid labels of a straight line
            </summary>
            <param name="inPolyLine">polyline</param>
            <param name="clipExtent">clipping object</param>
            <param name="isVertical">if is vertical</param>
            <returns>clip points</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolygons(System.Collections.Generic.List{MeteoInfoC.Shape.Polygon},System.Object)">
            <summary>
            Clip polygons with a clipping object
            </summary>
            <param name="polygons">polygon list</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped polygons</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.ClipPolyLines(System.Collections.Generic.List{MeteoInfoC.Shape.PolyLine},System.Object)">
            <summary>
            Clip polylines with a clipping object
            </summary>
            <param name="polyLines">polyline list</param>
            <param name="clipObj">clipping object</param>
            <returns>clipped polylines</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.CrossProduct(MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD)">
            <summary>
            Cross product
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <param name="p3">Point 3</param>
            <returns>Cross produt result</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.PointProduct(MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD)">
            <summary>
            Point product
            </summary>
            <param name="p1">Point 1</param>
            <param name="p2">Point 2</param>
            <param name="p3">Point 3</param>
            <returns>Point produt result</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get distance between two points on the earth
            </summary>
            <param name="lat1">latitude of point 1</param>
            <param name="lon1">longitude of point 1</param>
            <param name="lat2">latitude of point 2</param>
            <param name="lon2">longitude of point 2</param>
            <returns>distance - km</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetDistance(System.Collections.Generic.List{MeteoInfoC.PointD},System.Boolean)">
            <summary>
            Get distance
            </summary>
            <param name="points">point list</param>
            <param name="isLonLat">if is lon_lat</param>
            <returns>distance</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetArea(System.Collections.Generic.List{MeteoInfoC.PointD},System.Boolean)">
            <summary>
            Get polygon area on earth surface
            </summary>
            <param name="points">point list</param>
            <param name="isLonLat">if is lon/lat</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetArea(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Get polygon area on earth surface
            </summary>
            <param name="points">point list</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.GetArea(System.Collections.Generic.List{MeteoInfoC.Shape.PointM})">
            <summary>
            Get polygon area on earth surface
            </summary>
            <param name="points">point list</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.CalArea(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Get polygon area on earth surface
            </summary>
            <param name="points">point list</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.SphericalPolygonArea(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Compute the Area of a Spherical Polygon
            </summary>
            <param name="points">lon/lat point list</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.SphericalPolygonArea(System.Collections.Generic.List{MeteoInfoC.Shape.PointM})">
            <summary>
            Compute the Area of a Spherical Polygon
            </summary>
            <param name="points">lon/lat point list</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.SphericalPolygonArea(System.Collections.Generic.List{MeteoInfoC.PointD},System.Double)">
            <summary>
            Compute the Area of a Spherical Polygon
            </summary>
            <param name="points">lon/lat point list</param>
            <param name="r">shperical radius</param>
            <returns>area</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.Haversine(System.Double)">
            <summary>
            Haversine function : hav(x) = (1-cos(x))/2
            </summary>
            <param name="x"></param>
            <returns>Returns the value of Haversine function</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.GeoComputation.SphericalPolygonArea(System.Double[],System.Double[],System.Double)">
            <summary>
            Compute the Area of a Spherical Polygon
            </summary>
            <param name="lat">the latitudes of all vertices(in radian)</param>
            <param name="lon">the longitudes of all vertices(in radian)</param>
            <param name="r">spherical radius</param>
            <returns>Returns the area of a spherical polygon</returns>
        </member>
        <member name="T:MeteoInfoC.Geoprocess.SpatialQueryTypes">
            <summary>
            Spatial query type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.SpatialQueryTypes.Within">
            <summary>
            One feature is within another one
            </summary>
        </member>
        <member name="F:MeteoInfoC.Geoprocess.SpatialQueryTypes.Contain">
            <summary>
            One feature contain another one
            </summary>
        </member>
        <member name="T:MeteoInfoC.Geoprocess.Spline">
            <summary>
            Spline class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.Spline.InterpolateBezier(MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD,System.Int32)">
            <summary>
            '贝塞尔'内插。结果不包括头尾点
            </summary>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.Spline.InterpolateCardinalSpline(MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD,MeteoInfoC.PointD,System.Int32)">
            <summary>
            Interpolate Cardinal Spline
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.Spline.CardinalSpline(MeteoInfoC.PointD[],System.Int32)">
            <summary>
            '基数样条'内插法。 points为通过点，samplesInSegment为两个样本点之间的内插数量。
            </summary>
            <param name="points">points</param>
            <param name="samplesInSegment">samples in segment</param>
            <returns>result points</returns>
        </member>
        <member name="M:MeteoInfoC.Geoprocess.Spline.CardinalSpline(System.Collections.Generic.List{MeteoInfoC.PointD},System.Double,System.Boolean)">
            <summary>
            Cardinal spline calculation
            </summary>
            <param name="pts">point list</param>
            <param name="t">tension</param>
            <param name="closed">is closed</param>
            <returns>result points</returns>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.AdobeColors">
            <summary>
            Summary description for AdobeColors.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.SetBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute brightness of a colour 
            </summary> 
            <param name="c">Original colour</param> 
            <param name="brightness">The luminance level to impose</param> 
            <returns>an adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.ModifyBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing brightness level 
            </summary> 
            <remarks> 
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="brightness">The luminance delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.SetSaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute saturation level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Saturation">The saturation value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.ModifySaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Saturation level 
            </summary> 
            <remarks> 
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Saturation">The saturation delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.SetHue(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute Hue level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Hue">The Hue value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.ModifyHue(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Hue level 
            </summary> 
            <remarks> 
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Hue">The Hue delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.HSL_to_RGB(MeteoInfoC.Global.Colors.AdobeColors.HSL)">
            <summary> 
            Converts a colour from HSL to RGB 
            </summary> 
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks> 
            <param name="hsl">The HSL value</param> 
            <returns>A Color structure containing the equivalent RGB values</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.RGB_to_HSL(System.Drawing.Color)">
            <summary> 
            Converts RGB to HSL 
            </summary> 
            <remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks> 
            <param name="c">A Color to convert</param> 
            <returns>An HSL value</returns> 
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.RGB_to_CMYK(System.Drawing.Color)">
            <summary>
            Converts RGB to CMYK
            </summary>
            <param name="c">A color to convert.</param>
            <returns>A CMYK object</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.CMYK_to_RGB(MeteoInfoC.Global.Colors.AdobeColors.CMYK)">
            <summary>
            Converts CMYK to RGB
            </summary>
            <param name="_cmyk">A color to convert</param>
            <returns>A Color object</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.Round(System.Double)">
            <summary>
            Custom rounding function.
            </summary>
            <param name="val">Value to round</param>
            <returns>Rounded value</returns>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.AdobeColors.HSL">
            <summary>
            HSL class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.HSL.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.HSL.H">
            <summary>
            Get or set H
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.HSL.S">
            <summary>
            Get or set S
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.HSL.L">
            <summary>
            Get or set L
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.AdobeColors.CMYK">
            <summary>
            CMYK class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.AdobeColors.CMYK.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.CMYK.C">
            <summary>
            Get or set C
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.CMYK.M">
            <summary>
            Get or set M
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.CMYK.Y">
            <summary>
            Get or set Y
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.AdobeColors.CMYK.K">
            <summary>
            Get or set K
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.ctrl2DColorBox">
            <summary>
            Summary description for ctrl2DColorBox.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle">
            <summary>
            eDraw 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Hue">
            <summary>
            Hue
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Saturation">
            <summary>
            Saturation
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Brightness">
            <summary>
            Brightness
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.eDrawStyle.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrl2DColorBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Global.Colors.ctrl2DColorBox.Scroll">
            <summary>
            Scroll event
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrl2DColorBox.DrawStyle">
            <summary>
            The drawstyle of the contol (Hue, Saturation, Brightness, Red, Green or Blue)
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrl2DColorBox.HSL">
            <summary>
            The HSL color of the control, changing the HSL will automatically change the RGB color for the control.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrl2DColorBox.RGB">
            <summary>
            The RGB color of the control, changing the RGB will automatically change the HSL color for the control.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.ClearMarker">
            <summary>
            Redraws only the content over the marker
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.DrawMarker(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws the marker (circle) inside the box
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="Unconditional"></param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.DrawBorder">
            <summary>
            Draws the border around the control.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.DrawContent">
            <summary>
            Evaluates the DrawStyle of the control and calls the appropriate
            drawing function for content
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Hue">
            <summary>
            Draws the content of the control filling in all color values with the provided Hue value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Saturation">
            <summary>
            Draws the content of the control filling in all color values with the provided Saturation value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Luminance">
            <summary>
            Draws the content of the control filling in all color values with the provided Luminance or Brightness value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Red">
            <summary>
            Draws the content of the control filling in all color values with the provided Red value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Green">
            <summary>
            Draws the content of the control filling in all color values with the provided Green value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Draw_Style_Blue">
            <summary>
            Draws the content of the control filling in all color values with the provided Blue value.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Redraw_Control">
            <summary>
            Calls all the functions neccessary to redraw the entire control.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Reset_Marker(System.Boolean)">
            <summary>
            Resets the marker position of the slider to match the controls color.  Gives the option of redrawing the slider.
            </summary>
            <param name="Redraw">Set to true if you want the function to redraw the slider after determining the best position</param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.ResetHSLRGB">
            <summary>
            Resets the controls color (both HSL and RGB variables) based on the current marker position
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.Round(System.Double)">
            <summary>
            Kindof self explanitory, I really need to look up the .NET function that does this.
            </summary>
            <param name="val">double value to be rounded to an integer</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrl2DColorBox.GetColor(System.Int32,System.Int32)">
            <summary>
            Returns the graphed color at the x,y position on the control
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.EventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider">
            <summary>
            A vertical slider control that shows a range for a color property (a.k.a. Hue, Saturation, Brightness,
            Red, Green, Blue) and sends an event when the slider is changed.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle">
            <summary>
            eDrawStyle enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Hue">
            <summary>
            Hue
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Saturation">
            <summary>
            Saturation
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Brightness">
            <summary>
            Brightness
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.eDrawStyle.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Scroll">
            <summary>
            
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.DrawStyle">
            <summary>
            The drawstyle of the contol (Hue, Saturation, Brightness, Red, Green or Blue)
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.HSL">
            <summary>
            The HSL color of the control, changing the HSL will automatically change the RGB color for the control.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.RGB">
            <summary>
            The RGB color of the control, changing the RGB will automatically change the HSL color for the control.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.ClearSlider">
            <summary>
            Redraws the background over the slider area on both sides of the control
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.DrawSlider(System.Int32,System.Boolean)">
            <summary>
            Draws the slider arrows on both sides of the control.
            </summary>
            <param name="position">position value of the slider, lowest being at the bottom.  The range
            is between 0 and the controls height-9.  The values will be adjusted if too large/small</param>
            <param name="Unconditional">If Unconditional is true, the slider is drawn, otherwise some logic 
            is performed to determine is drawing is really neccessary.</param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.DrawBorder">
            <summary>
            Draws the border around the control, in this case the border around the content area between
            the slider arrows.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.DrawContent">
            <summary>
            Evaluates the DrawStyle of the control and calls the appropriate
            drawing function for content
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Hue">
            <summary>
            Fills in the content of the control showing all values of Hue (from 0 to 360)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Saturation">
            <summary>
            Fills in the content of the control showing all values of Saturation (0 to 100%) for the given
            Hue and Luminance.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Luminance">
            <summary>
            Fills in the content of the control showing all values of Luminance (0 to 100%) for the given
            Hue and Saturation.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Red">
            <summary>
            Fills in the content of the control showing all values of Red (0 to 255) for the given
            Green and Blue.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Green">
            <summary>
            Fills in the content of the control showing all values of Green (0 to 255) for the given
            Red and Blue.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Draw_Style_Blue">
            <summary>
            Fills in the content of the control showing all values of Blue (0 to 255) for the given
            Red and Green.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Redraw_Control">
            <summary>
            Calls all the functions neccessary to redraw the entire control.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Reset_Slider(System.Boolean)">
            <summary>
            Resets the vertical position of the slider to match the controls color.  Gives the option of redrawing the slider.
            </summary>
            <param name="Redraw">Set to true if you want the function to redraw the slider after determining the best position</param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.ResetHSLRGB">
            <summary>
            Resets the controls color (both HSL and RGB variables) based on the current slider position
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.ctrlVerticalColorSlider.Round(System.Double)">
            <summary>
            Kindof self explanitory, I really need to look up the .NET function that does this.
            </summary>
            <param name="val">double value to be rounded to an integer</param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.frmColorPicker">
            <summary>
            Summary description for frmColorPicker.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle">
            <summary>
            eDrawStyle enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Hue">
            <summary>
            Hue
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Saturation">
            <summary>
            Saturation
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Brightness">
            <summary>
            Brightness
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.eDrawStyle.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Colors.frmColorPicker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.frmColorPicker.#ctor(System.Drawing.Color)">
            <summary>
            Constructor
            </summary>
            <param name="starting_color"></param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.frmColorPicker.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MeteoInfoC.Global.Colors.frmColorPicker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.frmColorPicker.PrimaryColor">
            <summary>
            Get or set primary color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Colors.frmColorPicker.DrawStyle">
            <summary>
            Get or set draw style
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.DataConvert">
            <summary>
            Data convert static class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.DataConvert.ToDouble(System.DateTime)">
            <summary>
            DateTime to double
            </summary>
            <param name="time">The DateTime</param>
            <returns>Double value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.DataConvert.ToDateTime(System.Double)">
            <summary>
            Double to DateTime
            </summary>
            <param name="value">The double value</param>
            <returns>DateTime value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.DataConvert.ToOADate(System.Double)">
            <summary>
            Double to OADate
            </summary>
            <param name="value">The double value</param>
            <returns>OADate</returns>
        </member>
        <member name="T:MeteoInfoC.Global.Direction">
            <summary>
            Direction enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Direction.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Direction.Weast">
            <summary>
            West
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Direction.North">
            <summary>
            North
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Direction.South">
            <summary>
            South
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Images.ImageUtil">
            <summary>
            Image util
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Images.ImageUtil.RotateImage(System.Drawing.Bitmap,System.Single,System.Drawing.Color)">
            <summary>
            Rotate image
            </summary>
            <param name="bmp">The original image</param>
            <param name="angle">Rotate angle</param>
            <param name="bkColor">Back color</param>
            <returns>Rotated image</returns>
        </member>
        <member name="T:MeteoInfoC.Global.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.InitialQuantizePixel(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.QuantizePixel(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.AddColor(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.TrackPrevious(MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.GetPaletteIndex(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,MeteoInfoC.Global.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.AddColor(MeteoInfoC.Global.Quantizer.Color32*,System.Int32,System.Int32,MeteoInfoC.Global.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="P:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(MeteoInfoC.Global.Quantizer.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode.Increment(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.PaletteQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Construct the palette quantizer
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:MeteoInfoC.Global.PaletteQuantizer.QuantizePixel(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:MeteoInfoC.Global.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.PaletteQuantizer._colors">
            <summary>
            List of all colors in the palette
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.InitialQuantizePixel(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.QuantizePixel(MeteoInfoC.Global.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.ColorUtils">
            <summary>
            RGB HSL color conversion class
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.ColorUtils.HSL">
            <summary>
            HSL class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSL.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="l">Luminance</param>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSL.H">
            <summary>
            Get or set Hue
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSL.S">
            <summary>
            Get or set Saturation
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSL.L">
            <summary>
            Get or set Luminance
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.ColorUtils.HSV">
            <summary>
            HSV class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSV.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="v">Value</param>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSV.H">
            <summary>
            Get or set Hue
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSV.S">
            <summary>
            Get or set Saturation
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.ColorUtils.HSV.V">
            <summary>
            Get or set Value
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.SetBrightness(System.Drawing.Color,System.Double)">
            <summary>
            Sets the absolute brightness of a colour
            </summary>
            <param name="c">Original colour</param>
            <param name="brightness">The luminance level to impose</param>
            <returns>an adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.ModifyBrightness(System.Drawing.Color,System.Double)">
            <summary>
            Modifies an existing brightness level
            </summary>
            <remarks>
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="brightness">The luminance delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.SetSaturation(System.Drawing.Color,System.Double)">
            <summary>
            Sets the absolute saturation level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Saturation">The saturation value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.ModifySaturation(System.Drawing.Color,System.Double)">
            <summary>
            Modifies an existing Saturation level
            </summary>
            <remarks>
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Saturation">The saturation delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.SetHue(System.Drawing.Color,System.Double)">
            <summary>
            Sets the absolute Hue level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Hue">The Hue value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.ModifyHue(System.Drawing.Color,System.Double)">
            <summary>
            Modifies an existing Hue level
            </summary>
            <remarks>
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Hue">The Hue delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSLToRGB(MeteoInfoC.Global.ColorUtils.HSL)">
            <summary>
            Converts a colour from HSL to RGB
            </summary>
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks>
            <param name="hsl">The HSL value</param>
            <returns>A Color structure containing the equivalent RGB values</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.RGBToHSL(System.Drawing.Color)">
            <summary>
            Converts RGB to HSL
            </summary>
            <remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks>
            <param name="c">A Color to convert</param>
            <returns>An HSL value</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.RGBToHSV(System.Drawing.Color)">
            <summary>
            Convert RGB color to HSV color
            </summary>
            <param name="color">RGB color</param>
            <returns>HSV color</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.HSVToRGB(MeteoInfoC.Global.ColorUtils.HSV)">
            <summary>
            Convert HSV color to RGB color
            </summary>
            <param name="hsv">HSV color</param>
            <returns>RGB color</returns>
        </member>
        <member name="M:MeteoInfoC.Global.ColorUtils.ToKMLColor(System.Drawing.Color)">
            <summary>
            Convert color to KML color string - AABBGGRR
            </summary>
            <param name="color">The color</param>
            <returns>KML color string</returns>
        </member>
        <member name="T:MeteoInfoC.Global.Template">
            <summary>
            Template
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.ToolStripSplitButtonCheckable">
            <summary>
            Checkable ToolStripSplitButton
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.ToolStripSplitButtonCheckable.Checked">
            <summary>
            Get or set checked
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ToolStripSplitButtonCheckable.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint method
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Global.ToolStripSplitButtonCheckable.SyncToDefault">
            <summary>
            Synchronize to default
            </summary>
        </member>
        <member name="T:MeteoInfoC.Global.GlobalUtil">
            <summary>
            Global class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.GlobalUtil.GetRelativePath(System.String,System.String)">
            <summary>
            Get relative path of the file using project file path
            </summary>
            <param name="fileName">file path</param>
            <param name="projFile">project file path</param>
            <returns>relative path</returns>
        </member>
        <member name="M:MeteoInfoC.Global.GlobalUtil.GetAllFilesByFolder(System.String,System.String,System.Boolean)">
            <summary>
            Get all special files by folder using file filter
            </summary>
            <param name="folderName">The folder name</param>
            <param name="fileFilter">The file filter</param>
            <param name="isContainSubFolder">Is contain sub folder</param>
            <returns>The file list</returns>
        </member>
        <member name="T:MeteoInfoC.Global.ASCIItoBin">
            <summary>
            String to binary array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.ASCIItoBin.ConvertToByte(System.String,System.Int32)">
            <summary>
            Convert string to desired length byte array
            </summary>
            <param name="theString">The string need to be converted</param>
            <param name="desiredLength">Desired length of byte array</param>
            <returns>Byte array</returns>
        </member>
        <member name="T:MeteoInfoC.Global.Extent">
            <summary>
            Extent
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Extent.minX">
            <summary>
            minimun x
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Extent.maxX">
            <summary>
            maximum x
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Extent.minY">
            <summary>
            minimum y
            </summary>
        </member>
        <member name="F:MeteoInfoC.Global.Extent.maxY">
            <summary>
            maximum y
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Extent.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>
        </member>
        <member name="P:MeteoInfoC.Global.Extent.Width">
            <summary>
            Get width
            </summary>
        </member>
        <member name="P:MeteoInfoC.Global.Extent.Height">
            <summary>
            Get height
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.Extent.Include(MeteoInfoC.Global.Extent)">
            <summary>
            Judge if this extent include another extent
            </summary>
            <param name="bExtent">extent</param>
            <returns>is included</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Extent.ConvertToRectangle">
            <summary>
            Convert to rectangle
            </summary>
            <returns>rectangle</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Extent.GetCenterPoint">
            <summary>
            Get center point
            </summary>
            <returns>Center point</returns>
        </member>
        <member name="M:MeteoInfoC.Global.Extent.Shift(System.Double,System.Double)">
            <summary>
            Shift extent
            </summary>
            <param name="dx">X shift value</param>
            <param name="dy">Y shift value</param>
            <returns>Shifted extent</returns>
        </member>
        <member name="T:MeteoInfoC.Global.MIMath">
            <summary>
            Operators in MeteoInfoC
            </summary>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.SplitBySpace(System.String)">
            <summary>
            Split a string by space
            </summary>
            <param name="aLine">a string</param>
            <returns>split result</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.IsInclude(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Judge if a rectangle include another
            </summary>
            <param name="aRect">a rectangle</param>
            <param name="bRect">b rectangle</param>
            <returns>is included</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetLagerExtent(MeteoInfoC.Global.Extent,MeteoInfoC.Global.Extent)">
            <summary>
            Get maximum extent from two extent
            </summary>
            <param name="aET"></param>
            <param name="bET"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetSmallerExtent(MeteoInfoC.Global.Extent,MeteoInfoC.Global.Extent)">
            <summary>
            Get maximum extent from two extent
            </summary>
            <param name="aET"></param>
            <param name="bET"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.ShiftExtentLon(MeteoInfoC.Global.Extent,System.Double)">
            <summary>
            Shift extent with longitude
            </summary>
            <param name="aET"></param>
            <param name="lonShift"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.IsExtentCross(MeteoInfoC.Global.Extent,MeteoInfoC.Global.Extent)">
            <summary>
            Judge if two extent cross
            </summary>
            <param name="aET">a extent</param>
            <param name="bET">a extent</param>
            <returns>If two extent cross</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.ExtentInterSection(MeteoInfoC.Global.Extent,MeteoInfoC.Global.Extent)">
            <summary>
            Get intersection extent
            </summary>
            <param name="aET">a extent</param>
            <param name="bET">a extent</param>
            <returns>Intersection extent</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointsExtent(System.Collections.ArrayList)">
            <summary>
            Get extent from point list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointsExtent(System.Collections.Generic.List{MeteoInfoC.Shape.PointZ})">
            <summary>
            Get extent from point list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointsExtent(System.Collections.Generic.List{MeteoInfoC.Shape.PointM})">
            <summary>
            Get extent from point list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointsExtent(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Get extent from point list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointFsExtent(System.Collections.ArrayList)">
            <summary>
            Get extent from PointF list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointFsExtent(System.Drawing.PointF[])">
            <summary>
            Get extent from PointF list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetPointFsExtent(System.Collections.Generic.List{System.Drawing.PointF})">
            <summary>
            Get extent from PointF list
            </summary>
            <param name="PList"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetExtent(System.Double[0:,0:])">
            <summary>
            Get extent from discrete data
            </summary>
            <param name="discreteData">discrete data</param>
            <returns>extent</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInExtent(MeteoInfoC.PointD,MeteoInfoC.Global.Extent)">
            <summary>
            Judge if a point is in a rectangle
            </summary>
            <param name="aP"></param>
            <param name="aET"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInExtent(System.Drawing.PointF,MeteoInfoC.Global.Extent)">
            <summary>
            Judge if a point is in an extent
            </summary>
            <param name="aP"></param>
            <param name="aET"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInRectangle(System.Drawing.PointF,System.Drawing.Rectangle)">
            <summary>
            Judge if a pointF is in a rectangle
            </summary>
            <param name="aP">PointF</param>
            <param name="aRect">Rectangle</param>
            <returns>if the point is inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInRectangle(System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Judge if a point is in a rectangle
            </summary>
            <param name="aP">Point</param>
            <param name="aRect">Rectangle</param>
            <returns>if the point is inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInRectangle(MeteoInfoC.PointD,System.Drawing.Rectangle)">
            <summary>
            Judge if a PointD is in a rectangle
            </summary>
            <param name="aP">Point</param>
            <param name="aRect">Rectangle</param>
            <returns>if the point is inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInPolygon(System.Collections.Generic.List{MeteoInfoC.PointD},MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="poly">polygon coordinate list</param>
            <param name="aPoint">point</param>
            <returns>if inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInPolygon(System.Collections.ArrayList,MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="poly">polygon coordinate list</param>
            <param name="aPoint">point</param>
            <returns>if inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInPolygon(MeteoInfoC.Shape.PolygonShape,MeteoInfoC.PointD)">
            <summary>
            Judge if a point is in a polygon shape
            </summary>
            <param name="aPGS">PolygonShape</param>
            <param name="aPoint">point</param>
            <returns>if inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInPolygon(MeteoInfoC.Shape.PolygonShape,System.Double,System.Double)">
            <summary>
            Judge if a point is in a polygon
            </summary>
            <param name="aPGS">PolygonShape</param>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>if inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.PointInPolygonLayer(MeteoInfoC.Layer.VectorLayer,System.Double,System.Double)">
            <summary>
            Judge if a point is in a polygon layer
            </summary>
            <param name="aLayer">polygon layer</param>
            <param name="x">x</param>
            <param name="y">y</param>
            <returns>if inside</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.IsNumeric(System.String)">
            <summary>
            Judge if a string is number
            </summary>
            <param name="strNumber">String</param>
            <returns>bool</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.IsNumeric_1(System.String)">
            <summary>
            Judge if a string is number
            </summary>
            <param name="strNumber">String</param>
            <returns>bool</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.IsNumeric(System.Data.DataColumn)">
            <summary>
            Judge if a DataColumn is numeric
            </summary>
            <param name="col">DataColumn</param>
            <returns>Is numeric</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetMaxMinValue(System.Double[],System.Double,System.Double@,System.Double@)">
            <summary>
            Get max min value of data array
            </summary>
            <param name="S">data array</param>
            <param name="unDef">Undefine data</param>
            <param name="min">ref mininum</param>
            <param name="max">ref maximum</param>
            <returns>If has undefine data</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetDecimalNum(System.Double)">
            <summary>
            Get decimal number of a double data for ToString() format
            </summary>
            <param name="aData">data</param>
            <returns>decimal number</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.DoubleEquals(System.Double,System.Double)">
            <summary>
            Determine if two double data equal
            </summary>
            <param name="a">double a</param>
            <param name="b">double b</param>
            <returns>is or not equal</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.DoubleEquals_Abs(System.Double,System.Double)">
            <summary>
            Determine if two double data equal
            </summary>
            <param name="a">double a</param>
            <param name="b">double b</param>
            <returns>is or not equal</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.LonDistance(System.Single,System.Single)">
            <summary>
            longitude distance
            </summary>
            <param name="lon1">longitude 1</param>
            <param name="lon2">longitude 2</param>
            <returns>longitude distance</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.LonAdd(System.Single,System.Single)">
            <summary>
            Add longitude
            </summary>
            <param name="lon1">longitude 1</param>
            <param name="delta">delta</param>
            <returns>longitude</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.CalEllipseCoordByAngle(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate ellipse coordinate by angle
            </summary>
            <param name="x0">center x</param>
            <param name="y0">center y</param>
            <param name="a">major semi axis</param>
            <param name="b">minor semi axis</param>
            <param name="angle">angle</param>
            <returns>coordinate</returns>
        </member>
        <member name="M:MeteoInfoC.Global.MIMath.GetWindDirection(System.Double,System.Double)">
            <summary>
            Get wind direction from U/V
            </summary>
            <param name="U">U</param>
            <param name="V">V</param>
            <returns>wind direction</returns>
        </member>
        <member name="P:MeteoInfoC.CustomProperty.CurrentSelectObject">
            <summary>
            Get current select object
            </summary>
        </member>
        <member name="T:MeteoInfoC.CustomProperty.CustomPropertyDescriptor">
            <summary>
            CustomPropertyDescriptor class
            </summary>
        </member>
        <member name="T:MeteoInfoC.MeasureType">
            <summary>
            Measure type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.MeasureType.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:MeteoInfoC.MeasureType.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:MeteoInfoC.MeasureType.Feature">
            <summary>
            Feature
            </summary>
        </member>
        <member name="T:MeteoInfoC.frmMeasurement">
            <summary>
            Measurement form
            </summary>
            <summary>
            Measurement form
            </summary>
        </member>
        <member name="M:MeteoInfoC.frmMeasurement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.MeasureType">
            <summary>
            Get Measure type
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.IsArea">
            <summary>
            Get or set if is area
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.PreviousValue">
            <summary>
            Get or set previous value
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.CurrentValue">
            <summary>
            Get or set current value
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.AreaValue">
            <summary>
            Get or set area value for closed polyline
            </summary>
        </member>
        <member name="P:MeteoInfoC.frmMeasurement.TotalValue">
            <summary>
            Get or set total value
            </summary>
        </member>
        <member name="F:MeteoInfoC.frmMeasurement.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.frmMeasurement.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.frmMeasurement.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.ChartSet">
            <summary>
            Chart setting class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.ChartSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.ChartType">
            <summary>
            Get or set chart type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.DrawCharts">
            <summary>
            Get or set if draw charts
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.FieldNames">
            <summary>
            Get or set field names
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.XShift">
            <summary>
            Get or set x shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.YShift">
            <summary>
            Get or set y shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.MaxSize">
            <summary>
            Get or set maximum size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.MinSize">
            <summary>
            Get or set minimum size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.MaxValue">
            <summary>
            Get or set maximum value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.MinValue">
            <summary>
            Get or set minimum value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.BarWidth">
            <summary>
            Get or set bar width
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.AvoidCollision">
            <summary>
            Get or set if avoid collision
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.AlignType">
            <summary>
            Get or set align type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.View3D">
            <summary>
            Get or set if view 3D
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ChartSet.Thickness">
            <summary>
            Get or set 3D thickness
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.ChartSet.ExportToXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export to XML document
            </summary>
            <param name="doc">xml document</param>
            <param name="parent">parent xml element</param>
        </member>
        <member name="T:MeteoInfoC.Layer.frmLabelSet">
            <summary>
            frmLabelSet class
            </summary>
            <summary>
            frmLabelSet class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLabelSet.#ctor(MeteoInfoC.Map.MapView)">
            <summary>
            Constructor
            </summary>
            <param name="aMapView"></param>
        </member>
        <member name="P:MeteoInfoC.Layer.frmLabelSet.Layer">
            <summary>
            Get or set layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.frmLabelSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLabelSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLabelSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.VisibleScale">
            <summary>
            Visible scale setting
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VisibleScale.EnableMinVisScale">
            <summary>
            Get or set is enable minimum visible scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VisibleScale.EnableMaxVisScale">
            <summary>
            Get or set if enable maximum visible scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VisibleScale.MinVisScale">
            <summary>
            Get or set minimum visible scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VisibleScale.MaxVisScale">
            <summary>
            Get or set maximum visible scale
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VisibleScale.IsVisibleScaleEnabled">
            <summary>
            Get is visible scale enabled
            </summary>
            <returns>Is visible scale enabled</returns>
        </member>
        <member name="T:MeteoInfoC.Layer.frmLayerProperty">
            <summary>
            Layer property form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLayerProperty.#ctor(MeteoInfoC.Layer.MapLayer,MeteoInfoC.Legend.MapFrame)">
            <summary>
            Constructor
            </summary>
            <param name="aLayer">a map layer</param>
            <param name="mf">map frame</param>
        </member>
        <member name="P:MeteoInfoC.Layer.frmLayerProperty.MapLayer">
            <summary>
            Get or set map layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.frmLayerProperty.Legend">
            <summary>
            Get or set parent legend
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.frmLayerProperty.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLayerProperty.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Layer.frmLayerProperty.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.MapLayer">
            <summary>
            Layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.MapLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.LayerType">
            <summary>
            Get or set layer type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.ShapeType">
            <summary>
            Get or set shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.Handle">
            <summary>
            Get or set layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.LayerName">
            <summary>
            Get or set layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.FileName">
            <summary>
            Get or set file name of the layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.ProjInfo">
            <summary>
            Get or set projection info
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.Extent">
            <summary>
            Get or set layer extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.Visible">
            <summary>
            Get or set layer visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.LayerDrawType">
            <summary>
            Get or set layer draw type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.IsMaskout">
            <summary>
            Get or set if layer will be maskout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.Expanded">
            <summary>
            Get or set if layer legend is expanded
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.TransparencyPerc">
            <summary>
            Get or set transparency percent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.Tag">
            <summary>
            Get or set Tag
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.MapLayer.VisibleScale">
            <summary>
            Get or set visible scale
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.MapLayer.GetPropertyObject">
            <summary>
            Set properties
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.MapLayer.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Layer.LayerTypes">
            <summary>
            Layer types enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerTypes.VectorLayer">
            <summary>
            Vecotor layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerTypes.ImageLayer">
            <summary>
            Image layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerTypes.RasterLayer">
            <summary>
            Raster layer
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.RasterLayer">
            <summary>
            Raster layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayer.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayer.GridData">
            <summary>
            Get or set grid data array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayer.IsProjected">
            <summary>
            Get or set if is projected
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayer.InterpMode">
            <summary>
            Get or set interpolation mode
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.UpdateOriginData">
            <summary>
            Update origin data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.GetOriginData">
            <summary>
            Get origin data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Get cell value by a point
            </summary>
            <param name="iIdx">i index</param>
            <param name="jIdx">j index</param>
            <returns>cell value</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.SetPalette(System.String)">
            <summary>
            Set color palette to a image from a palette file
            </summary>
            <param name="aFile">file path</param>        
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.SetPaletteByLegend">
            <summary>
            Set color palette by legend scheme
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.UpdateImage">
            <summary>
            Update image
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.UpdateImage(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Update image by legend scheme
            </summary>
            <param name="als">The legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.SetImageByGridData">
            <summary>
            Set image by grid data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.UpdateGridData">
            <summary>
            Update grid data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayer.GetPropertyObject">
            <summary>
            Override get custom property method
            </summary>
            <returns>property object</returns>
        </member>
        <member name="T:MeteoInfoC.Layer.RasterLayerSet">
            <summary>
            Raset layer set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.RasterLayerSet.#ctor(MeteoInfoC.Layer.RasterLayer,MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Constructor
            </summary>
            <param name="aILayer">raster layer</param>
            <param name="aLayersLegend">layersLegend</param>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.LayerName">
            <summary>
            Get or set layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.Visible">
            <summary>
            Get or set if visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.IsMaskout">
            <summary>
            Get or set if layer will be maskout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.FileName">
            <summary>
            Get file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.WorldFileName">
            <summary>
            Get world file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.Handle">
            <summary>
            Get layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.LayerType">
            <summary>
            Get layer type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.RasterLayerSet.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.LabelSet">
            <summary>
            Label set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.LabelSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.DrawLabels">
            <summary>
            Get or set if draw labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.FieldName">
            <summary>
            Get or set label field name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.LabelFont">
            <summary>
            Get or set label font
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.LabelColor">
            <summary>
            Get or set label color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.DrawShadow">
            <summary>
            Get or set if show shadow
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.ShadowColor">
            <summary>
            Get or set shadow color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.LabelAlignType">
            <summary>
            Get or set label align type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.XOffset">
            <summary>
            Get or set x offset
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.YOffset">
            <summary>
            Get or set y offset
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.AvoidCollision">
            <summary>
            Get or set if avoid collision
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.ColorByLegend">
            <summary>
            Get or set if set color by legend
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.DynamicContourLabel">
            <summary>
            Get or set if using dynamic contour label
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.AutoDecimal">
            <summary>
            Get or set if automatic set decimal digits
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LabelSet.DecimalDigits">
            <summary>
            Get or set decimal digits
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.ImageLayer">
            <summary>
            Image layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.Image">
            <summary>
            Get or set image
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.WorldFileName">
            <summary>
            Get or set world file name of the layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.WorldFileParaV">
            <summary>
            Get or set world file parameters
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.TransparencyPerc">
            <summary>
            Override transparency percent property
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.SetTransColor">
            <summary>
            Get or set if set transparency color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.TransparencyColor">
            <summary>
            Get or set transparency color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.IsSetTransColor">
            <summary>
            Get or set if set transparency color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.XUL">
            <summary>
            Get or set X upper-left
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.YUL">
            <summary>
            Get or set y upper-left
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.XScale">
            <summary>
            Get or set X scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.YScale">
            <summary>
            Get or set y scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.XRotate">
            <summary>
            Get or set x rotate
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayer.YRotate">
            <summary>
            Get or set y rotate
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.ReadImageWorldFile(System.String)">
            <summary>
            Read image world file
            </summary>
            <param name="aIFile"></param>        
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.WriteImageWorldFile(System.String,MeteoInfoC.Layer.WorldFilePara)">
            <summary>
            Write image world file
            </summary>
            <param name="aFile"></param>
            <param name="aWFP"></param>
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.SetPalette(System.String)">
            <summary>
            Set color palette to a image from a palette file
            </summary>
            <param name="aFile">file path</param>        
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.SetPalette(System.Collections.Generic.List{System.Drawing.Color})">
            <summary>
            Set color palette to a image
            </summary>
            <param name="colors">color array</param>        
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.UpdateTransparency">
            <summary>
            Set color palette to a image
            </summary>            
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.SetTransparencyColor(System.Drawing.Color)">
            <summary>
            Set a transparency color
            </summary>
            <param name="tColor">transparency color</param>        
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayer.GetPropertyObject">
            <summary>
            Override get custom property method
            </summary>
            <returns>property object</returns>
        </member>
        <member name="T:MeteoInfoC.Layer.LayerCollection">
            <summary>
            Layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.LayerCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LayerCollection.LayerNum">
            <summary>
            Get the number of layers
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LayerCollection.SelectedLayer">
            <summary>
            Get or set selected layer of the layers
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LayerCollection.Layers">
            <summary>
            Get or set layers
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.ImageLayerSet">
            <summary>
            Image layer set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.ImageLayerSet.#ctor(MeteoInfoC.Layer.ImageLayer,MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Constructor
            </summary>
            <param name="aILayer"></param>
            <param name="aLayersLegend"></param>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.LayerName">
            <summary>
            Get or set layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.Visible">
            <summary>
            Get or set if visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.IsMaskout">
            <summary>
            Get or set if layer will be maskout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.TransparencyPercent">
            <summary>
            Get or set layer color transparency percent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.SetTransparencyColor">
            <summary>
            Get or set if set transparency color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.TransparencyColor">
            <summary>
            Get or set transparecny color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.XUL">
            <summary>
            Get or set X upper-left
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.YUL">
            <summary>
            Get or set y upper-left
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.XScale">
            <summary>
            Get or set X scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.YScale">
            <summary>
            Get or set y scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.FileName">
            <summary>
            Get file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.WorldFileName">
            <summary>
            Get world file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.Handle">
            <summary>
            Get layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.ImageLayerSet.LayerType">
            <summary>
            Get layer type
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.LayerDrawType">
            <summary>
            Layer type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Map">
            <summary>
            Map layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Shaded">
            <summary>
            Shaded layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Contour">
            <summary>
            Contour layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.GridFill">
            <summary>
            Grid fill layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.GridPoint">
            <summary>
            Grid point layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Vector">
            <summary>
            Wind vector layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.StationPoint">
            <summary>
            Station point layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Barb">
            <summary>
            Wind barb layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.WeatherSymbol">
            <summary>
            Weather symbol layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.StationModel">
            <summary>
            Station model layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Image">
            <summary>
            Image layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Raster">
            <summary>
            Raster Layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.TrajLine">
            <summary>
            Trajectory line layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.TrajPoint">
            <summary>
            Trajectory point layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.LayerDrawType.Streamline">
            <summary>
            Streamline
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.VectorLayer">
            <summary>
            Vector Layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.#ctor(MeteoInfoC.Shape.ShapeTypes)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.AvoidCollision">
            <summary>
            Get or set if enable avoid collision
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.ShapeNum">
            <summary>
            Get shape number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.ShapeList">
            <summary>
            Get or set shapes
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.AttributeTable">
            <summary>
            Get or set AttributeTable
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.LabelSet">
            <summary>
            Get or set label set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.LabelPoints">
            <summary>
            Get or set label points
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.ChartSet">
            <summary>
            Get or set chart set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.ChartPoints">
            <summary>
            Get or set chart points
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.NumFields">
            <summary>
            Get or set fields number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.Fields">
            <summary>
            Get fields
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.IsEditing">
            <summary>
            Get or set if the layer is editing
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.TransparencyPerc">
            <summary>
            Override TransparencyPerc property
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.LegendScheme">
            <summary>
            Override LegendScheme property
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.IdentiferShape">
            <summary>
            Get or set identifer shape
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.DrawingZoom">
            <summary>
            Get or set drawing zoom
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayer.IsProjected">
            <summary>
            Get or set if is projected
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.StartEditingTable">
            <summary>
            Start editing table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.StopEditingTable(System.Boolean)">
            <summary>
            Stop editing table
            </summary>
            <param name="applyChanges"></param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetFieldName(System.Int32)">
            <summary>
            Get field name by index
            </summary>
            <param name="FieldIndex">field index</param>
            <returns>field name</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetFieldIdxByName(System.String)">
            <summary>
            Get field index by name
            </summary>
            <param name="fieldName">field name</param>
            <returns>field index</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetFieldNameList">
            <summary>
            Get field name list
            </summary>
            <returns>field name list</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetField(System.Int32)">
            <summary>
            Get field by index
            </summary>
            <param name="FieldIndex">field index</param>
            <returns>field</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetFields">
            <summary>
            Get fields
            </summary>
            <returns>fields</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetCellValue(System.Int32,System.Int32)">
            <summary>
            Get cell value
            </summary>
            <param name="FieldIndex">Field index</param>
            <param name="ShapeIndex">Shape index</param>
            <returns>Cell value</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetCellValue(System.String,System.Int32)">
            <summary>
            Get cell value
            </summary>
            <param name="FieldName">Field name</param>
            <param name="ShapeIndex">Shape index</param>
            <returns>Cell value</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditCellValue(System.String,System.Int32,System.Object)">
            <summary>
            Edit cell value
            </summary>
            <param name="FieldName">field name</param>
            <param name="ShapeIndex">shape index</param>
            <param name="value">value</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditCellValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Edit cell value
            </summary>
            <param name="FieldIndex">field index</param>
            <param name="ShapeIndex">shape index</param>
            <param name="value">value</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetMinValue(System.String)">
            <summary>
            Get minimum data value of a field
            </summary>
            <param name="fieldName">field name</param>
            <returns>minimum data</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetLabelPoints">
            <summary>
            Get label points
            </summary>
            <returns>Label points</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddLabel(MeteoInfoC.Shape.Graphic)">
            <summary>
            Add label point
            </summary>
            <param name="aLP">Label point</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.RemoveLabels">
            <summary>
            Remove all labels
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddLabels">
            <summary>
            Add labels
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddLabelsByLegend">
            <summary>
            Add labels by legend scheme colors
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddLabelsByColor">
            <summary>
            Add labels
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddLabelsContourDynamic(MeteoInfoC.Global.Extent)">
            <summary>
            Add lables of contour layer dynamicly
            </summary>                
            <param name="sExtent">View extent of MayView</param>        
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SelectLabels(MeteoInfoC.Global.Extent,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Select labels
            </summary>
            <param name="aExtent">select extent</param>
            <param name="SelectedLabels">ref selected labels</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.MoveLabel(System.String,System.Single,System.Single)">
            <summary>
            Move label to a new position
            </summary>
            <param name="labStr">label text</param>
            <param name="xShift">x shift</param>
            <param name="yShift">y shift</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddChart(MeteoInfoC.Shape.Graphic)">
            <summary>
            Add a chart point
            </summary>
            <param name="aCP"></param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.RemoveCharts">
            <summary>
            Remove all charts
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.AddCharts">
            <summary>
            Add charts
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.UpdateChartsProp">
            <summary>
            Update charts properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SelectShapes(MeteoInfoC.Global.Extent,System.Boolean)">
            <summary>
            Select shapes
            </summary>
            <param name="aExtent">Extent</param>
            <param name="isSingleSel">If only select one shape</param>
            <returns>Slected shapes</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SelectShapes(MeteoInfoC.Shape.PolygonShape)">
            <summary>
            Select shapes by a polygon shape
            </summary>
            <param name="polygonShape">The polygon shape</param>
            <returns>Selected shape indexes</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.HasSelectedShapes">
            <summary>
            Get if has selected shape
            </summary>
            <returns>Boolean</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetSelectedShapeIndexes">
            <summary>
            Get selected shape indexes
            </summary>
            <returns>indexes</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.ClearSelectedShapes">
            <summary>
            Clear selected shapes
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditAddShape(MeteoInfoC.Shape.Shape)">
            <summary>
            Edit: Add shape
            </summary>
            <param name="aShape">shape</param>        
            <returns>ifsuccess</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditInsertShape(MeteoInfoC.Shape.Shape,System.Int32)">
            <summary>
            Edit: Insert shape
            </summary>
            <param name="aShape">shape</param>
            <param name="position">position</param>
            <returns>ifsuccess</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditDeleteShape(System.Int32)">
            <summary>
            Edit: Delete shape
            </summary>
            <param name="position">position</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditReplaceShape(System.Int32,MeteoInfoC.Shape.Shape)">
            <summary>
            Edit: Replace a shape
            </summary>
            <param name="position">postion</param>
            <param name="aShape">shape</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditAddField(System.Data.DataColumn)">
            <summary>
            Add field
            </summary>
            <param name="aField">field</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditAddField(System.String,System.Type)">
            <summary>
            Edit: Add field
            </summary>
            <param name="fieldName">field name</param>
            <param name="fieldType">field type</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditInsertField(System.Data.DataColumn,System.Int32)">
            <summary>
            Edit: Insert field
            </summary>
            <param name="aField">field</param>
            <param name="position">position</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditInsertField(System.String,System.Type,System.Int32)">
            <summary>
            Edit: Insert field
            </summary>
            <param name="fieldName">field name</param>
            <param name="fieldType">field type</param>
            <param name="position">position</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditDeleteField(System.Int32)">
            <summary>
            Edit: Delete a field by index
            </summary>
            <param name="fieldIndex">field index</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditDeleteField(System.String)">
            <summary>
            Edit: Delete a field by name
            </summary>
            <param name="fieldName">field name</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.EditRenameField(System.String,System.String)">
            <summary>
            Edit: Rename field
            </summary>
            <param name="oldName">old field name</param>
            <param name="newName">new field name</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAttributeTable">
            <summary>
            Save attribute table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveFile">
            <summary>
            Save layer as a shape file
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveFile(System.String)">
            <summary>
            Save layer as a shape file
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.Clip(MeteoInfoC.Layer.VectorLayer,System.Boolean)">
            <summary>
            Clip the layer by a clipping layer
            </summary>
            <param name="clipLayer">Clipping layer</param>
            <param name="onlySel">If only using selected shapes in clipping layer</param>
            <returns>Clipped result layer</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.UpdateOriginData">
            <summary>
            Update data to origion set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetOriginData">
            <summary>
            Get origin data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetOriginShapes">
            <summary>
            Get origin shapes
            </summary>
            <returns>Origin shapes</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetOriginAttTable">
            <summary>
            Get origin attribute table
            </summary>
            <returns>Origin attribute table</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.UpdateLegendScheme(MeteoInfoC.Legend.LegendType,System.String)">
            <summary>
            Update legend scheme
            </summary>
            <param name="aLT">legend type</param>
            <param name="fieldName">field name</param>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.UpdateLegendIndexes">
            <summary>
            Update legend scheme -> update 
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.CreateLegendScheme(MeteoInfoC.Legend.LegendType,System.String)">
            <summary>
            Create legend scheme
            </summary>
            <param name="aLT">legend type</param>
            <param name="fieldName">field name</param>
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.UpdateExtent">
            <summary>
            Update extent
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.GetPropertyObject">
            <summary>
            Override get custom property method
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAsKMLFile_XML(System.String)">
            <summary>
            Save as KML (Google Earth data format) file
            <param name="fileName">KML file name</param>
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAsKMLFile(System.String)">
            <summary>
            Save as KML (Google Earth data format) file
            <param name="fileName">KML file name</param>
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAsKMLFile_Polygon(System.String)">
            <summary>
            Save as KML (Google Earth data format) file
            <param name="fileName">KML file name</param>
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAsKMLFile_Polyline(System.String)">
            <summary>
            Save as KML (Google Earth data format) file
            <param name="fileName">KML file name</param>
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayer.SaveAsKMLFile_Point(System.String)">
            <summary>
            Save as KML (Google Earth data format) file
            <param name="fileName">KML file name</param>
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.LegendSchemeEditor">
            <summary>
            Legend scheme editor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.LegendSchemeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get edit style
            </summary>
            <param name="context">ITypeDescriptorContext</param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layer.LegendSchemeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edit value
            </summary>
            <param name="context">ITypeDescriptorContex</param>
            <param name="provider">IserviceProvider</param>
            <param name="value">object</param>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Layer.LegendSchemeE">
            <summary>
            Legend scheme set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LegendSchemeE.LayerHandle">
            <summary>
            Layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LegendSchemeE.LegendScheme">
            <summary>
            Legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.LegendSchemeE.LayersTV">
            <summary>
            LayersLegend
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.MyConverter">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.MyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert to
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Layer.VectorLayerSet">
            <summary>
            Vector layer set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layer.VectorLayerSet.#ctor(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Constructor
            </summary>
            <param name="aLayer"></param>
            <param name="aLayersTV"></param>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.LayerName">
            <summary>
            Get or set layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.TransparencyPercent">
            <summary>
            Get or set layer color transparency percent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.Visible">
            <summary>
            Get or set if layer visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.IsMaskout">
            <summary>
            Get or set if layer will be maskout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.AvoidCollision">
            <summary>
            Get or set if enable avoid collision
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.FileName">
            <summary>
            Get layer file name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.Handle">
            <summary>
            Get layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.LayerType">
            <summary>
            Get layer type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.LayerDrawType">
            <summary>
            Get layer draw type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.ShapeType">
            <summary>
            Get layer shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layer.VectorLayerSet.ShapeNum">
            <summary>
            Get layer shape number
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layer.WorldFilePara">
            <summary>
            image world file parameters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.XUL">
            <summary>
            x of up-left
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.YUL">
            <summary>
            y of up-left
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.XScale">
            <summary>
            x scale
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.YScale">
            <summary>
            y scale
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.XRotate">
            <summary>
            x rotate
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layer.WorldFilePara.YRotate">
            <summary>
            y rotate
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.ChartTypes">
            <summary>
            Chart type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.ChartTypes.WindVector">
            <summary>
            Wind vector
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.ChartTypes.WindBarb">
            <summary>
            Wind barb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.ChartTypes.StationModel">
            <summary>
            Station model
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.ChartTypes.BarChart">
            <summary>
            Bar chart
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.ChartTypes.PieChart">
            <summary>
            Pie chart
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.BreakTypes">
            <summary>
            Legend break types
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.PointBreak">
            <summary>
            Point break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.PolylineBreak">
            <summary>
            Polyline break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.PolygonBreak">
            <summary>
            Polygon break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.ColorBreak">
            <summary>
            Color break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.VectorBreak">
            <summary>
            Wind vector break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.LabelBreak">
            <summary>
            Label break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.BreakTypes.ChartBreak">
            <summary>
            Chart break
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.ChartBreak">
            <summary>
            legend scheme break of chart
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.#ctor(MeteoInfoC.Legend.ChartTypes)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.ChartType">
            <summary>
            Get or set chart type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.ChartData">
            <summary>
            Get or set chart data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.ItemNum">
            <summary>
            Get chart item number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.DataSum">
            <summary>
            Get data sum
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.XShift">
            <summary>
            Get or set x shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.YShift">
            <summary>
            Get or set y shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.MaxSize">
            <summary>
            Get or set maximum size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.MinSize">
            <summary>
            Get or set minimum size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.MaxValue">
            <summary>
            Get or set maximum value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.MinValue">
            <summary>
            Get or set minimum value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.BarWidth">
            <summary>
            Get or set bar width
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.AlignType">
            <summary>
            Get or set align type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.View3D">
            <summary>
            Get or set if view 3D
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.Thickness">
            <summary>
            Get or set 3D thickness
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ChartBreak.ShapeIndex">
            <summary>
            Get or set shape index
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetBarHeights">
            <summary>
            Get bar heights
            </summary>
            <returns>bar heights</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetWidth">
            <summary>
            Get chart width
            </summary>
            <returns>chart width</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetHeight">
            <summary>
            Get chart height
            </summary>
            <returns>chart height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetPieAngles">
            <summary>
            Get pie angles
            </summary>
            <returns>pie angle list</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.Clone">
            <summary>
            Override Clone method
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetSampleChartBreak">
            <summary>
            Get sample chart break
            </summary>
            <returns>sample chart break</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ChartBreak.GetDrawExtent(System.Drawing.PointF)">
            <summary>
            Get draw extent
            </summary>
            <param name="aPoint">start point</param>
            <returns>draw extent</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.ColorBreak">
            <summary>
            Color break
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ColorBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.BreakType">
            <summary>
            Get or set break type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.StartValue">
            <summary>
            Get or set start value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.EndValue">
            <summary>
            Get or set end value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.Color">
            <summary>
            Get or set color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.Caption">
            <summary>
            Get or set caption
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.IsNoData">
            <summary>
            Get or set if is undefine data
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ColorBreak.DrawShape">
            <summary>
            Get or set if draw shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ColorBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>custom property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ColorBreak.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ColorBreak.ExportToXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export to XML document
            </summary>
            <param name="doc">xml document</param>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Legend.ColorBreak.GetValueString">
            <summary>
            Get value string
            </summary>
            <returns>value string</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.frmColorSymbolSet">
            <summary>
            Color symbol set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmColorSymbolSet.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parent">paraent object</param>
        </member>
        <member name="P:MeteoInfoC.Legend.frmColorSymbolSet.ColorBreak">
            <summary>
            Get or set color break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.frmColorSymbolSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmColorSymbolSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmColorSymbolSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmLabelSymbolSet">
            <summary>
            Label symbol set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLabelSymbolSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.frmLabelSymbolSet.LabelBreak">
            <summary>
            Get or set label break
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLabelSymbolSet.SetParent(System.Object)">
            <summary>
            Set parent
            </summary>
            <param name="parent">parent object</param>
        </member>
        <member name="F:MeteoInfoC.Legend.frmLabelSymbolSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLabelSymbolSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLabelSymbolSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmPointSymbolSet">
            <summary>
            Point symbol set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPointSymbolSet.#ctor(System.Object)">
            <summary>
            constructor
            </summary>
            <param name="parent">parent object</param>
        </member>
        <member name="P:MeteoInfoC.Legend.frmPointSymbolSet.PointBreak">
            <summary>
            Get or set point break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.frmPointSymbolSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPointSymbolSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPointSymbolSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmPolygonSymbolSet">
            <summary>
            Polygon symbol set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolygonSymbolSet.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent object</param>
        </member>
        <member name="P:MeteoInfoC.Legend.frmPolygonSymbolSet.PolygonBreak">
            <summary>
            Get or set polygon break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.frmPolygonSymbolSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolygonSymbolSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolygonSymbolSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmPolylineSymbolSet">
            <summary>
            Polyline symbol set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolylineSymbolSet.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent object</param>
        </member>
        <member name="P:MeteoInfoC.Legend.frmPolylineSymbolSet.PolylineBreak">
            <summary>
            Get or set polyline break
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.frmPolylineSymbolSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolylineSymbolSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmPolylineSymbolSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.ItemNode">
            <summary>
            Item node
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.ParentLegend">
            <summary>
            Get parent layers legend
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.Top">
            <summary>
            Get or set top
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.Height">
            <summary>
            Get or set height
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.IsExpanded">
            <summary>
            Get is expanded
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.Checked">
            <summary>
            Get or set is checked
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.Text">
            <summary>
            Get or set text
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.BackColor">
            <summary>
            Get or set back color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.ForeColor">
            <summary>
            Get or set fore color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.NodeType">
            <summary>
            Get or set node type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ItemNode.Selected">
            <summary>
            Get or set if is selected
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.SetParentLegend(MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Set parentLegend
            </summary>
            <param name="aLegend">layers legend</param>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.Expand">
            <summary>
            Expand
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.Collapse">
            <summary>
            Collapse
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.GetExpandedHeight">
            <summary>
            Get expanded height
            </summary>
            <returns>expanded height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ItemNode.GetDrawHeight">
            <summary>
            Get drawing height
            </summary>
            <returns>draw height</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LabelBreak">
            <summary>
            Label break
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LabelBreak.SizeChanged">
            <summary>
            Occurs after font, text changed
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LabelBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.Text">
            <summary>
            Get or set label text
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.Angle">
            <summary>
            Get or set label angle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.Font">
            <summary>
            Get or set label font
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.AlignType">
            <summary>
            Get or set label align type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.YShift">
            <summary>
            Get or set label y shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LabelBreak.XShift">
            <summary>
            Get or set label x shift
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LabelBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LabelBreak.Clone">
            <summary>
            Override Clone method
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LabelBreak.OnSizeChanged">
            <summary>
            Fire the size changed event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.LayersLegend">
            <summary>
            Layers legend control
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LayersLegend.GroupMouseClick">
            <summary>
            Occurs after mouse click on the group
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LayersLegend.LayerMouseClick">
            <summary>
            Occurs after mouse click on the layer
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LayersLegend.MapFrameMouseClick">
            <summary>
            Occurs after mouse click on the map frame
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LayersLegend.ActiveMapFrameChanged">
            <summary>
            Occurs after active map frame is changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.LayersLegend.MapFramesUpdated">
            <summary>
            Occurs after map frames updated
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LayersLegend.FrmLayerProp">
            <summary>
            Layer property form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.SelectedNode">
            <summary>
            Get or set selected node
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.CurrentMapFrame">
            <summary>
            Get current map frame
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.ActiveMapFrame">
            <summary>
            Get active map frame
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.MapFrames">
            <summary>
            Get or set map frames
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.MapLayout">
            <summary>
            Get or set map layout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayersLegend.IsLayoutView">
            <summary>
            Get or set if is layout view
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.AddMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Add a map frame
            </summary>
            <param name="mf">map frame</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.RemoveMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Remove a map frame
            </summary>
            <param name="mapFrame">map frame</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.SetActiveMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Set a map frame as active map frame
            </summary>
            <param name="mapFrame">map frame</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.GetNewMapFrameName">
            <summary>
            Get new map frame name
            </summary>
            <returns>name</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.ExportProjectXML(System.Xml.XmlDocument@,System.Xml.XmlElement,System.String)">
            <summary>
            Export project XML content
            </summary>
            <param name="m_Doc">ref XML document</param>
            <param name="parent">parent XML element</param>
            <param name="projectFilePath">project file path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.ImportProjectXML(System.Xml.XmlElement)">
            <summary>
            Import project XML content
            </summary>
            <param name="parent">parent XML element</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint event
            </summary>
            <param name="e">paint event args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaintBackground event
            </summary>
            <param name="e">paint event args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Drag enter event
            </summary>
            <param name="drgevent"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.Redraw">
            <summary>
            Redraw the Legend
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnResize(System.EventArgs)">
            <summary>
            Override OnResize event
            </summary>
            <param name="e">envent args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse click event
            </summary>
            <param name="e">mouse envent args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDoubelClick event
            </summary>
            <param name="e">mouse event args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDown event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseMove event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseUp event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMapFrameMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires the MapFrameMouseClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnGroupMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires the GroupMouseClick event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnLayerMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Fires LayerMouseClick event
            </summary>
            <param name="e">mouse event args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnActiveMapFrameChanged">
            <summary>
            Fires the ActiveMapFrameChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.OnMapFramesUpdated">
            <summary>
            Fires the MapFramesUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayersLegend.CheckLayerNode(MeteoInfoC.Legend.LayerNode,System.Boolean)">
            <summary>
            Set if layer node checked
            </summary>
            <param name="layerNode">layer node</param>
            <param name="isCheck">is check</param>
        </member>
        <member name="T:MeteoInfoC.Legend.BarGraphBreak">
            <summary>
            Line graph break
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.BarGraphBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.BarGraphBreak.Size">
            <summary>
            Get or set point size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.BarGraphBreak.Fields">
            <summary>
            Get fields
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.BarGraphBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>custom property object</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendSchemeControl">
            <summary>
            LegendScheme control
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendSchemeControl.m_FrmSS">
            <summary>
            Property form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.#ctor(System.Boolean,MeteoInfoC.Layer.MapLayer,MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Constructor
            </summary>
            <param name="ifFrmMeteoData"></param>
            <param name="mapLayer"></param>
            <param name="aLayersTV"></param>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendSchemeControl.LegendScheme">
            <summary>
            Get legend scheme
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.Update(MeteoInfoC.Layer.MapLayer,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Update legendscheme
            </summary>
            <param name="mapLayer">map layer</param>
            <param name="aLS">legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.SetLegendScheme(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set legend scheme
            </summary>
            <param name="aLS"></param>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendSchemeControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendSchemeControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendView">
            <summary>
            Legend view control
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.#ctor">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Legend.LegendView.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendView.SelectedRows">
            <summary>
            Get selected rows
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.Update(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Update legend scheme
            </summary>
            <param name="aLS">legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_Color(System.Drawing.Color)">
            <summary>
            Set legend break color
            </summary>
            <param name="aColor"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_Alpha(System.Int32)">
            <summary>
            Set legend break color alpha
            </summary>
            <param name="alpha">Alpha value</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_OutlineColor(System.Drawing.Color)">
            <summary>
            Set legend break outline color
            </summary>
            <param name="aColor">color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_OutlineSize(System.Single)">
            <summary>
            Set legend break outline size
            </summary>
            <param name="outlineSize">color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_Angle(System.Single)">
            <summary>
            Set legend break angle
            </summary>
            <param name="angle">angle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_Size(System.Single)">
            <summary>
            Set legend break size
            </summary>
            <param name="aSize">size</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_PointStyle(MeteoInfoC.Drawing.PointStyle)">
            <summary>
            Set legend break point style
            </summary>
            <param name="aPS"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_PolylineStyle(MeteoInfoC.Legend.LineStyles)">
            <summary>
            Set legend break polyline style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_DrawOutline(System.Boolean)">
            <summary>
            Set legend break if draw outline
            </summary>
            <param name="drawOutLine"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_DrawFill(System.Boolean)">
            <summary>
            Set legend break if draw fill
            </summary>
            <param name="drawFill"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_DrawShape(System.Boolean)">
            <summary>
            Set legend break if draw shape
            </summary>
            <param name="drawShape"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_UsingHatchStyle(System.Boolean)">
            <summary>
            Set legend break if using hatch style
            </summary>
            <param name="usginHatchStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_HatchStyle(System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            Set legend break hatch style
            </summary>
            <param name="hatchStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_MarkerType(MeteoInfoC.Drawing.MarkerType)">
            <summary>
            Set legend break marder type
            </summary>
            <param name="markerType">marker type</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_FontName(System.String)">
            <summary>
            Set legend break font name
            </summary>
            <param name="fontName">font name</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_Image(System.String)">
            <summary>
            Set legend break image path
            </summary>
            <param name="imagePath">image path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_MarkerIndex(System.Int32)">
            <summary>
            Set legend break marker index
            </summary>
            <param name="markerIdx">marker index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_BackColor(System.Drawing.Color)">
            <summary>
            Set legend break if draw fill
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_BackColorAlpha(System.Int32)">
            <summary>
            Set legend break alpha if draw fill
            </summary>
            <param name="alpha">Alpha value</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_DrawSymbol(System.Boolean)">
            <summary>
            Set legend break if draw symbol
            </summary>
            <param name="drawSymbol"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_SymbolSize(System.Single)">
            <summary>
            Set legend break symbol size
            </summary>
            <param name="symbolSize"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_SymbolStyle(MeteoInfoC.Drawing.PointStyle)">
            <summary>
            Set legend break symbol size
            </summary>
            <param name="symbolStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_SymbolColor(System.Drawing.Color)">
            <summary>
            Set legend break symbol color
            </summary>
            <param name="symbolColor">symbol color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.SetLegendBreak_SymbolInterval(System.Int32)">
            <summary>
            Set legend break symbol interval
            </summary>
            <param name="symbolInterval">symbol interval</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint event
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.OnResize(System.EventArgs)">
            <summary>
            Override OnResize event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDoubleClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.LineStyles">
            <summary>
            Line style enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.Solid">
            <summary>
            Solid line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.Dash">
            <summary>
            Dash line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.Dot">
            <summary>
            Dot line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.DashDot">
            <summary>
            Dash dot line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.DashDotDot">
            <summary>
            Dash dot dot line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.ColdFront">
            <summary>
            Cold front line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.WarmFront">
            <summary>
            Warm front line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.OccludedFront">
            <summary>
            Occluded front line style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LineStyles.StationaryFront">
            <summary>
            Stationary front line style
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.NodeTypes">
            <summary>
            Node type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.NodeTypes.LayerNode">
            <summary>
            Layer node
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.NodeTypes.MapFrameNode">
            <summary>
            Map frame
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.NodeTypes.GroupNode">
            <summary>
            Group node
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.SymbolControl">
            <summary>
            Marker Control
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.SymbolControl.SelectedCellChanged">
            <summary>
            Occurs after selected cell changed.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.ShapeType">
            <summary>
            Get or set shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.MarkerType">
            <summary>
            Get or set marker type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.CellSize">
            <summary>
            Get or set cell size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.SelectedCell">
            <summary>
            Get or set selected cell
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.SymbolNumber">
            <summary>
            Get or set symbol number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.SymbolControl.ColumnNumber">
            <summary>
            Get or set column number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.SetIamgeList(System.Collections.Generic.List{System.Drawing.Image})">
            <summary>
            Set image list
            </summary>
            <param name="imageList">image list</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint event
            </summary>
            <param name="e">paint event args</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaintBackground event
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.OnResize(System.EventArgs)">
            <summary>
            Override OnResize event
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.OnSelectedCellChanged">
            <summary>
            Fires the SelectedCellChanged event
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.SymbolControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.SymbolControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.GridLabelPosition">
            <summary>
            Grid lable position enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.GridLabelPosition.LeftBottom">
            <summary>
            Left and bottom
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.GridLabelPosition.LeftUp">
            <summary>
            Left and up
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.GridLabelPosition.RightBottom">
            <summary>
            Right and bottom
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.GridLabelPosition.RightUp">
            <summary>
            Right and up
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.GridLabelPosition.All">
            <summary>
            All of four directions
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.MapFrame">
            <summary>
            Map frame
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.MapFrame.LayersUpdated">
            <summary>
            Occurs after layers updated. Including expended status changed.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.MapFrame.LayoutBoundsChanged">
            <summary>
            Occurs after layout bounds changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.MapFrame.MapViewUpdated">
            <summary>
            Occurs after map view updated
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.MapView">
            <summary>
            Get or set map view
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.Nodes">
            <summary>
            Get or set nodes
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.SelectedLayer">
            <summary>
            Get or set selected layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.Legend">
            <summary>
            Get or set layers legend
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.Active">
            <summary>
            Get or set active
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.Order">
            <summary>
            Get or set z order
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.DrawNeatLine">
            <summary>
            Get or set map view neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.NeatLineColor">
            <summary>
            Get or set map view neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.NeatLineSize">
            <summary>
            Get or set map view neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.DrawGridLabel">
            <summary>
            Get or set if draw grid labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.InsideTickLine">
            <summary>
            Get or set if draw tick line inside
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.TickLineLength">
            <summary>
            Get or set grid tick line length
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridLabelShift">
            <summary>
            Get or set grid label shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridLabelPosition">
            <summary>
            Get or set grid label position
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridFont">
            <summary>
            Get or set grid lable font
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.MapFrameName">
            <summary>
            Get or set map frame name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.BackColor">
            <summary>
            Get or set map view back color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.ForeColor">
            <summary>
            Get or set map view fore color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridLineColor">
            <summary>
            Get or set gird line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridLineSize">
            <summary>
            Get or set grid line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridLineStyle">
            <summary>
            Get or set grid line style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.DrawGridLine">
            <summary>
            Get or set if draw grid line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.DrawGridTickLine">
            <summary>
            Get or set if draw grid line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.DrawDegreeSymbol">
            <summary>
            Get or set if draw degree symbol
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridXDelt">
            <summary>
            Get or set grid x/longitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridYDelt">
            <summary>
            Get or set grid y/latitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridXOrigin">
            <summary>
            Get or set grid x/longitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.GridYOrigin">
            <summary>
            Get or set grid y/latitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.LayoutBounds">
            <summary>
            Get or set layout bounds
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.MapFrame.IsFireMapViewUpdate">
            <summary>
            Get or set if fire MapViewUpdate event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddNewGroup(System.String)">
            <summary>
            Add a new group
            </summary>
            <param name="name">group name</param>
            <returns>group handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddGroup(MeteoInfoC.Legend.GroupNode)">
            <summary>
            Add group
            </summary>
            <param name="aGroup">group node</param>
            <returns>group handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveGroup(MeteoInfoC.Legend.GroupNode)">
            <summary>
            Delete group
            </summary>
            <param name="aGroup">group node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.OpenLayer(System.String)">
            <summary>
            Open a layer from layer file
            </summary>
            <param name="aFile">file path</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddLayerNode(MeteoInfoC.Legend.LayerNode)">
            <summary>
            Add layer node
            </summary>
            <param name="aLN">a layer node</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertLayerNode(System.Int32,MeteoInfoC.Legend.LayerNode)">
            <summary>
            Add layer node
            </summary>
            <param name="index">index</param>
            <param name="aLN">a layer node</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddLayerNode(MeteoInfoC.Legend.LayerNode,MeteoInfoC.Legend.GroupNode)">
            <summary>
            Add a layer node in a group node
            </summary>
            <param name="aLN">a layer node</param>
            <param name="aGN">a group node</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertLayerNode(System.Int32,MeteoInfoC.Legend.LayerNode,MeteoInfoC.Legend.GroupNode)">
            <summary>
            Add a layer node in a group node
            </summary>
            <param name="index">index</param>
            <param name="aLN">a layer node</param>
            <param name="aGN">a group node</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddGroupNode(MeteoInfoC.Legend.GroupNode)">
            <summary>
            Add a group node
            </summary>
            <param name="aGN">a group node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertGroupNode(System.Int32,MeteoInfoC.Legend.GroupNode)">
            <summary>
            Insert a group node
            </summary>
            <param name="index">index</param>
            <param name="aGN">a group node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Add vector layer
            </summary>
            <param name="aLayer">Vector layer</param>        
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddWindLayer(MeteoInfoC.Layer.VectorLayer,System.Boolean)">
            <summary>
            Add vector layer
            </summary>
            <param name="aLayer">Vector layer</param>       
            <param name="earthWind">if wind relative to earth</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddLayer(MeteoInfoC.Layer.MapLayer,System.Int32)">
            <summary>
            Add vector layer
            </summary>
            <param name="aLayer">Vector layer</param>
            <param name="groupHandle">group handle</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.ReOrderMapViewLayers">
            <summary>
            Re order map view layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.MoveLayer(System.Int32,System.Int32)">
            <summary>
            Move layer position
            </summary>
            <param name="handle">Layer handle</param>
            <param name="lNewIdx">Move to index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.MoveLayer(MeteoInfoC.Layer.MapLayer,System.Int32)">
            <summary>
            Move layer position
            </summary>
            <param name="aLayer">a layer</param>
            <param name="lNewIdx">Move to index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.MoveLayerToTop(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Move layer to top
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.MoveLayerToBottom(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Move layer to bottom
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveLayer(System.Int32)">
            <summary>
            Remove layer by index
            </summary>
            <param name="lIdx">layer index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveLayerByHandle(System.Int32)">
            <summary>
            Remove layer by handle
            </summary>
            <param name="handle">handle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Remove layer by handle
            </summary>
            <param name="aLayer">a layer</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveLayer(MeteoInfoC.Legend.LayerNode)">
            <summary>
            Remove a layer node
            </summary>
            <param name="aLN">a layer node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveMeteoLayers">
            <summary>
            Remove meteorological data layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveAllLayers">
            <summary>
            Remove all layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertPolygonLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Insert polygon layer
            </summary>
            <param name="aLayer">vector layer</param>        
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertPolylineLayer(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Insert polyline layer
            </summary>
            <param name="aLayer">vector layer</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertImageLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Insert image layer
            </summary>
            <param name="aLayer">vector layer</param>        
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SelectLayerByHandle(System.Int32)">
            <summary>
            Select layer by handle
            </summary>
            <param name="handle">layer handle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.UnSelectNodes">
            <summary>
            Unselect all nodes
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerLegendScheme(System.Int32,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set layer legend scheme
            </summary>
            <param name="handle"></param>
            <param name="aLS"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerLegendSchemeProj(System.Int32,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set projected layer legend scheme
            </summary>
            <param name="handle"></param>
            <param name="aLS"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerName(System.Int32,System.String)">
            <summary>
            Set layer name
            </summary>
            <param name="handle"></param>
            <param name="name"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerTransparency(System.Int32,System.Int32)">
            <summary>
            Set layer transparency
            </summary>
            <param name="handle"></param>
            <param name="transPerc"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetImageLayerSetTransparencyColor(System.Int32,System.Boolean)">
            <summary>
            Set image layer if set a transparency color
            </summary>
            <param name="handle">layer handle</param>
            <param name="setTransColor">if set transparency color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetImageLayerTransparencyColor(System.Int32,System.Drawing.Color)">
            <summary>
            Set image layer transparency color
            </summary>
            <param name="handle">layer handle</param>
            <param name="transColor">transparency color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerVisible(System.Int32,System.Boolean)">
            <summary>
            Set layer visible
            </summary>
            <param name="handle">layer handle</param>
            <param name="visible">is visible</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerVisible(MeteoInfoC.Layer.MapLayer,System.Boolean)">
            <summary>
            Set layer visible
            </summary>
            <param name="aLayer">a layer</param>
            <param name="visible">is visible</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerExpanded(MeteoInfoC.Layer.VectorLayer,System.Boolean)">
            <summary>
            Set layer expanded
            </summary>
            <param name="aLayer">a layer</param>
            <param name="expanded">is expanded</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerIsMaskout(System.Int32,System.Boolean)">
            <summary>
            Set layer maskout
            </summary>
            <param name="handle">layer handle</param>
            <param name="isMaskout">is maskout</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerShowValue(System.Int32,System.Boolean)">
            <summary>
            Set layer if show value
            </summary>
            <param name="handle"></param>
            <param name="showValue"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayerAvoidCollision(System.Int32,System.Boolean)">
            <summary>
            Set layer avoid collision
            </summary>
            <param name="handle"></param>
            <param name="avoidCollision"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetImageLayerExtent(System.Int32,MeteoInfoC.Global.Extent,MeteoInfoC.Layer.WorldFilePara)">
            <summary>
            Set image layer extent
            </summary>
            <param name="handle"></param>
            <param name="aExtent"></param>
            <param name="aWFP"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.AddNode(MeteoInfoC.Legend.ItemNode)">
            <summary>
            Add a node
            </summary>
            <param name="aNode">node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.InsertNode(System.Int32,MeteoInfoC.Legend.ItemNode)">
            <summary>
            Insert a node
            </summary>
            <param name="idx">index</param>
            <param name="aNode">node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RemoveNode(MeteoInfoC.Legend.ItemNode)">
            <summary>
            Remove a node
            </summary>
            <param name="aNode">node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetExpandedHeight">
            <summary>
            Override GetExpandedHeight method
            </summary>
            <returns>expanded height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetDrawHeight">
            <summary>
            Override GetDrawHeight methods
            </summary>
            <returns>draw height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetGroupByHandle(System.Int32)">
            <summary>
            Get group node by handle
            </summary>
            <param name="handle">handle</param>
            <returns>group node</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetGroupByName(System.String)">
            <summary>
            Get group node by name
            </summary>
            <param name="name">group name</param>
            <returns>group node</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetGroups">
            <summary>
            Get group list
            </summary>
            <returns>group list</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetNewGroupHandle">
            <summary>
            Get new group handle
            </summary>
            <returns>handle</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetLayerNodes">
            <summary>
            Get all layer nodes
            </summary>
            <returns>layer nodes</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.MoveLayerNode(System.Int32,System.Int32)">
            <summary>
            Move layer node
            </summary>
            <param name="lPreIdx">previous index</param>
            <param name="lNewIdx">new index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetLayerNodeByHandle(System.Int32)">
            <summary>
            Get layer node by handle
            </summary>
            <param name="handle">handle</param>
            <returns>layer node</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetLayerNodeByName(System.String)">
            <summary>
            Get layer node by name
            </summary>
            <param name="lName">layer name</param>
            <returns>layer node</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.UpdateLayerNode(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Update layer node
            </summary>
            <param name="aLayer">layer</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.UpdateLayerNode(System.Int32)">
            <summary>
            Update layer node by handle
            </summary>
            <param name="handle">layer handle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.UpdateLayerNodeLegendScheme(System.Int32,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Update layer node legend scheme
            </summary>
            <param name="handle">layer handle</param>
            <param name="aLS">legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.SetLayoutBounds(System.Drawing.Rectangle)">
            <summary>
            Set layout bounds
            </summary>
            <param name="rect">rectangle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.GetNameObject">
            <summary>
            Get name object
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.ExportProjectXML(System.Xml.XmlDocument@,System.Xml.XmlElement,System.String)">
            <summary>
            Export project XML content
            </summary>
            <param name="m_Doc">ref XML document</param>
            <param name="parent">parent XML element</param>
            <param name="projectFilePath">project file path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.ImportProjectXML(System.Xml.XmlElement)">
            <summary>
            Import project XML content
            </summary>
            <param name="parent">parent XML element</param>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.OnLayersUpdated">
            <summary>
            Fires the LayersUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RaiseLayersUndateEvent">
            <summary>
            Raise LayersUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.OnLayoutBoundsChanged">
            <summary>
            Fires the LayoutBoundsChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.RaiseLayoutBoundsChangedEvent">
            <summary>
            Raise LayoutBoundsChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.MapFrame.OnMapViewUpdated">
            <summary>
            Fires the MapViewUpdated event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.VectorBreak">
            <summary>
            Vector break for wind arraw
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.VectorBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.VectorBreak.Zoom">
            <summary>
            Get or set drawing zoom value
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.AlignType">
            <summary>
            Label align type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.AlignType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.AlignType.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.AlignType.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.AlignType.None">
            <summary>
            Not align
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmLegendBreaks">
            <summary>
            Create legend breaks form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendBreaks.#ctor(System.Object,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parent">parent object</param>
            <param name="isUniqueValue">if is unique value legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendBreaks.SetLegendScheme(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set legend scheme
            </summary>
            <param name="aLS"></param>
        </member>
        <member name="F:MeteoInfoC.Legend.frmLegendBreaks.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendBreaks.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendBreaks.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.frmLegendSet">
            <summary>
            Legend set form
            </summary>
            <summary>
            Legend set form
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.frmLegendSet.pCurrenWin">
            <summary>
            Legend set form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.#ctor(System.Boolean,MeteoInfoC.Layer.MapLayer,MeteoInfoC.Legend.LayersLegend)">
            <summary>
            Constructor
            </summary>
            <param name="ifFrmMeteoData"></param>
            <param name="aLayer"></param>
            <param name="aLayersTV"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendScheme(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set legend scheme
            </summary>
            <param name="aLS"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetFrmMeteoData(System.Windows.Forms.Form)">
            <summary>
            Set meteorological data form
            </summary>
            <param name="aFrmMD"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.GetLegendScheme">
            <summary>
            Get legend scheme
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.GetIsApplied">
            <summary>
            Get if applied
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_Color(System.Drawing.Color)">
            <summary>
            Set legend break color
            </summary>
            <param name="aColor"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_OutlineColor(System.Drawing.Color)">
            <summary>
            Set legend break outline color
            </summary>
            <param name="aColor">color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_OutlineSize(System.Single)">
            <summary>
            Set legend break outline size
            </summary>
            <param name="outlineSize">color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_Angle(System.Single)">
            <summary>
            Set legend break angle
            </summary>
            <param name="angle">angle</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_Size(System.Single)">
            <summary>
            Set legend break size
            </summary>
            <param name="aSize">size</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_PointStyle(MeteoInfoC.Drawing.PointStyle)">
            <summary>
            Set legend break point style
            </summary>
            <param name="aPS"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_PolylineStyle(MeteoInfoC.Legend.LineStyles)">
            <summary>
            Set legend break polyline style
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_DrawOutline(System.Boolean)">
            <summary>
            Set legend break if draw outline
            </summary>
            <param name="drawOutLine"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_DrawFill(System.Boolean)">
            <summary>
            Set legend break if draw fill
            </summary>
            <param name="drawFill"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_DrawShape(System.Boolean)">
            <summary>
            Set legend break if draw shape
            </summary>
            <param name="drawShape"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_UsingHatchStyle(System.Boolean)">
            <summary>
            Set legend break if using hatch style
            </summary>
            <param name="usginHatchStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_HatchStyle(System.Drawing.Drawing2D.HatchStyle)">
            <summary>
            Set legend break hatch style
            </summary>
            <param name="hatchStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_MarkerType(MeteoInfoC.Drawing.MarkerType)">
            <summary>
            Set legend break marder type
            </summary>
            <param name="markerType">marker type</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_FontName(System.String)">
            <summary>
            Set legend break font name
            </summary>
            <param name="fontName">font name</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_Image(System.String)">
            <summary>
            Set legend break image path
            </summary>
            <param name="imagePath">image path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_MarkerIndex(System.Int32)">
            <summary>
            Set legend break marker index
            </summary>
            <param name="markerIdx">marker index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_BackColor(System.Drawing.Color)">
            <summary>
            Set legend break if draw fill
            </summary>
            <param name="backColor"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_DrawSymbol(System.Boolean)">
            <summary>
            Set legend break if draw symbol
            </summary>
            <param name="drawSymbol"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_SymbolSize(System.Single)">
            <summary>
            Set legend break symbol size
            </summary>
            <param name="symbolSize"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_SymbolStyle(MeteoInfoC.Drawing.PointStyle)">
            <summary>
            Set legend break symbol size
            </summary>
            <param name="symbolStyle"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_SymbolColor(System.Drawing.Color)">
            <summary>
            Set legend break symbol color
            </summary>
            <param name="symbolColor">symbol color</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.SetLegendBreak_SymbolInterval(System.Int32)">
            <summary>
            Set legend break symbol interval
            </summary>
            <param name="symbolInterval">symbol interval</param>
        </member>
        <member name="F:MeteoInfoC.Legend.frmLegendSet.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Legend.frmLegendSet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.GroupNode">
            <summary>
            Group node
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.GroupNode.GroupHandle">
            <summary>
            Get or set group handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.GroupNode.GroupName">
            <summary>
            Get or set group handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.GroupNode.Layers">
            <summary>
            Get or set layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.GroupNode.CheckStatus">
            <summary>
            Get or set check status
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.GroupNode.MapFrame">
            <summary>
            Get or set map frame
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.AddLayer(MeteoInfoC.Legend.LayerNode)">
            <summary>
            Add layer node
            </summary>
            <param name="aLayer">layer node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.RemoveLayer(MeteoInfoC.Legend.LayerNode)">
            <summary>
            Remove a layer node
            </summary>
            <param name="aLayer">layer node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.InsertLayer(MeteoInfoC.Legend.LayerNode,System.Int32)">
            <summary>
            Insert layer node
            </summary>
            <param name="aLayer">layer node</param>
            <param name="index">index</param>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.GetLayerIndex(MeteoInfoC.Legend.LayerNode)">
            <summary>
            Get layer node index
            </summary>
            <param name="aLayer">layer node</param>
            <returns>index</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.UpdateCheckStatus">
            <summary>
            Update check status
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.SetProperties">
            <summary>
            Set properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.GetExpandedHeight">
            <summary>
            Override GetExpandedHeight method
            </summary>
            <returns>expanded height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.GetDrawHeight">
            <summary>
            Override GetDrawHeight methods
            </summary>
            <returns>draw height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.GroupNode.Clone">
            <summary>
            Clone GroupNode
            </summary>
            <returns>GroupNode</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LayerNode">
            <summary>
            Layer node
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.#ctor(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Constructor
            </summary>
            <param name="aLayer">map layer</param>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.MapFrame">
            <summary>
            Get or set map frame
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.MapLayer">
            <summary>
            Get or set map layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.LayerHandle">
            <summary>
            Get layer handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.GroupHandle">
            <summary>
            Get or set group handle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.LayerType">
            <summary>
            Get layer type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.LegendNodes">
            <summary>
            Get legend nodes
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.ShapeType">
            <summary>
            Get shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.LegendScheme">
            <summary>
            Get legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LayerNode.Checked">
            <summary>
            Set layer visible
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.Update">
            <summary>
            Update properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.UpdateLegendScheme(MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Update legend nodes using a legend scheme
            </summary>
            <param name="aLS">legend scheme</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.GetExpandedHeight">
            <summary>
            Override GetExpandedHeight method
            </summary>
            <returns>expanded height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.GetDrawHeight">
            <summary>
            Override GetDrawHeight methods
            </summary>
            <returns>draw height</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LayerNode.Clone">
            <summary>
            Clone LayerNode
            </summary>
            <returns>LayerNode</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendManage">
            <summary>
            Legend methods manage
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateLegendSchemeFromGridData(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendType,MeteoInfoC.Shape.ShapeTypes)">
            <summary>
            Create legend scheme from grid data
            </summary>
            <param name="aGridData">GridData</param>
            <param name="aLT">legend type</param>
            <param name="aST">shape type</param>
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateLegendSchemeFromGridData(MeteoInfoC.Data.GridData,MeteoInfoC.Legend.LegendType,MeteoInfoC.Shape.ShapeTypes,System.Boolean@)">
            <summary>
            Create legend scheme from grid data
            </summary>
            <param name="aGridData">GridData</param>
            <param name="aLT">legend type</param>
            <param name="aST">shape type</param>
            <param name="hasNoData">ref if has undefine data</param>
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateLegendSchemeFromStationData(MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendType,MeteoInfoC.Shape.ShapeTypes)">
            <summary>
            Create legend scheme from station data
            </summary>
            <param name="stationData">station data</param>
            <param name="aLT">legend type</param>
            <param name="aST">shape type</param>
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateLegendSchemeFromStationData(MeteoInfoC.Data.StationData,MeteoInfoC.Legend.LegendType,MeteoInfoC.Shape.ShapeTypes,System.Boolean@)">
            <summary>
            Create legend scheme from station data
            </summary>
            <param name="stationData">station data</param>
            <param name="aLT">legend type</param>
            <param name="aST">shape type</param>
            <param name="hasNoData">undefine data</param>
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateSingleSymbolLegendScheme(MeteoInfoC.Shape.ShapeTypes,System.Drawing.Color,System.Single)">
            <summary>
            Create single symbol legend scheme
            </summary>
            <param name="aST">shape type</param>
            <param name="aColor">color</param>
            <param name="size">size</param>        
            <returns>legend scheme</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateUniqValueLegendScheme(System.Double[],System.Drawing.Color[],MeteoInfoC.Shape.ShapeTypes,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Create unique value legend scheme
            </summary>
            <param name="CValues"></param>
            <param name="colors"></param>
            <param name="aST"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="hasNodata"></param>
            <param name="unDef"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateUniqValueLegendScheme(System.Collections.Generic.List{System.String},System.Drawing.Color[],MeteoInfoC.Shape.ShapeTypes,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Create unique value legend scheme
            </summary>
            <param name="CValues"></param>
            <param name="colors"></param>
            <param name="aST"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="hasNodata"></param>
            <param name="unDef"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateUniqValueLegendScheme(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Drawing.Color[],MeteoInfoC.Shape.ShapeTypes,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Create unique value legend scheme
            </summary>
            <param name="CValues"></param>
            <param name="captions"></param>
            <param name="colors"></param>
            <param name="aST"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="hasNodata"></param>
            <param name="unDef"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateUniqValueLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Double,System.Double)">
            <summary>
            Create unique value legend scheme from layer
            </summary>
            <param name="aLayer"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateGraduatedLegendScheme(System.Double[],System.Drawing.Color[],MeteoInfoC.Shape.ShapeTypes,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Create Graduated color legend scheme
            </summary>
            <param name="CValues"></param>
            <param name="colors"></param>
            <param name="aST"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="hasNodata"></param>
            <param name="unDef"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.SetContoursAndColors(MeteoInfoC.Legend.LegendScheme,System.Double[]@,System.Drawing.Color[]@)">
            <summary>
            Set contour values and colors
            </summary>
            <param name="aLS"></param>
            <param name="cValues"></param>
            <param name="colors"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateRainBowColors(System.Int32)">
            <summary>
            Create rainbow colors
            </summary>
            <param name="cNum"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.GetRainBowColors_HSL(System.Int32)">
            <summary>
            Get rainbow colors
            </summary>
            <param name="cNum">color number</param>
            <returns>colors</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.GetRainBowColors_HSV(System.Int32)">
            <summary>
            Get rainbow colors
            </summary>
            <param name="cNum">color number</param>
            <returns>colors</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateRandomColors(System.Int32)">
            <summary>
            Create random colors
            </summary>
            <param name="cNum"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateContourValues(System.Double,System.Double)">
            <summary>
            Create contour values by minimum and maximum data
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateColors(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Create colors from start and end color
            </summary>
            <param name="sColor"></param>
            <param name="eColor"></param>
            <param name="cNum"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendManage.CreateContourValuesInterval(System.Double,System.Double,System.Double)">
            <summary>
            Create contour values by interval
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="interval"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendNode">
            <summary>
            Legend TreeNode
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendNode.ShapeType">
            <summary>
            Get or set shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendNode.LegendBreak">
            <summary>
            Get or set legend break
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendNode.Clone">
            <summary>
            Clone
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendScheme">
            <summary>
            Legend scheme
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.FieldName">
            <summary>
            Field name
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.LegendType">
            <summary>
            Legend type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.ShapeType">
            <summary>
            Shape type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.LegendBreaks">
            <summary>
            Break list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.HasNoData">
            <summary>
            If including undefine data
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.MinValue">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.MaxValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendScheme.MissingValue">
            <summary>
            Undefine data
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.#ctor(MeteoInfoC.Shape.ShapeTypes)">
            <summary>
            Constructor
            </summary>
            <param name="aShapeType">shape type</param>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendScheme.BreakNum">
            <summary>
            Get break number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.LegendScheme.VisibleBreakNum">
            <summary>
            Get visible break number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.GetColors">
            <summary>
            Get color list
            </summary>
            <returns>color list</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.GetValues">
            <summary>
            Get values
            </summary>
            <returns>Values</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.IsConsistent(MeteoInfoC.Data.MeteoData.DrawType2D)">
            <summary>
            Judge if shape type is consistent with draw type
            </summary>
            <param name="drawTyp">draw type</param>
            <returns>if consistent</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ExportToXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export to XML document
            </summary>
            <param name="doc">xml document</param>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ExportToXMLFile(System.String)">
            <summary>
            Export to XML file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromXML(System.Xml.XmlNode)">
            <summary>
            Import legend scheme from XML node
            </summary>
            <param name="LSNode">xml node</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromXML(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Import legend scheme from XML node
            </summary>
            <param name="LSNode">xml node</param>
            <param name="keepShape">if keep the legend shape type</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromXMLFile(System.String)">
            <summary>
            Import legend scheme from XML file
            </summary>
            <param name="aFile">file path</param>        
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromXMLFile(System.String,System.Boolean)">
            <summary>
            Import legend scheme from XML file
            </summary>
            <param name="aFile">file path</param>  
            <param name="keepShape">if keep shape type</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromPaletteFile_Unique(System.String)">
            <summary>
            Import legend scheme from an image color palette file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.ImportFromPaletteFile_Graduated(System.String)">
            <summary>
            Import legend scheme from an image color palette file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Legend.LegendScheme.Clone">
            <summary>
            Clone legend scheme
            </summary>
            <returns>legend scheme</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.LegendType">
            <summary>
            Legend scheme type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendType.SingleSymbol">
            <summary>
            Sigle symbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendType.GraduatedColor">
            <summary>
            Graduate color
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendType.UniqueValue">
            <summary>
            Unique value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.LegendType.Graph">
            <summary>
            Graph
            </summary>
        </member>
        <member name="T:MeteoInfoC.Legend.PointBreak">
            <summary>
            Legend scheme break of point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PointBreak._outlineColor">
            <summary>
            Outline color
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PointBreak._size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PointBreak._style">
            <summary>
            Style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PointBreak._drawOutline">
            <summary>
            If draw outline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PointBreak._drawFill">
            <summary>
            If draw fill
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.PointBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.MarkerType">
            <summary>
            Get or set marker type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.FontName">
            <summary>
            Get or set font name for character marker
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.CharIndex">
            <summary>
            Get or set character index
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.ImagePath">
            <summary>
            Get or set image path
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.OutlineColor">
            <summary>
            Get or set outline color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.Size">
            <summary>
            Get or set point size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.Style">
            <summary>
            Get or set point style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.DrawOutline">
            <summary>
            Get or set if draw outline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.DrawFill">
            <summary>
            Get or set if draw fill
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PointBreak.Angle">
            <summary>
            Get or set angle
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.PointBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>custom property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.PointBreak.Clone">
            <summary>
            Override Clone method
            </summary>
            <returns>object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.PointBreak.ExportToXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export to XML document
            </summary>
            <param name="doc">xml document</param>
            <param name="parent">parent xml element</param>
        </member>
        <member name="T:MeteoInfoC.Legend.PolygonBreak">
            <summary>
            Legend scheme break of polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolygonBreak._outlineColor">
            <summary>
            Outline color
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolygonBreak._outlineSize">
            <summary>
            Outline size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolygonBreak._drawOutline">
            <summary>
            If draw outline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolygonBreak._drawFill">
            <summary>
            If draw fill
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolygonBreak._usingHatchStyle">
            <summary>
            If draw polygon
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Legend.PolygonBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.OutlineColor">
            <summary>
            Get or set polygon outline color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.OutlineSize">
            <summary>
            Get or set outline size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.DrawOutline">
            <summary>
            Get or set if draw outline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.DrawFill">
            <summary>
            Get or set if draw fill
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.UsingHatchStyle">
            <summary>
            Get or set if using hatch style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.Style">
            <summary>
            Get or set hatch style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.BackColor">
            <summary>
            Get or set back color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolygonBreak.IsMaskout">
            <summary>
            Get or set if maskout
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.PolygonBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>custom property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.PolygonBreak.Clone">
            <summary>
            Override Clone method
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.PolyLineBreak">
            <summary>
            Legend scheme break of polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolyLineBreak._size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolyLineBreak._style">
            <summary>
            Style
            </summary>
        </member>
        <member name="F:MeteoInfoC.Legend.PolyLineBreak._drawPolyline">
            <summary>
            If draw line
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.PolyLineBreak.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.Size">
            <summary>
            Get or set polyline size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.Style">
            <summary>
            Get or set line dash style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.DrawPolyline">
            <summary>
            Get or set if draw polyline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.DrawSymbol">
            <summary>
            Get or set if draw point symbol
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.SymbolSize">
            <summary>
            Get or set symbol size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.SymbolStyle">
            <summary>
            Get or set symbol style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.SymbolColor">
            <summary>
            Get or set symbol color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.SymbolInterval">
            <summary>
            Get or set symbol interval
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.IsUsingDashStyle">
            <summary>
            Get if is using DashStyle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.PolyLineBreak.DashStyle">
            <summary>
            Get DashStyle
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.PolyLineBreak.GetPropertyObject">
            <summary>
            Get property object
            </summary>
            <returns>custom property object</returns>
        </member>
        <member name="M:MeteoInfoC.Legend.PolyLineBreak.Clone">
            <summary>
            Override Clone method
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Legend.ScrollingControl">
            <summary>
            ScrollingControl that provides autoscroll and custom draw that won't crash mono
            </summary>
        </member>
        <member name="E:MeteoInfoC.Legend.ScrollingControl.Initialized">
            <summary>
            Occurs after the base drawing content has been rendered to the page.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.#ctor">
            <summary>
            Creates a new instance of ScrollingControl
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnVerticalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Occurs when scrolling vertically
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnHorizontalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Occurs when scrolling horizontally
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.ClientToDocument(System.Drawing.Rectangle)">
            <summary>
            Gets a rectangle in document coordinates for hte specified rectangle in client coordinates
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.DocumentToClient(System.Drawing.Rectangle)">
            <summary>
            Translates a rectangle from document coordinates to coordinates relative to the client control
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.ResetScroll">
            <summary>
            Recalculates the size and visibility of the scroll bars based on the current document.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.BackColor">
            <summary>
            Gets or sets the background color to use for this control
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.BackgroundImage">
            <summary>
            
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.ControlRectangle">
            <summary>
            Gets the rectangular region of the control in page coordinates.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.DocumentRectangle">
            <summary>
            Gets or sets the rectangle for the entire content, whether on the page buffer or not.  X and Y for this 
            are always 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.IsInitialized">
            <summary>
            Gets or sets whether or not the page for this control has been drawn.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.HorizontalScrollEnabled">
            <summary>
            Gets or sets a boolean indicating whether or not horizontal scrolling is enabled
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.Page">
            <summary>
            Gets or sets the page image being used as a buffer.  This is useful
            for content changes that need to be made rapidly.  First refresh
            a small region of this page, and then invalidate the client rectangle.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.ResetOnResize">
            <summary>
            Gets or sets a boolean that indicates whether or not the scrolling
            should be reset on every resize or not.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Legend.ScrollingControl.VerticalScrollEnabled">
            <summary>
            Gets or sets a boolean indicating whether the vertical scroll should be permitted
            </summary>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Prevent flicker by preventing this
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            On Paint only paints the specified clip rectangle, but paints
            it from the page buffer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnDrawBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs during custom drawing when erasing things
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnDraw(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Occurs during custom drawing
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.Dispose(System.Boolean)">
            <summary>
            Disposes the unmanaged memory objects and optionally disposes
            the managed memory objects
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnInitialize(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Fires the Initialized event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Legend.ScrollingControl.OnResize(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutElement">
            <summary>
            Layout element abstract class
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.LayoutElement.LocationChanged">
            <summary>
            Occurs afate location changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.LayoutElement.SizeChanged">
            <summary>
            Occurs afte size changed
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Visible">
            <summary>
            Get or set if visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Left">
            <summary>
            Get or set left position
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Top">
            <summary>
            Get or set top position
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Width">
            <summary>
            Get or set width
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Height">
            <summary>
            Get or set height
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Right">
            <summary>
            Get right
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Bottom">
            <summary>
            Get bottom
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Bounds">
            <summary>
            Get bounds rectangle
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.ElementType">
            <summary>
            Get element type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.ForeColor">
            <summary>
            Get or set fore color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.BackColor">
            <summary>
            Get or set back color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Selected">
            <summary>
            Get or set if selected
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.ResizeAbility">
            <summary>
            Get or set resize ability
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutElement.Name">
            <summary>
            Get or set name
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.Paint(System.Drawing.Graphics)">
            <summary>
            Abstract method paint
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Abstract method PaintOnLayout
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.MoveUpdate">
            <summary>
            Virtual move update method
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.ResizeUpdate">
            <summary>
            Virtual resize update method
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.GetPropertyObject">
            <summary>
            Abstract get property object method
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.PageToScreen(System.Single,System.Single,System.Drawing.PointF,System.Single)">
            <summary>
            Page to screen
            </summary>
            <param name="pageX">page X</param>
            <param name="pageY">page Y</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
            <returns>screen point</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.OnLocationChanged">
            <summary>
            Fire the location changed event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutElement.OnSizeChanged">
            <summary>
            Fire the size changed event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutGraphic">
            <summary>
            Layout graphic element
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.#ctor(MeteoInfoC.Shape.Graphic,MeteoInfoC.Layout.MapLayout)">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.#ctor(MeteoInfoC.Shape.Graphic,MeteoInfoC.Layout.MapLayout,MeteoInfoC.Layout.LayoutMap)">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutGraphic.IsTitle">
            <summary>
            Get or set if this is title
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutGraphic.IsPaint">
            <summary>
            Get or set if paint itself
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutGraphic.Graphic">
            <summary>
            Get or set graphic
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutGraphic.SmoothingMode">
            <summary>
            Get or set smoothing mode
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.SetProperties">
            <summary>
            Set properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.SetLabelText(System.String)">
            <summary>
            Set label text if it is a label break
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.SetFont(System.Drawing.Font)">
            <summary>
            Set font if it is a label break
            </summary>
            <param name="aFont">font</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.SetFont(System.String,System.Int32)">
            <summary>
            Set font if it is a label break
            </summary>
            <param name="fontName">font name</param>
            <param name="fontSize">font size</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.UpdateControlSize">
            <summary>
            Update control size
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.VerticeEditUpdate(System.Int32,System.Double,System.Double)">
            <summary>
            Vertice edited update
            </summary>
            <param name="vIdx">vertice index</param>
            <param name="newX">new X</param>
            <param name="newY">new Y</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.MoveUpdate">
            <summary>
            Override move update
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.ResizeUpdate">
            <summary>
            Resize shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.Paint(System.Drawing.Graphics)">
            <summary>
            Override Paint event
            </summary>
            <param name="g">Graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.PaintGraphics(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.OnLocationChanged">
            <summary>
            Override OnLocationChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.OnSizeChanged">
            <summary>
            Override OnSizeChaged
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutGraphic.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutIllustrationMap">
            <summary>
            Layout illustration map
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutIllustrationMap.#ctor(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Constructor
            </summary>
            <param name="aMapFrame"></param>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.LinkedMapView">
            <summary>
            Get or set linded mapview
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.Visible">
            <summary>
            Get or set visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.LonLatExtent">
            <summary>
            Get or set lon/lat extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.MinLon">
            <summary>
            Get or set minimum longitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.MaxLon">
            <summary>
            Get or set maximum longitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.MinLat">
            <summary>
            Get or set minimum latitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutIllustrationMap.MaxLat">
            <summary>
            Get or set maximum latitude
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutIllustrationMap.Paint(System.Drawing.Graphics)">
            <summary>
            Override paint method
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutIllustrationMap.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutIllustrationMap.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="T:MeteoInfoC.Layout.legendPara">
            <summary>
            Legend parameters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.isVertical">
            <summary>
            Is vertical bar legend
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.startPoint">
            <summary>
            Legend start point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.length">
            <summary>
            Legend length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.width">
            <summary>
            Legend width
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.contourValues">
            <summary>
            Legend contour values
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.legendPara.isTriangle">
            <summary>
            If the first and last legend polygons are triangle
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.lPolygon">
            <summary>
            Legend polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.lPolygon.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.lPolygon.isFirst">
            <summary>
            Is first polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.lPolygon.pointList">
            <summary>
            Point list
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.LegendStyles">
            <summary>
            Legend styles
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LegendStyles.Bar_Vertical">
            <summary>
            vertical bar
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LegendStyles.Bar_Horizontal">
            <summary>
            horizontal bar
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LegendStyles.Normal">
            <summary>
            normal
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.LayerUpdateTypes">
            <summary>
            Layer update types
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LayerUpdateTypes.NotUpdate">
            <summary>
            Not update
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LayerUpdateTypes.FirstMeteoLayer">
            <summary>
            First meteorological layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LayerUpdateTypes.LastAddedLayer">
            <summary>
            Last added layer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.LayerUpdateTypes.FirstExpandedLayer">
            <summary>
            First expanded layer
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutLegend">
            <summary>
            Layout legend
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.LayerNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override GetStandardVaulesSupported method
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.LayerNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Override GetStandardValues method
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.#ctor(MeteoInfoC.Layout.MapLayout,MeteoInfoC.Layout.LayoutMap)">
            <summary>
            Constructor
            </summary>
            <param name="mapLayout">map layout</param>
            <param name="layoutMap">layout map</param>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LayoutMap">
            <summary>
            Get layout map
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LegendScheme">
            <summary>
            Get or set legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LegendLayer">
            <summary>
            Get or set legend layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LayerName">
            <summary>
            Get or set legend layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.SmoothingMode">
            <summary>
            Get or set SmoothingMode
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LayerUpdateType">
            <summary>
            Get or set layer update type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.LegendStyle">
            <summary>
            Get or set legend style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.Title">
            <summary>
            Get or set legend title
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.DrawNeatLine">
            <summary>
            Get or set if draw neat line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.NeatLineColor">
            <summary>
            Get or set neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.NeatLineSize">
            <summary>
            Get or set neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.Font">
            <summary>
            Override Font property
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutLegend.ColumnNumber">
            <summary>
            Get or set column number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.PaintGraphics(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.UpdateLegendSize">
            <summary>
            Update legend control size
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.CreateBarLegend(MeteoInfoC.Layout.legendPara)">
            <summary>
            Create bar legend
            </summary>
            <param name="aLegendPara">legend parameter</param>
            <returns>legend polygons</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.Paint(System.Drawing.Graphics)">
            <summary>
            Override paint method
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutLegend.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutMap">
            <summary>
            Layout map
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.LayoutMap.MapViewUpdated">
            <summary>
            Occurs after map view updated
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.#ctor(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Constructor
            </summary>
            <param name="mapFrame">map frame</param>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.MapFrame">
            <summary>
            Get or set map frame
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.BackColor">
            <summary>
            Get or set map view back color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.ForeColor">
            <summary>
            Get or set map view fore color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.Left">
            <summary>
            Get or set left
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.Top">
            <summary>
            Get or set top
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.Width">
            <summary>
            Get or set width
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.Height">
            <summary>
            Get or set height
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.Bounds">
            <summary>
            Get or set bounds
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.DrawNeatLine">
            <summary>
            Get or set map view neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.NeatLineColor">
            <summary>
            Get or set map view neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.NeatLineSize">
            <summary>
            Get or set map view neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridLineColor">
            <summary>
            Get or set gird line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridLineSize">
            <summary>
            Get or set grid line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridLineStyle">
            <summary>
            Get or set grid line style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.DrawGridLabel">
            <summary>
            Get or set if draw grid labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.InsideTickLine">
            <summary>
            Get or set if draw grid tick line inside
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.TickLineLength">
            <summary>
            Get or set grid tick line length
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridLabelShift">
            <summary>
            Get or set grid label shift
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridLabelPosition">
            <summary>
            Get or set grid label position
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.DrawGridLine">
            <summary>
            Get or set if draw grid line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.DrawGridTickLine">
            <summary>
            Get or set if draw grid line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.DrawDegreeSymbol">
            <summary>
            Get or set if draw degree symbol
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridFont">
            <summary>
            Get or set grid lable font
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridXDelt">
            <summary>
            Get or set grid x/longitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridYDelt">
            <summary>
            Get or set grid y/latitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridXOrigin">
            <summary>
            Get or set grid x/longitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutMap.GridYOrigin">
            <summary>
            Get or set grid y/latitude delt
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.Paint(System.Drawing.Graphics)">
            <summary>
            Override paint method
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.ZoomToExtentLonLatEx(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to exactly lon/lat extent
            </summary>
            <param name="aExtent">extent</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.ZoomToExtnetEx(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to exactly extent
            </summary>
            <param name="aExtent">Extent</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.OnMapViewUpdated">
            <summary>
            Fire MapViewUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutMap.FireMapViewUpdatedEvent">
            <summary>
            Raise MapViewUpdated event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutNorthArrow">
            <summary>
            Layout north arrow
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.#ctor(MeteoInfoC.Layout.LayoutMap)">
            <summary>
            Constructor
            </summary>
            <param name="layoutMap">Layout map</param>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutNorthArrow.LayoutMap">
            <summary>
            Get or set layout map
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutNorthArrow.DrawNeatLine">
            <summary>
            Get or set if draw neat line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutNorthArrow.NeatLineColor">
            <summary>
            Get or set neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutNorthArrow.NeatLineSize">
            <summary>
            Get or set neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutNorthArrow.Angle">
            <summary>
            Get or set angle
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.Paint(System.Drawing.Graphics)">
            <summary>
            Override paint method
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutNorthArrow.PaintGraphics(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="T:MeteoInfoC.Layout.LayoutScaleBar">
            <summary>
            Layout scale bar
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.#ctor(MeteoInfoC.Layout.LayoutMap)">
            <summary>
            Constructor
            </summary>
            <param name="layoutMap">Layout map</param>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.LayoutMap">
            <summary>
            Get or set layout map
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.ScaleBarType">
            <summary>
            Get or set scale bar type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.DrawNeatLine">
            <summary>
            Get or set if draw neat line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.NeatLineColor">
            <summary>
            Get or set neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.NeatLineSize">
            <summary>
            Get or set neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.Font">
            <summary>
            Get or set label text font
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.BreakNumber">
            <summary>
            Get or set break number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.LayoutScaleBar.DrawScaleText">
            <summary>
            Get or set if draw scale text
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.GetPropertyObject">
            <summary>
            Override get property object methods
            </summary>
            <returns>property object</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.Paint(System.Drawing.Graphics)">
            <summary>
            Override paint method
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.PaintOnLayout(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Override PaintOnLayout method
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.PaintGraphics(System.Drawing.Graphics,System.Drawing.PointF,System.Single)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
            <param name="pageLocation">page location</param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Layout.LayoutScaleBar.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="T:MeteoInfoC.Layout.MapLayout">
            <summary>
            Map layout control
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.MapLayout.ElementSeleted">
            <summary>
            Occurs after one of the elements is selected.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.MapLayout.ZoomChanged">
            <summary>
            Occurs after zoom is changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.MapLayout.ActiveMapFrameChanged">
            <summary>
            Occurs after active map frame is changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Layout.MapLayout.MapFramesUpdated">
            <summary>
            Occurs after map frames updated
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.#ctor">
            <summary>
            Map layout constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.SmoothingMode">
            <summary>
            Get or set smoothing mode of GDI+
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PageForeColor">
            <summary>
            Get or set fore color of map view
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PageBackColor">
            <summary>
            Get or set back color of map layout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.MapFrames">
            <summary>
            Get or set map frames
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.LayoutElements">
            <summary>
            Get or set layout elements
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.ActiveMapFrame">
            <summary>
            Get active map frame
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.HasLegendElement">
            <summary>
            Get if has legend element
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.LayoutMaps">
            <summary>
            Get layout maps
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.ActiveLayoutMap">
            <summary>
            Get active layout map
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.SelectedElements">
            <summary>
            Get selected elements
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PageBounds">
            <summary>
            Get or set page bounds
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PageLocation">
            <summary>
            Get or set page location
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PrinterSetting">
            <summary>
            Get or set printer setting
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PaperSize">
            <summary>
            Get or set paper size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.Landscape">
            <summary>
            Get or set landscape
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.MouseMode">
            <summary>
            Get or set mouse mode
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.AutoResize">
            <summary>
            Get or set if autometic resize
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.Zoom">
            <summary>
            Get or set zoom
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.DefPointBreak">
            <summary>
            Get or set default point break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.DefLabelBreak">
            <summary>
            Get or set default lable break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.DefPolylineBreak">
            <summary>
            Get or set default polyline break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.DefPolygonBreak">
            <summary>
            Get or set default polygon break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.MeasurementForm">
            <summary>
            Get or set measurement form
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PaperWidth">
            <summary>
            Gets the width of the paper in 1/100 of an inch
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.MapLayout.PaperHeight">
            <summary>
            Gets the heigh of the paper in 1/100 of an inch
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.UpdateMapFrames(System.Collections.Generic.List{MeteoInfoC.Legend.MapFrame})">
            <summary>
            Update map frames
            </summary>
            <param name="mapFrames">Map frames</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.UpdateMapFrameOrder">
            <summary>
            Update the order of the map frames
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddElement(MeteoInfoC.Layout.LayoutElement)">
            <summary>
            Add a layout element
            </summary>
            <param name="aElement">layout element</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.RemoveElement(MeteoInfoC.Layout.LayoutElement)">
            <summary>
            Remove a layout element
            </summary>
            <param name="aElement">layout element</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddGraphic(MeteoInfoC.Shape.Graphic)">
            <summary>
            Add a graphic
            </summary>
            <param name="aGraphic">graphic</param>
            <returns>layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddText(System.String,System.Int32,System.Int32)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddText(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <param name="fontSize">font size</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddText(System.String,System.Int32,System.Int32,System.String,System.Single)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <param name="fontName">font name</param>
            <param name="fontSize">font size</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddPoint(System.Int32,System.Int32)">
            <summary>
            Add a point graphic
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <returns>point layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddPoint(System.Int32,System.Int32,MeteoInfoC.Legend.PointBreak)">
            <summary>
            Add a point graphic
            </summary>
            <param name="x">x coordinate</param>
            <param name="y">y coordinate</param>
            <param name="aPB">point break</param>
            <returns>point layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddWindArrow(System.Int32,System.Int32)">
            <summary>
            Add a wind arrow graphic
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Wind arrow layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetGraphics">
            <summary>
            Get layout graphic list
            </summary>
            <returns>layout graphic list</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetTexts">
            <summary>
            Get text graphic list
            </summary>
            <returns>text graphic list</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetText(System.String)">
            <summary>
            Get a text graphic by text string
            </summary>
            <param name="text">text string</param>
            <returns>text graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddLegend(System.Int32,System.Int32)">
            <summary>
            Add a layout legend
            </summary>
            <param name="left">left</param>
            <param name="top">top</param>
            <returns>layout legend</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetLegends">
            <summary>
            Get layout legend list
            </summary>
            <returns>layout legend list</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddScaleBar(System.Int32,System.Int32)">
            <summary>
            Add a layout scale bar
            </summary>
            <param name="left">left</param>
            <param name="top">top</param>
            <returns>layout scale bar</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddNorthArrow(System.Int32,System.Int32)">
            <summary>
            Add a layout north arrow
            </summary>
            <param name="left">left</param>
            <param name="top">top</param>
            <returns>layout north arrow</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.AddMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Add a map frame
            </summary>
            <param name="mapFrame">The map frame</param>
            <returns>The layout map</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.RemoveMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Remove a map frame
            </summary>
            <param name="mapFrame">The map frame</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetLayoutMap(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Get a layout map by map frame
            </summary>
            <param name="mapFrame">The map frame</param>
            <returns>The layout map</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetLayoutMap(System.String)">
            <summary>
            Get layout map by name
            </summary>
            <param name="name">The name</param>
            <returns>The layout map</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.GetLayoutMap(System.Drawing.Point)">
            <summary>
            Get layout map by a point
            </summary>
            <param name="aPoint">The point</param>
            <returns>The layout map</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.SetActiveMapFrame(MeteoInfoC.Legend.MapFrame)">
            <summary>
            Set a map frame as active
            </summary>
            <param name="mapFrame">map frame</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.SetProperties">
            <summary>
            Set properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.SetPaperSize(System.Int32,System.Int32)">
            <summary>
            Set paper size
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ExportToPicture(System.String)">
            <summary>
            Export to picture
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ExportToPicture(System.String,System.Single)">
            <summary>
            Export to picture
            </summary>
            <param name="aFile">file path</param>
            <param name="resolution">Resolution with DPI</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.IntersectElementEdge(System.Drawing.RectangleF,System.Drawing.PointF,System.Single)">
            <summary>
            Calculates which edge of a rectangle the point intersects with, within a certain limit
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ScreenToPaper(System.Drawing.PointF)">
            <summary>
            Converts a point in screen coordinants to paper coordinants in 1/100 of an inch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ScreenToPaper(System.Single,System.Single)">
            <summary>
            Converts a point in screen coordinants to paper coordinants in 1/100 of an inch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ScreenToPaper(System.Drawing.RectangleF)">
            <summary>
            Converts a rectangle in screen coordinants to paper coordiants in 1/100 of an inch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ScreenToPaper(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts a rectangle in screen coordinants to paper coordiants in 1/100 of an inch
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaperToScreen(System.Drawing.PointF)">
            <summary>
            Converts between a point in paper coordinants in 1/100th of an inch to screen coordinants
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaperToScreen(System.Single,System.Single)">
            <summary>
            Converts between a point in paper coordinants in 1/100th of an inch to screen coordinants
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaperToScreen(System.Drawing.RectangleF)">
            <summary>
            Converts between a rectangle in paper coordinants in 1/100th of an inch to screen coordinants
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaperToScreen(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Converts a rectangle in paper coordiants in 1/100 of an inch to screen coordinants
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PageToScreen(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="pageX"></param>
            <param name="pageY"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ScreenToPage(System.Int32,System.Int32)">
            <summary>
            Screen to page coordinates
            </summary>
            <param name="screenX">screen x</param>
            <param name="screenY">screen y</param>
            <returns>page position</returns>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.SaveXMLFile(System.String)">
            <summary>
            Save XML file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.LoadXMLFile(System.String)">
            <summary>
            Load XML file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ExportProjectXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export project XML content
            </summary>
            <param name="m_Doc">XML document</param>
            <param name="parent">parent XML element</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.ImportProjectXML(System.Xml.XmlElement)">
            <summary>
            Import project XML content
            </summary>
            <param name="parent">parent XML element</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaintGraphics">
            <summary>
            Paint graphics
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaintGraphicsWithoutBound">
            <summary>
            Paint graphics
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaintGraphicsOnLayout(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaintBackground
            </summary>
            <param name="e">PaintEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnResize(System.EventArgs)">
            <summary>
            On resize
            </summary>
            <param name="e">eventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDown event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseMove event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseUp event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseDoubleClick event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Override OnKeyDown event
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.vScrollBar_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            This fires when the vscrollbar is moved
            </summary>
            <param name="sender">sender</param>
            <param name="e">ScrollEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.hScrollBar_Scroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            This fires when the hscrollbar is moved
            </summary>
            <param name="sender">sender</param>
            <param name="e">ScrollEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnElementSeleted">
            <summary>
            Fire the ElementSelected event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnZoomChanged">
            <summary>
            Fire the ZoomChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnActiveMapFrameChanged">
            <summary>
            Fires the ActiveMapFrameChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.MapLayout.OnMapFramesUpdated">
            <summary>
            Fire the MapFramesUpdated event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.frmPageSetup">
            <summary>
            Page setup form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.frmPageSetup.#ctor(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.frmPageSetup.#ctor(System.Drawing.Printing.PaperSize,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.frmPageSetup.PaperSizeV">
            <summary>
            Get paper size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Layout.frmPageSetup.Landscape">
            <summary>
            Get landscape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.frmPageSetup.GetPrinterSetting">
            <summary>
            Get printer setting
            </summary>
            <returns>printer setting</returns>
        </member>
        <member name="F:MeteoInfoC.Layout.frmPageSetup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Layout.frmPageSetup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Layout.frmPageSetup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.MouseMode">
            <summary>
            An enumeration that defines the Mouses current behavior
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Default">
            <summary>
            The cursor is currently in default mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Select">
            <summary>
            The cursor is currently in select mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.CreateSelection">
            <summary>
            The cursor is currently being used to create a new selection
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.MoveSelection">
            <summary>
            The cursor is currently is move selection mode
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.ResizeSelected">
            <summary>
            The cursor is in resize mode because its over the edge of a selected item
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.InsertNewElement">
            <summary>
            When in this mode the user can click on the map select an area and an element is inserted at that spot
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.StartInsertNewElement">
            <summary>
            In this mode a cross hair is shown letting the user create a new Insert rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.StartPanMap">
            <summary>
            Puts the mouse into a mode that allows map panning
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.PanMap">
            <summary>
            The mouse is actually panning a map
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Point">
            <summary>
            New point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Label">
            <summary>
            New label
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Polyline">
            <summary>
            New polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Freehand">
            <summary>
            New freehand
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Curve">
            <summary>
            New curve
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_CurvePolygon">
            <summary>
            New curve polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Polygon">
            <summary>
            New polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Rectangle">
            <summary>
            New rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Ellipse">
            <summary>
            New ellipse
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.New_Circle">
            <summary>
            New circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.EditVertices">
            <summary>
            Edit vertices of polyline or polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.InEditingVertices">
            <summary>
            In editing vertices status
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_ZoomIn">
            <summary>
            Map zoom in
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_ZoomOut">
            <summary>
            Map zoom out
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_Pan">
            <summary>
            Map pan
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_Identifer">
            <summary>
            Map identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_SelectFeatures_Rectangle">
            <summary>
            Map select Features by rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_SelectFeatures_Polygon">
            <summary>
            Map select features by polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_SelectFeatures_Lasso">
            <summary>
            Map select features by lasso
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_SelectFeatures_Circle">
            <summary>
            Map select features by circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.MouseMode.Map_Measurement">
            <summary>
            Map measurement
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.Edge">
            <summary>
            Enumerates all the possible resize direction
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.TopLeft">
            <summary>
            Top left
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.TopRight">
            <summary>
            Top right
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.BottomRight">
            <summary>
            Bottom right
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.BottomLeft">
            <summary>
            Bottom left
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.Edge.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.ElementType">
            <summary>
            Layout element type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutMap">
            <summary>
            Layout map element
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutIllustration">
            <summary>
            Layout illustration element
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutLegend">
            <summary>
            Layout legend element
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutGraphic">
            <summary>
            Layout grahic element
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutScaleBar">
            <summary>
            Layout scale bar
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ElementType.LayoutNorthArraw">
            <summary>
            Layout north arraw
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.ResizeAbility">
            <summary>
            Resize ability enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ResizeAbility.None">
            <summary>
            Can not be resized
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ResizeAbility.SameWidthHeight">
            <summary>
            Keep same width and heigh during resizing
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ResizeAbility.ResizeAll">
            <summary>
            No limitation resize ability
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.ScaleBarUnits">
            <summary>
            Scale bar units
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Kilometers">
            <summary>
            Kilometers
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Meters">
            <summary>
            Meters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Centimeters">
            <summary>
            Centimeters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Millimeters">
            <summary>
            Millimeters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Miles">
            <summary>
            Miles
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Yards">
            <summary>
            Yards
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Feet">
            <summary>
            Feet
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarUnits.Inches">
            <summary>
            Inches
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.ScaleBarTypes">
            <summary>
            Scale bar type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarTypes.ScaleLine1">
            <summary>
            Scale line1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarTypes.ScaleLine2">
            <summary>
            Scale line 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.ScaleBarTypes.AlternatingBar">
            <summary>
            Alternating scale bar
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.NorthArrowTypes">
            <summary>
            North arrow type enum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.NorthArrowTypes.NorthArrow1">
            <summary>
            North arrow 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Layout.NorthArrowTypes.NorthArrow2">
            <summary>
            North arrow 2
            </summary>
        </member>
        <member name="T:MeteoInfoC.Layout.GridLine">
            <summary>
            Grid line
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.frmIdentifer">
            <summary>
            Identifer form for vector layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentifer.#ctor(MeteoInfoC.Map.MapView)">
            <summary>
            Constructor
            </summary>     
            <param name="mapView">parent MapView</param>
        </member>
        <member name="P:MeteoInfoC.Map.frmIdentifer.MapView">
            <summary>
            Get or set map view
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.frmIdentifer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentifer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentifer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.frmIdentiferGrid">
            <summary>
            Indentifer form fro grid layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentiferGrid.#ctor">
            <summary>
            Constructor
            </summary>       
        </member>
        <member name="F:MeteoInfoC.Map.frmIdentiferGrid.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentiferGrid.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.Map.frmIdentiferGrid.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.GridLabel">
            <summary>
            Grid line label
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.GridLabel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.LabDirection">
            <summary>
            Get or set label direction
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.LabString">
            <summary>
            Get or set label string
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.LabPoint">
            <summary>
            Get or set label point
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.IsLon">
            <summary>
            Get or set if is longitude
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.IsBorder">
            <summary>
            Get or set if is border
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.GridLabel.Value">
            <summary>
            Get or set value
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.IMapView">
            <summary>
            MapView interface
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.IMapView.LayerSet">
            <summary>
            Layers
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.MapExtentSet">
            <summary>
            Map extent and X/y scale set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>       
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.MinX">
            <summary>
            Get or set minimum X
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.MaxX">
            <summary>
            Get or set maximum X
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.MinY">
            <summary>
            Get or set minimum y
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.MaxY">
            <summary>
            Get or set maximum y
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.ScaleX">
            <summary>
            Get or set X scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.ScaleY">
            <summary>
            Get or set y scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapExtentSet.XYScaleFactor">
            <summary>
            Get or set X/Y scale factor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.SetCoordinateGeoMap(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set map screen parameters for geological map
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="isLonLatMap"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.SetCoordinateMap(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Set map screen parameters for normal map
            </summary>
            <param name="lonMin"></param>
            <param name="lonMax"></param>
            <param name="latMin"></param>
            <param name="latMax"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.ProjToScreen(System.Double,System.Double,System.Single@,System.Single@,System.Double,MeteoInfoC.Map.MapExtentSet)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX"></param>
            <param name="projY"></param>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="LonShift"></param>
            <param name="aLLSS"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.ScreenToProj(System.Double@,System.Double@,System.Double,System.Double,MeteoInfoC.Map.MapExtentSet)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX"></param>
            <param name="projY"></param>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="aLLSS"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapExtentSet.Clone">
            <summary>
            Clone
            </summary>
            <returns>map extent set</returns>
        </member>
        <member name="T:MeteoInfoC.Map.MapProperty">
            <summary>
            Set map property
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MapProperty.MapControl">
            <summary>
            MapView object
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapProperty.#ctor(MeteoInfoC.Map.MapView)">
            <summary>
            Constructor
            </summary>
            <param name="aMapView"></param>
        </member>
        <member name="P:MeteoInfoC.Map.MapProperty.SmoothingMode">
            <summary>
            Get or set smoothing mode of GDI+
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapProperty.ForeColor">
            <summary>
            Get or set fore color of map view
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapProperty.BackColor">
            <summary>
            Get or set back color of map region
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.LayerNameConverter">
            <summary>
            Layer name converter
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.LayerNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get standard values supported
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.LayerNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Get standard values
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Map.MaskOut">
            <summary>
            Mask out the certain region
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MaskOut.m_MapControl">
            <summary>
            MapView object
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MaskOut.#ctor(MeteoInfoC.Map.MapView)">
            <summary>
            Constructor
            </summary>
            <param name="aMapView"></param>
        </member>
        <member name="P:MeteoInfoC.Map.MaskOut.PolygonMapLayerList">
            <summary>
            Get or set polygon map layer list
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MaskOut.SetMaskLayer">
            <summary>
            Get or set if mask out
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MaskOut.MaskLayer">
            <summary>
            Get or set mask layer name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MaskOut.Shapes">
            <summary>
            Get or set mask shapes
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.MouseTools">
            <summary>
            Mouse tools
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.Zoom_In">
            <summary>
            Zoom in
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.Zoom_Out">
            <summary>
            Zoom out
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.Identifer">
            <summary>
            Identifer
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.SelectElements">
            <summary>
            Select Elements
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.MoveSelection">
            <summary>
            Move selection
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.ResizeSelection">
            <summary>
            Resize selection
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.CreateSelection">
            <summary>
            Create selection
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.SelectFeatures_Rectangle">
            <summary>
            Select Features by rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.SelectFeatures_Polygon">
            <summary>
            Select Features by polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.SelectFeatures_Lasso">
            <summary>
            Select Features by lasso
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.SelectFeatures_Circle">
            <summary>
            Select Features by circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Point">
            <summary>
            New point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Label">
            <summary>
            New Lable
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Polyline">
            <summary>
            New polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Freehand">
            <summary>
            New freehand
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Curve">
            <summary>
            New curve
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_CurvePolygon">
            <summary>
            New curve polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Polygon">
            <summary>
            New polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Rectangle">
            <summary>
            New rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Ellipse">
            <summary>
            New ellipse
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.New_Circle">
            <summary>
            New circle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.EditVertices">
            <summary>
            Edit vertices of polyline or polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.InEditingVertices">
            <summary>
            Is editing vertices
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.Measurement">
            <summary>
            Measurement
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MouseTools.None">
            <summary>
            None
            </summary>        
        </member>
        <member name="T:MeteoInfoC.Map.ProjectionSet">
            <summary>
            Projection set
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.ProjectionSet.ProjectionChanged">
            <summary>
            Occurs after projection changed
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.ProjectionSet.IsLonLatMap">
            <summary>
            Get if the map is lon/lat
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.ProjectionSet.ProjInfo">
            <summary>
            Get or set projection info
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.ProjectionSet.ProjStr">
            <summary>
            Get or set projection string
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.ProjectionSet.RefLon">
            <summary>
            Get or set reference longitude as central meridian
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.ProjectionSet.RefCutLon">
            <summary>
            Get or set reference cut longitude which is used in projection
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.GetProjectedExtentFromLonLat(MeteoInfoC.Map.MapExtentSet)">
            <summary>
            Get projected extent from Lon/Lat
            </summary>
            <param name="aLLSS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.GetProjectedExtentFromLonLat(MeteoInfoC.Global.Extent)">
            <summary>
            Get projected extent from Lon/Lat
            </summary>
            <param name="sExtent">lon/lat extent</param>
            <returns>projected extent</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.GetLonLatExtent(MeteoInfoC.Global.Extent)">
            <summary>
            Get longitude/latitude extent from a projected extent
            </summary>
            <param name="sExtent">projected extent</param>
            <returns>longitude/latitude extent</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectAngle_Proj4(System.Double,System.Double[],System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project angle
            </summary>
            <param name="oAngle"></param>
            <param name="fromP1"></param>
            <param name="toP1"></param>
            <param name="fromProj"></param>
            <param name="toProj"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayerAngle(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project layer angle
            </summary>
            <param name="oLayer"></param>
            <param name="fromProj"></param>
            <param name="toProj"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayer(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project vector layer
            </summary>
            <param name="oLayer">the layer</param>
            <param name="toProj">to projection</param>
            <returns>projected vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayer(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.Projections.ProjectionInfo,System.Boolean)">
            <summary>
            Project vector layer
            </summary>
            <param name="oLayer">the layer</param>
            <param name="toProj">to projection</param>
            <param name="projectLabels">if project labels</param>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayer(MeteoInfoC.Layer.RasterLayer,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project raster layer
            </summary>
            <param name="oLayer">the layer</param>
            <param name="toProj">to projection</param>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectPolygonShape(MeteoInfoC.Shape.PolygonShape,MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Porject polygon shape
            </summary>
            <param name="aPGS">a polygon shape</param>
            <param name="fromProj">from projection</param>
            <param name="toProj">to projection</param>
            <returns>projected polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectWindLayer(MeteoInfoC.Layer.VectorLayer,MeteoInfoC.Projections.ProjectionInfo,System.Boolean)">
            <summary>
            Project layer
            </summary>
            <param name="oLayer">Old layer</param>
            <param name="toProj">to projection info</param>
            <param name="IfReprojectAngle">if reproject wind angle</param>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayers(MeteoInfoC.Map.MapView,MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Project layers
            </summary>
            <param name="aMapView">map view</param>
            <param name="toProj">To projection</param>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.ProjectLayers(MeteoInfoC.Map.MapView,MeteoInfoC.Projections.ProjectionInfo,System.Boolean)">
            <summary>
            Project layers
            </summary>
            <param name="aMapView">map view</param>
            <param name="toProj">To projection</param>
            <param name="isUpdateView">if paint mapview</param>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.CutPolyLineShapeLon(System.Double,MeteoInfoC.Shape.PolylineShape)">
            <summary>
            Cut polyline shape by longitude
            </summary>
            <param name="lon"></param>
            <param name="aPLS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.CutPolyLineLon(System.Double,MeteoInfoC.Shape.PolylineShape)">
            <summary>
            Cut polyline by a longitude
            </summary>
            <param name="lon"></param>
            <param name="aPLS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.CutPolygonShapeLon(System.Double,MeteoInfoC.Shape.PolygonShape)">
            <summary>
            Cut polygon shape by longitude
            </summary>
            <param name="lon">longitude</param>
            <param name="aPGS">polygon shape</param>
            <returns>polygon shape list</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.CutPolygonLon(System.Double,MeteoInfoC.Shape.PolygonShape)">
            <summary>
            Cut polygon by a longitude
            </summary>
            <param name="lon"></param>
            <param name="aPGS"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.GenerateLonLatLayer">
            <summary>
            Generate Lon/Lat layer
            </summary>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.ProjectionSet.OnProjectionChanged">
            <summary>
            Fires ProjectionChangded event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.MapView">
            <summary>
            Map view control
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.ViewExtentChanged">
            <summary>
            Occurs after view extent changed.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.LayersUpdated">
            <summary>
            Occurs after layers updated.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.MapViewRedrawed">
            <summary>
            Occurs after paint layers
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.RenderChanged">
            <summary>
            Occurs after back color or layer legend render changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.GraphicSeleted">
            <summary>
            Occurs after one of the graphic is selected.
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.ProjectionChanged">
            <summary>
            Occurs after projection changed
            </summary>
        </member>
        <member name="E:MeteoInfoC.Map.MapView.ShapeSelected">
            <summary>
            Occurs after some shapes are selected
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MapView._frmIdentifer">
            <summary>
            Identifer form
            </summary>
        </member>
        <member name="F:MeteoInfoC.Map.MapView._frmIdentiferGrid">
            <summary>
            Identifer form for grid layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.SmoothingMode">
            <summary>
            Get or set smoothing mode of GDI+
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.PointSmoothingMode">
            <summary>
            Get or set smoothing mode of GDI+
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.HighSpeedWheelZoom">
            <summary>
            Get or set if using high speed zoom - zoom with image
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.ForeColor">
            <summary>
            Get or set fore color of map view
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.BackColor">
            <summary>
            Get or set back color of map region
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.XYScaleFactor">
            <summary>
            Get or set X/Y scale factor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.MultiGlobalDraw">
            <summary>
            Get or set if draw muti global extents - only validate with lon/lat projection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.MapBitMap">
            <summary>
            Get map bitmap
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.LastAddedLayer">
            <summary>
            Get last added layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.Extent">
            <summary>
            Get or set the whole extent of all layers
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.ViewExtent">
            <summary>
            Get or set MapView extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DrawExtent">
            <summary>
            Get draw extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.XScale">
            <summary>
            Get x scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.YScale">
            <summary>
            Get y scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.IsGeoMap">
            <summary>
            Get or set if the map view is for geographical map
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.Projection">
            <summary>
            Get or set projection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.LayerSet">
            <summary>
            Get or set layer set
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.Layers">
            <summary>
            Get layers
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.SelectedLayer">
            <summary>
            Selected layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.SelectColor">
            <summary>
            Get or set select color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.MouseTool">
            <summary>
            Get or set mouse tool
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.XGridStrs">
            <summary>
            Get or set X grid labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.YGridStrs">
            <summary>
            Get or set y grid labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.XGridPosLabel">
            <summary>
            Get X grid position points and labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.YGridPosLabel">
            <summary>
            Get y grid position points and labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridLabels">
            <summary>
            Get grid line labels
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.LonLatLayer">
            <summary>
            Get or set longitude/latitude layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.LonLatProjLayer">
            <summary>
            Get or set projected longitude/latitude layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.MaskOut">
            <summary>
            Get or set mask out layer
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.LockViewUpdate">
            <summary>
            Get or set if lock view from update
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DrawNeatLine">
            <summary>
            Get or set if draw neat line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.NeatLineColor">
            <summary>
            Get or set neat line color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.NeatLineSize">
            <summary>
            Get or set neat line size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DrawGridTickLine">
            <summary>
            Get or set if draw grid or tick line
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridLineColor">
            <summary>
            Get or set gird line color
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridLineSize">
            <summary>
            Get or set grid line size
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridLineStyle">
            <summary>
            Get or set grid line style
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DrawGridLine">
            <summary>
            Get or set if draw grid line
            </summary>        
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridXDelt">
            <summary>
            Get or set grid x/longitude delt 
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridYDelt">
            <summary>
            Get or set grid y/latitude delt
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridXOrigin">
            <summary>
            Get or set grid x/longitude origin
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GridYOrigin">
            <summary>
            Get or set grid y/latitude origin
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.IsLayoutMap">
            <summary>
            Get or set if the MapView is in a Layout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.IsSelectedInLayout">
            <summary>
            Get or set if the control is selected in layout
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.IsPaint">
            <summary>
            Get or set if paint itself
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.GraphicCollection">
            <summary>
            Get graphic collection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.SelectedGraphics">
            <summary>
            Get selected graphic collection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DefPointBreak">
            <summary>
            Get or set default point break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DefLabelBreak">
            <summary>
            Get or set default lable break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DefPolylineBreak">
            <summary>
            Get or set default polyline break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DefPolygonBreak">
            <summary>
            Get or set default polygon break
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.DrawIdentiferShape">
            <summary>
            Get or set if draw identifer shape
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.MapView.MeasurementForm">
            <summary>
            Get or set measurement form
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetProperties">
            <summary>
            Set properties
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.Clone">
            <summary>
            Clone map view
            </summary>
            <returns>map view</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.UpdateMapView(MeteoInfoC.Map.MapView)">
            <summary>
            Update map view
            </summary>
            <param name="aMapView">a map view</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetGraphics(MeteoInfoC.Shape.GraphicCollection)">
            <summary>
            Set graphics
            </summary>
            <param name="aGCollection">graphic collection</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjectLayers(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Projection layers
            </summary>
            <param name="toProj">to projection info</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjectLayers(MeteoInfoC.Projections.ProjectionInfo,System.Boolean)">
            <summary>
            Projection layers
            </summary>
            <param name="toProj">to projection info</param>
            <param name="isUpdateView">if paint mapview</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjToScreen(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>       
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjToScreen(System.Double,System.Double,System.Double@,System.Double@,System.Double)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>
            <param name="LonShift">longitude shift</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjToScreen(System.Double,System.Double,System.Single@,System.Single@,System.Double)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>
            <param name="LonShift">longitude shift</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ProjToScreen(System.Double,System.Double,System.Single@,System.Single@)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>            
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LonLatToScreen(System.Double,System.Double,System.Single@,System.Single@)">
            <summary>
            Longitude/Latitude convert to screen X/Y
            </summary>
            <param name="lon">longitude</param>
            <param name="lat">latitude</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ScreenToProj(System.Double@,System.Double@,System.Double,System.Double)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ScreenToProj(System.Double@,System.Double@,System.Double,System.Double,System.Double)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>    
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ScreenToProj(System.Single@,System.Single@,System.Single,System.Single)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ScreenToProj(System.Single@,System.Single@,System.Single,System.Single,System.Double)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX">projection X</param>
            <param name="projY">projection Y</param>
            <param name="screenX">screen X</param>
            <param name="screenY">screen Y</param>
            <param name="LonShift">Longitude shift</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLonShift(MeteoInfoC.Global.Extent)">
            <summary>
            Get longitude shift
            </summary>
            <param name="aExtent">extent</param>
            <returns>longitude shift</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLonShift(System.Double)">
            <summary>
            Get longitude shift
            </summary>
            <param name="lon">Longitude</param>        
            <returns>longitude shift</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RefreshXYScale">
            <summary>
            Refresh X/Y scale
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RefreshXYScale(System.Int32,System.Int32)">
            <summary>
            Refresh X/Y scale
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentScreen(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to extent by screen coordinate
            </summary>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentScreen(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to extent by screen coordinate
            </summary>
            <param name="minX"></param>
            <param name="maxX"></param>
            <param name="minY"></param>
            <param name="maxY"></param>
            <param name="zoom">zoom</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtent(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to extent
            </summary>
            <param name="aExtent">extent</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentLonLat(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to lon/lat extent
            </summary>
            <param name="minX">mininum X</param>
            <param name="maxX">maxinum X</param>
            <param name="minY">mininum Y</param>
            <param name="maxY">maxinum Y</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentLonLat(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to lon/lat extent
            </summary>
            <param name="aExtent">extent</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentEx(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to exactly extent
            </summary>
            <param name="aExtent">extent</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtentLonLatEx(MeteoInfoC.Global.Extent)">
            <summary>
            Zoom to exactly lon/lat extent
            </summary>
            <param name="aExtent">extent</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ZoomToExtent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to extent
            </summary>
            <param name="minX">mininum X</param>
            <param name="maxX">maxinum X</param>
            <param name="minY">mininum Y</param>
            <param name="maxY">maxinum Y</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetGeoScale">
            <summary>
            Get geographic scale
            </summary>
            <returns>Geographic scale</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.getViewCenter">
            <summary>
            Get View center point
            </summary>
            <returns>The view center point</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.setViewCenter(MeteoInfoC.PointD)">
            <summary>
            Set view center point
            </summary>
            <param name="center">The view center point</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OpenLayer(System.String)">
            <summary>
            Open a layer from layer file
            </summary>
            <param name="aFile">file path</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerFromHandle(System.Int32)">
            <summary>
            Get layer from handle
            </summary>
            <param name="handle">layer handle</param>
            <returns>layer object</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerVisible(System.Int32)">
            <summary>
            Get layer visible
            </summary>
            <param name="handle">layer handle</param>
            <returns>visible</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerName(System.Int32)">
            <summary>
            Get layer name
            </summary>
            <param name="handle">layer handle</param>
            <returns>layer name</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetPolygonLayerNames">
            <summary>
            Get polygon layer names
            </summary>
            <returns>polygon layer names</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayersWholeExtent">
            <summary>
            Get layers whole extent
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetNewLayerHandle">
            <summary>
            Get new layer handle
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerHandleFromName(System.String)">
            <summary>
            Get layer handle from layer name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerFromName(System.String)">
            <summary>
            Get layer from name
            </summary>
            <param name="name">layer name</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayer(System.String)">
            <summary>
            Get layer from name
            </summary>
            <param name="name">layer name</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerHandleFromIdx(System.Int32)">
            <summary>
            Get layer handle from layer index
            </summary>
            <param name="lIdx"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLayerIdxFromHandle(System.Int32)">
            <summary>
            Get layer index from layer handle
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Add layer
            </summary>
            <param name="aLayer">layer object</param>        
            <returns>Layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddVectorLayer(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Add vector layer
            </summary>
            <param name="aLayer">Vector layer</param>        
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddWindLayer(MeteoInfoC.Layer.VectorLayer,System.Boolean)">
            <summary>
            Add vector layer
            </summary>
            <param name="aLayer">Vector layer</param>        
            <param name="EarthWind">if wind relative to earth</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddRasterLayer(MeteoInfoC.Layer.RasterLayer)">
            <summary>
            Add raster layer
            </summary>
            <param name="aLayer">raster layer</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddImageLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Add image layer
            </summary>
            <param name="aLayer">Image layer</param>
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.InsertPolygonLayer(MeteoInfoC.Layer.VectorLayer)">
            <summary>
            Insert polygon layer
            </summary>
            <param name="aLayer">vector layer</param>        
            <returns>layer handle</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.MoveLayer(System.Int32,System.Int32)">
            <summary>
            Move layer position
            </summary>
            <param name="lPreIdx">previous index</param>
            <param name="lNewIdx">new index</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.MoveLayer(MeteoInfoC.Layer.MapLayer,System.Int32)">
            <summary>
            Move layer
            </summary>
            <param name="layer">The layer</param>
            <param name="lNewIdx">New layer index</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.MoveLayerToTop(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Move layer to top
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.MoveLayerToBottom(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Move layer to bottom
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveLayerHandle(System.Int32)">
            <summary>
            Remove layer by handle
            </summary>
            <param name="handle">handle</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveLayer(System.Int32)">
            <summary>
            Remove layer by index
            </summary>
            <param name="aIdx"></param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Remove layer object
            </summary>
            <param name="aLayer"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveMeteoLayers">
            <summary>
            Remove meteorological data layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveAllLayers">
            <summary>
            Remove all layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveMapLayers">
            <summary>
            Remove map layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetLineLayerIdx">
            <summary>
            Get last polyline layer index
            </summary>        
            <returns>layer index</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetPolygonLayerIdx">
            <summary>
            Get last polygon layer index
            </summary>        
            <returns>layer index</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetImageLayerIdx">
            <summary>
            Get last image layer index
            </summary>       
            <returns>layer index</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerLegendScheme(System.Int32,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set layer legend scheme
            </summary>
            <param name="handle"></param>
            <param name="aLS"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerLegendSchemeProj(System.Int32,MeteoInfoC.Legend.LegendScheme)">
            <summary>
            Set projected layer legend scheme
            </summary>
            <param name="handle"></param>
            <param name="aLS"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerName(System.Int32,System.String)">
            <summary>
            Set layer name
            </summary>
            <param name="handle"></param>
            <param name="name"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerTransparency(System.Int32,System.Int32)">
            <summary>
            Set layer transparency
            </summary>
            <param name="handle"></param>
            <param name="transPerc"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerVisible(System.Int32,System.Boolean)">
            <summary>
            Set layer visible
            </summary>
            <param name="handle"></param>
            <param name="visible"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetLayerAvoidCollision(System.Int32,System.Boolean)">
            <summary>
            Set layer avoid collision
            </summary>
            <param name="handle"></param>
            <param name="avoidCollision"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SetImageLayerExtent(System.Int32,MeteoInfoC.Global.Extent,MeteoInfoC.Layer.WorldFilePara)">
            <summary>
            Set image layer extent
            </summary>
            <param name="handle"></param>
            <param name="aExtent"></param>
            <param name="aWFP"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectShapes(MeteoInfoC.Layer.VectorLayer,System.Drawing.PointF,System.Collections.Generic.List{System.Int32}@,System.Boolean)">
            <summary>
            Select shapes
            </summary>
            <param name="aLayer">vector laer</param>
            <param name="aPoint">point</param>
            <param name="SelectedShapes">ref selected shapes</param>
            <param name="isSel">if the selected shapes will be set as selected</param>
            <returns>If selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectShapes(MeteoInfoC.Layer.VectorLayer,System.Drawing.PointF,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Select shapes
            </summary>
            <param name="aLayer">vector laer</param>
            <param name="aPoint">point</param>
            <param name="SelectedShapes">ref selected shapes</param>
            <returns>If selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectShapes(MeteoInfoC.Layer.VectorLayer,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Select shapes
            </summary>
            <param name="aLayer">vector laer</param>
            <param name="rect">Select rectangle</param>
            <param name="isSel">if the selected shapes will be set as selected</param>
            <returns>If selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectShapes(MeteoInfoC.Layer.VectorLayer,System.Drawing.RectangleF)">
            <summary>
            Select shapes
            </summary>
            <param name="aLayer">vector laer</param>
            <param name="rect">Select rectangle</param>
            <returns>If selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGridCell(MeteoInfoC.Layer.RasterLayer,System.Drawing.PointF,System.Int32@,System.Int32@)">
            <summary>
            Select grid cell
            </summary>
            <param name="aLayer">raster layer</param>
            <param name="aPoint">point</param>
            <param name="iIdx">i index</param>
            <param name="jIdx">j index</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectLabels(System.Int32,System.Drawing.PointF,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Select labels
            </summary>
            <param name="LayerHnd">Layer handle</param>
            <param name="aPoint">mouse point</param>
            <param name="SelectedLabels">ref selected labels</param>
            <returns>If selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GetVisibleGraphics">
            <summary>
            Get visible graphics - including graphics of layer
            </summary>
            <returns>Visible graphics</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGraphics(System.Drawing.PointF,MeteoInfoC.Shape.GraphicCollection@,System.Double@)">
            <summary>
            Select graphics by point
            </summary>
            <param name="aPoint">mouse point</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <param name="lonShift">longitude shift</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGraphics_back(System.Drawing.PointF,MeteoInfoC.Shape.GraphicCollection,MeteoInfoC.Shape.GraphicCollection@,System.Double@,System.Int32)">
            <summary>
            Select graphics by point
            </summary>
            <param name="aPoint">mouse point</param>
            <param name="baseGraphics">base graphics</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <param name="lonShift">longitude shift</param>
            <param name="limit">tolerance limit</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGraphics(System.Drawing.PointF,MeteoInfoC.Shape.GraphicCollection,MeteoInfoC.Shape.GraphicCollection@,System.Double@,System.Int32)">
            <summary>
            Select graphics by point
            </summary>
            <param name="aPoint">mouse point</param>
            <param name="baseGraphics">base graphics</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <param name="lonShift">longitude shift</param>
            <param name="limit">tolerance limit</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGraphics(System.Drawing.Rectangle,MeteoInfoC.Shape.GraphicCollection@,System.Double@)">
            <summary>
            Select graphics by rectangle
            </summary>
            <param name="aRect">select rectangle</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <param name="lonShift">longitude shift</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.SelectGraphics(System.Drawing.Rectangle,MeteoInfoC.Shape.GraphicCollection,MeteoInfoC.Shape.GraphicCollection@,System.Double@)">
            <summary>
            Select graphics by rectangle
            </summary>
            <param name="aRect">select rectangle</param>
            <param name="baseGraphics">base graphics</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <param name="lonShift">longitude shift</param>
            <returns>if selected</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveGraphic(MeteoInfoC.Shape.Graphic)">
            <summary>
            Remove a graphic
            </summary>
            <param name="aGraphic">graphic</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RemoveSelectedGraphics">
            <summary>
            Remove selected graphics
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.IntersectElementEdge(System.Drawing.RectangleF,System.Drawing.PointF,System.Single)">
            <summary>
            Calculates which edge of a rectangle the point intersects with, within a certain limit
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.PaintLayers">
            <summary>
            Paint layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.PaintGraphics(System.Drawing.Graphics)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.PaintGraphics(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paint graphics
            </summary>
            <param name="g">graphics</param>
            <param name="rect">target rectangle</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawLayerWithLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw layers with legend scheme
            </summary>
            <param name="aLayer">vector layer</param>
            <param name="g">graphic</param>
            <param name="LonShift">longitude shift</param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawIdShape(System.Drawing.Graphics,MeteoInfoC.Shape.Shape)">
            <summary>
            Draw identifer shape
            </summary>
            <param name="g">graphis</param>
            <param name="aShape">a shape</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawIdShape(System.Drawing.Graphics,MeteoInfoC.Shape.Shape,System.Drawing.Rectangle)">
            <summary>
            Draw identifer shape
            </summary>
            <param name="g">graphis</param>
            <param name="aShape">a shape</param>
            <param name="rect">rectangle extent</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawVectLayerWithLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw vect layer with legend scheme
            </summary>
            <param name="aLayer"></param>
            <param name="g"></param>
            <param name="LonShift"></param>      
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawVectLayerWithLegendScheme_Dynamic(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw vect layer with legend scheme
            </summary>
            <param name="aLayer"></param>
            <param name="g"></param>
            <param name="LonShift"></param>      
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawBarbLayerWithLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw wind barb layer with legendscheme
            </summary>
            <param name="aLayer"></param>
            <param name="g"></param>
            <param name="LonShift"></param>      
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawWeatherLayerWithLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw weather layer with legendscheme
            </summary>
            <param name="aLayer"></param>
            <param name="g"></param>
            <param name="LonShift"></param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawStationModelLayerWithLegendScheme(MeteoInfoC.Layer.VectorLayer,System.Drawing.Graphics,System.Double)">
            <summary>
            Draw station model layer with legendscheme
            </summary>
            <param name="aLayer"></param>
            <param name="g"></param>
            <param name="LonShift"></param>        
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportToPicture(System.String)">
            <summary>
            Export to a picture file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GenerateLonLatLayer">
            <summary>
            Generate longitude/latitude grid line layer
            </summary>
            <returns>lon/lat layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GenerateLonLatLayer_Back(System.Double,System.Double)">
            <summary>
            Generate Lon/Lat layer
            </summary>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.GenerateLonLatLayer_Old(System.Double,System.Double)">
            <summary>
            Generate Lon/Lat layer
            </summary>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawGraphicList(System.Drawing.Graphics,System.Double)">
            <summary>
            Draw graphic list
            </summary>
            <param name="g">graphics</param>
            <param name="lonShift">longitude shift</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.DrawGraphic(System.Drawing.Graphics,MeteoInfoC.Shape.Graphic,System.Double)">
            <summary>
            Draw a graphic
            </summary>
            <param name="g">graphics</param>
            <param name="aGraphic">graphic</param>
            <param name="lonShift">longitude shift</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddGraphic(MeteoInfoC.Shape.Graphic)">
            <summary>
            Add a graphic
            </summary>
            <param name="aGraphic">graphic</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddText(System.String,System.Int32,System.Int32)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddText(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <param name="fontSize">font size</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.AddText(System.String,System.Int32,System.Int32,System.String,System.Single)">
            <summary>
            Add a text label element
            </summary>
            <param name="text">text</param>
            <param name="x">center x</param>
            <param name="y">center y</param>
            <param name="fontName">font name</param>
            <param name="fontSize">font size</param>
            <returns>text layout graphic</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportProjectXML(System.Xml.XmlDocument@,System.Xml.XmlElement,System.String)">
            <summary>
            Export project XML content
            </summary>
            <param name="m_Doc">ref XML document</param>
            <param name="parent">parent XML element</param>
            <param name="projectFilePath">project file path</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportExtentsElement(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Add extent element
            </summary>
            <param name="m_Doc">XmlDocument</param>
            <param name="parent">parent XmlElement</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportMapPropElement(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Add map property element
            </summary>
            <param name="m_Doc">XmlDocument</param>
            <param name="parent">parent XmlElement</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportGridLineElement(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Add grid line element
            </summary>
            <param name="m_Doc">XmlDocument</param>
            <param name="parent">parent XmlElement</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportMaskOutElement(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Add maskout element
            </summary>
            <param name="m_Doc">XmlDocument</param>
            <param name="parent">parent XmlElement</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportProjectionElement(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Add prjection element
            </summary>
            <param name="m_Doc">XmlDocument</param>
            <param name="parent">parent XmlElement</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportVectorLayerElement(System.Xml.XmlDocument@,System.Xml.XmlElement,MeteoInfoC.Layer.VectorLayer,System.String)">
            <summary>
            Add vector layer element
            </summary>
            <param name="m_Doc"></param>
            <param name="parent"></param>
            <param name="aVLayer"></param>
            <param name="projectFilePath"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportImageLayer(System.Xml.XmlDocument@,System.Xml.XmlElement,MeteoInfoC.Layer.ImageLayer,System.String)">
            <summary>
            Add image layer element
            </summary>
            <param name="m_Doc"></param>
            <param name="parent"></param>
            <param name="aILayer"></param>
            <param name="projectFilePath"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ExportGraphics(System.Xml.XmlDocument@,System.Xml.XmlElement,System.Collections.Generic.List{MeteoInfoC.Shape.Graphic})">
            <summary>
            Add graphics
            </summary>
            <param name="m_Doc">xml document</param>
            <param name="parent">parent xml element</param>
            <param name="graphicList">graphic list</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.ImportProjectXML(System.Xml.XmlElement)">
            <summary>
            Import project XML content
            </summary>
            <param name="parent">parent XML element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadExtentsElement(System.Xml.XmlElement)">
            <summary>
            Load extent element
            </summary>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadMapPropElement(System.Xml.XmlElement)">
            <summary>
            Load map property element
            </summary>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadGridLineElement(System.Xml.XmlElement)">
            <summary>
            Load grid line element
            </summary>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadMaskOutElement(System.Xml.XmlElement)">
            <summary>
            Load mask out element
            </summary>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadProjectionElement(System.Xml.XmlElement)">
            <summary>
            Load projection element
            </summary>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadVectorLayer(System.Xml.XmlNode)">
            <summary>
            Load vector layer
            </summary>
            <param name="aVLayer">vector layer xml node</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadImageLayer(System.Xml.XmlNode)">
            <summary>
            Load image layer
            </summary>
            <param name="aILayer">image layer xml node</param>
            <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadGraphics(System.Xml.XmlElement)">
            <summary>
            Load graphics
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.LoadGraphicCollection(System.Xml.XmlElement)">
            <summary>
            Load graphic collection
            </summary>
            <param name="parent">graphics node</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            MapView paint event
            </summary>
            <param name="pe"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseClick evnet
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MapView mouse double click event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MapView mouse down event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MapView mouse move event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MapView mouse up event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override OnMouseWheel event
            </summary>
            <param name="e">MouseEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Override OnKeyDown event
            </summary>
            <param name="e">KeyEventArgs</param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnResize(System.EventArgs)">
            <summary>
            MapView resize event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnViewExtentChanged">
            <summary>
            Fires the ViewExtentChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnLayersUpdated">
            <summary>
            Fires the LayersUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnMapViewReDrawed">
            <summary>
            Fires the MapViewRedrawed event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnRenderChanged">
            <summary>
            Fires the RenderChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnGraphicSelected">
            <summary>
            Fires the GraphicSelected event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnShapeSelected">
            <summary>
            Fires the ShapeSelected event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RaiseShapeSelectedEvent">
            <summary>
            Raise ShapeSelected event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RaiseLayersUndateEvent">
            <summary>
            Raise LayersUpdated event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RaiseViewExtentChangedEvent">
            <summary>
            Raise view extent changed event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.OnProjectionChanged">
            <summary>
            Fires the ProjectionChanged event
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.MapView.RaiseProjectionChangedEvent">
            <summary>
            Raise ProjectionChanged event
            </summary>
        </member>
        <member name="T:MeteoInfoC.Map.XYScreenSet">
            <summary>
            Set map screen parameters
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>
            <param name="xlbs"></param>
            <param name="xrbs"></param>
            <param name="ytbs"></param>
            <param name="ybbs"></param>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.MinX">
            <summary>
            Get or set minimum X
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.MaxX">
            <summary>
            Get or set maximum X
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.MinY">
            <summary>
            Get or set minimum y
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.MaxY">
            <summary>
            Get or set maximum y
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.ScaleX">
            <summary>
            Get or set X scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.ScaleY">
            <summary>
            Get or set y scale
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.XLBorderSpace">
            <summary>
            Get or set left border space
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.XRBorderSpace">
            <summary>
            Get or set right border space
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.YTBorderSpace">
            <summary>
            Get or set top border space
            </summary>
        </member>
        <member name="P:MeteoInfoC.Map.XYScreenSet.YBBorderSpace">
            <summary>
            Get or set bottom border space
            </summary>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.SetCoordinateGeoMap(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set map screen parameters for geological map
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="isLonLatMap"></param>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.SetCoordinateMap(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Set map screen parameters for normal map
            </summary>
            <param name="lonMin"></param>
            <param name="lonMax"></param>
            <param name="latMin"></param>
            <param name="latMax"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.ProjToScreen(System.Double,System.Double,System.Single@,System.Single@,System.Double,MeteoInfoC.Map.XYScreenSet)">
            <summary>
            Convert coordinate from map to screen
            </summary>
            <param name="projX"></param>
            <param name="projY"></param>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="LonShift"></param>
            <param name="aLLSS"></param>
        </member>
        <member name="M:MeteoInfoC.Map.XYScreenSet.ScreenToProj(System.Double@,System.Double@,System.Double,System.Double,MeteoInfoC.Map.XYScreenSet)">
            <summary>
            convert coordinate from screen to map
            </summary>
            <param name="projX"></param>
            <param name="projY"></param>
            <param name="screenX"></param>
            <param name="screenY"></param>
            <param name="aLLSS"></param>
        </member>
        <member name="T:MeteoInfoC.MIApp">
            <summary>
            Command class
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.MapLayout">
            <summary>
            Get or Set MapLayout
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.MeteoDataInfo">
            <summary>
            Meteological data info
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.PlotDimension">
            <summary>
            Get or set plot dimension
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.DrawType2D">
            <summary>
            Get or set draw type
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.LegendScheme">
            <summary>
            Get or set default legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.UseDefaultLegendScheme">
            <summary>
            Get or set if use default legend scheme
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.TimeIndex">
            <summary>
            Get or set time index
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.LevelIndex">
            <summary>
            Get or set level index
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.LonIndex">
            <summary>
            Get or set longitude index
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.LatIndex">
            <summary>
            Get or set latitude index
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.VariableIndex">
            <summary>
            Get or set variable index
            </summary>
        </member>
        <member name="P:MeteoInfoC.MIApp.LastLayer">
            <summary>
            Get last added layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.LoadProjectFile(System.String)">
            <summary>
            Load project file
            </summary>
            <param name="fileName">Project file name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenLayer(System.String)">
             <summary>
             Open layer
             </summary>
             <param name="aFile">layer file</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenGrADSData(System.String)">
            <summary>
            Open GrADS data
            </summary>
            <param name="aFile">data file</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenMICAPSData(System.String)">
            <summary>
            Open MICAPS data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenARLData(System.String)">
            <summary>
            Open ARL packed meteorological data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenGRIBData(System.String)">
            <summary>
            Open GRIB meteorological data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenHDFData(System.String)">
            <summary>
            Open HDF data file
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenNCData(System.String)">
            <summary>
            Open NetCDF data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenLonLatData(System.String)">
            <summary>
            Open lon/lat station data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenHYSPLITConc(System.String)">
            <summary>
            Open HYSPLIT concentration data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.OpenHYSPLITTraj(System.String)">
            <summary>
            Open HYSPLIT trajectory data
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetGridData(System.String)">
            <summary>
            Get grid data
            </summary>
            <param name="varName">variable name</param>
            <returns>grid data</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetStationData(System.String)">
            <summary>
            Get station data
            </summary>
            <param name="varName">variable index</param>
            <returns>station data</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetTimeNumber">
            <summary>
            Get time number
            </summary>
            <returns>time number</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetTime(System.Int32)">
            <summary>
            Get DateTime by time index
            </summary>
            <param name="timeIdx">time index</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetLevelNumber(System.String)">
            <summary>
            Get level number
            </summary>
            <param name="varName">variable name</param>
            <returns>level number</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetLevelNumber">
            <summary>
            Get level number by first variable
            </summary>
            <returns>level number</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(System.String)">
            <summary>
            Display
            </summary>
            <param name="varName">variable name</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.GridData)">
            <summary>
            Display gird data
            </summary>
            <param name="aGridData">grid data</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Display U/V grid data
            </summary>
            <param name="UGridData">U grid data</param>
            <param name="VGridData">V grid data</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData,MeteoInfoC.Data.GridData)">
            <summary>
            Display color U/V grid data
            </summary>
            <param name="UGridData">U grid data</param>
            <param name="VGridData">V grid data</param>
            <param name="XGridData">Color grid data</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.StationData)">
            <summary>
            Display station data
            </summary>
            <param name="aStData">station data</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Display station vector/barb/streamline data
            </summary>
            <param name="UStData">U/WindDirection station data</param>
            <param name="VStData">V/WindSpeed station data</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,System.Boolean)">
            <summary>
            Display station vector/barb/streamline data
            </summary>
            <param name="UStData">U/WindDirection station data</param>
            <param name="VStData">V/WindSpeed station data</param>
            <param name="isUV">if is U/V</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData)">
            <summary>
            Display station vector/barb/streamline data
            </summary>
            <param name="UStData">U/WindDirection station data</param>
            <param name="VStData">V/WindSpeed station data</param>
            <param name="stData">Station data for color</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,MeteoInfoC.Data.StationData,System.Boolean)">
            <summary>
            Display station vector/barb/streamline data
            </summary>
            <param name="UStData">U/WindDirection station data</param>
            <param name="VStData">V/WindSpeed station data</param>
            <param name="stData">Station data for color</param>
            <param name="isUV">if is U/V</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.DisplayTraj">
            <summary>
            Display trajectory
            </summary>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(System.String,System.String)">
            <summary>
            Display
            </summary>
            <param name="U">U name</param>
            <param name="V">V name</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.Display(System.String,System.String,System.String)">
            <summary>
            Display
            </summary>
            <param name="U">U name</param>
            <param name="V">V name</param>
            <param name="varName">varible name</param>
            <returns>Map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetDiscretedDataExtent(System.Double[0:,0:])">
            <summary>
            Get the extent of discredted data array
            </summary>
            <param name="discretedData">discreted data array</param>
            <returns>extent</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.ReDraw">
            <summary>
            ReDraw
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetLayer(System.String)">
            <summary>
            Get layer by name
            </summary>
            <param name="layerName">layer name</param>
            <returns>map layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetVectorLayer(System.String)">
            <summary>
            Get vector layer by name
            </summary>
            <param name="layerName">layer name</param>
            <returns>vector layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.GetImageLayer(System.String)">
            <summary>
            Get image layer by name
            </summary>
            <param name="layerName">layer name</param>
            <returns>image layer</returns>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetAntiAlias(System.Boolean)">
            <summary>
            Set if the map layout is antialis
            </summary>
            <param name="isAntiAlias">is AntiAlias</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetDrawType(System.String)">
            <summary>
            Set draw type
            </summary>
            <param name="drawType">draw type</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetTime(System.Int32)">
            <summary>
            Set time index
            </summary>
            <param name="timeIdx">time index</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLevel(System.Int32)">
            <summary>
            Set level index
            </summary>
            <param name="levelIdx">level index</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetMaskout(System.String)">
            <summary>
            Set maskout layer
            </summary>
            <param name="layerName">layer name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetPaperSize(System.Int32,System.Int32)">
            <summary>
            Set paper size
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ClearMaskout">
            <summary>
            Clear maskout layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetInterpolation(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String,System.Single,System.Int32)">
            <summary>
            Set grid interpolation parameters
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
            <param name="xNum">x number</param>
            <param name="yNum">y nunmber</param>
            <param name="aInterMethod">interpolation method</param>
            <param name="radius">radius</param>
            <param name="minNum">mininum number</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetInterpolation(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Set grid interpolation parameters
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
            <param name="xNum">x number</param>
            <param name="yNum">y nunmber</param>
            <param name="aInterMethod">interpolation method</param>
            <param name="radList">radius</param>        
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLegendBreak(System.String,System.Int32,System.Drawing.Color)">
            <summary>
            Set legend break: color
            </summary>
            <param name="layerName">layer name</param>
            <param name="brkIdx">break index</param>
            <param name="aColor">color</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLegendBreak(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set legend break: color
            </summary>
            <param name="layerName">layer name</param>
            <param name="brkIdx">break index</param>
            <param name="aColor">fill color</param>
            <param name="outlineColor">outline color</param>
            <param name="outlineSize">outline size</param>
            <param name="drawOutline">draw outline</param>
            <param name="drawFill">draw fill</param>
            <param name="drawShape">draw shape</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLegendBreak(System.String,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set legend break
            </summary>
            <param name="layerName"></param>
            <param name="brkIdx"></param>
            <param name="size"></param>
            <param name="aColor"></param>
            <param name="outlineColor"></param>
            <param name="drawOutline"></param>
            <param name="drawFill"></param>
            <param name="drawShape"></param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetTransparency(System.String,System.Int32)">
            <summary>
            Set layer transparency percent
            </summary>
            <param name="layerName">layer name</param>
            <param name="trans">transparency percent</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLegendScheme(System.String)">
            <summary>
            Set default legend scheme
            </summary>
            <param name="legendFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.AddLabels(System.String,System.String)">
            <summary>
            Add labels to a layer
            </summary>
            <param name="layerName">layer name</param>
            <param name="fieldName">field name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ProjectLayers(System.String)">
            <summary>
            project layers
            </summary>
            <param name="projStr">projection string</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SaveFigure(System.String)">
            <summary>
            Save as a figure
            </summary>
            <param name="aFile">file path</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.Zoom(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to extent
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ZoomLonLat(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to lon/lat extent
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ZoomEx(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to exactly extent
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ZoomLonLatEx(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zoom to exactly lon/lat extent
            </summary>
            <param name="minX">mininum x</param>
            <param name="maxX">maxinum x</param>
            <param name="minY">mininum y</param>
            <param name="maxY">maxinum y</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ZoomToLayer(System.String)">
            <summary>
            Zoom to layer extent
            </summary>
            <param name="layerName">layer name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.ZoomToLastLayer">
            <summary>
            Zoom to last added layer extent
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.AddLayer(MeteoInfoC.Layer.MapLayer)">
            <summary>
            Add a layer
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.SetLayerVisible(System.String,System.Boolean)">
            <summary>
            Set layer if visible
            </summary>
            <param name="layerName">layer name</param>
            <param name="visible">visible</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.MoveLayerToTop(System.String)">
            <summary>
            Move layer to top
            </summary>
            <param name="layerName">layer name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.MoveLayerToBottom(System.String)">
            <summary>
            Move layer to bottom
            </summary>
            <param name="layerName">layer name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.MoveLayer(System.String,System.String)">
            <summary>
            Move layer to toLayer
            </summary>
            <param name="movedLayer">moved layer name</param>
            <param name="toLayer">to layer name</param>        
        </member>
        <member name="M:MeteoInfoC.MIApp.RemoveLayer(System.String)">
            <summary>
            Remove a layer by layer name
            </summary>
            <param name="layerName">layer name</param>
        </member>
        <member name="M:MeteoInfoC.MIApp.RemoveLastLayer">
            <summary>
            Remove last added layer
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.RemoveAllLayers">
            <summary>
            Remove all layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.RemoveDataLayers">
            <summary>
            Remove data layers
            </summary>
        </member>
        <member name="M:MeteoInfoC.MIApp.MICAPS4ToNetCDF_Dust(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Convert MICAPS4 data to NetCDF format: dust
            Can convert muti-files in one forecast cycle
            </summary>
            <param name="inFile">one of the input MICAPS4 files</param>
            <param name="outFile">output NetCDF file</param>
            <param name="varName">variable name</param>
            <param name="varLongName">variable long name</param>
            <param name="varUnit">variable unit</param>
        </member>
        <member name="T:MeteoInfoC.Plugin.IApplication">
            <summary>
            Plugin host application
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MapView">
            <summary>
            Get the MapView
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MapDocument">
            <summary>
            Get the MapDocument
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MainMenuStrip">
            <summary>
            Get main menu strip
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MainToolStripContainer">
            <summary>
            Get main tool strip container
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.CurrentTool">
            <summary>
            Get or set current tool
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MainToolStripProgressBar">
            <summary>
            Get main ToolStripProgressBar
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IApplication.MainToolStripStatusLabel">
            <summary>
            Get main ToolStripStatusLabel
            </summary>
        </member>
        <member name="M:MeteoInfoC.Plugin.IApplication.OpenProjectFile(System.String)">
            <summary>
            Open project file
            </summary>
            <param name="fileName">Project file name</param>
        </member>
        <member name="T:MeteoInfoC.Plugin.IPlugin">
            <summary>
            Plugin manager interface
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IPlugin.Name">
            <summary>
            Plugin name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IPlugin.Application">
            <summary>
            Plugin host application
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IPlugin.Author">
            <summary>
            Get or set plugin author
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IPlugin.Version">
            <summary>
            Get or set plugin version
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.IPlugin.Description">
            <summary>
            Get or set plugin description
            </summary>
        </member>
        <member name="M:MeteoInfoC.Plugin.IPlugin.Load">
            <summary>
            Plugin load
            </summary>        
        </member>
        <member name="M:MeteoInfoC.Plugin.IPlugin.UnLoad">
            <summary>
            Plugin unload
            </summary>
        </member>
        <member name="T:MeteoInfoC.Plugin.PluginBase">
            <summary>
            Plugin base class
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.PluginBase.Application">
            <summary>
            Get or set application object
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.PluginBase.Name">
            <summary>
            Get or set plugin name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.PluginBase.Author">
            <summary>
            Get or set plugin author
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.PluginBase.Version">
            <summary>
            Get or set plugin version
            </summary>
        </member>
        <member name="P:MeteoInfoC.Plugin.PluginBase.Description">
            <summary>
            Get or set plugin description
            </summary>
        </member>
        <member name="M:MeteoInfoC.Plugin.PluginBase.Load">
            <summary>
            Load plugin
            </summary>
        </member>
        <member name="M:MeteoInfoC.Plugin.PluginBase.UnLoad">
            <summary>
            Unload plugin
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectionManage">
            <summary>
            Projection manage class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionManage.GetProjectionGlobalExtent(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Get global extent of a projection
            </summary>
            <param name="toProj">projection information</param>
            <returns>extent</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionManage.GetProjectionExtent(MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo,System.Double[],System.Double[])">
            <summary>
            Get projected extent
            </summary>
            <param name="fromProj">from projection</param>
            <param name="toProj">to projection</param>
            <param name="X">X coordinate</param>
            <param name="Y">Y coordinate</param>
            <returns>extent</returns>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectionNames">
            <summary>
            Projection names
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Lon_Lat">
            <summary>
            lon/lat
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Lambert_Conformal">
            <summary>
            Lambert conformal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Lambert_Azimuthal_Equal_Area">
            <summary>
            Lambert azimuthal equal area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Albers_Conic_Equal_Area">
            <summary>
            Albers conic equal area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.North_Polar_Stereographic">
            <summary>
            Northe polar stereographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.South_Polar_Stereographic">
            <summary>
            South polar stereographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Mercator">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Robinson">
            <summary>
            Robinson
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Mollweide">
            <summary>
            Mollweide
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Orthographic">
            <summary>
            Orthographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Geostationary">
            <summary>
            Geostationary
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Oblique_Stereographic">
            <summary>
            Oblique stereographic
            </summary>        
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Transverse_Mercator">
            <summary>
            Transverse mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Hotine_Oblique_Mercator">
            <summary>
            Hotine_Oblique_Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Universal_Transverse_Mercator">
            <summary>
            Universal transverse mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectionNames.Sinusoidal">
            <summary>
            Sinusoidal
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.AngularUnit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AngularUnit.#ctor">
            <summary>
            Creates a new instance of Unit
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.AngularUnit.Name">
            <summary>
            Gets or sets the name of this 
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.AngularUnit.Radians">
            <summary>
            Gets or sets the constant to multiply against this unit to get radians.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AngularUnit.ToEsriString">
            <summary>
            Generates the Esri string from the values in this class
            </summary>
            <returns>The resulting esri string</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.AngularUnit.ReadEsriString(System.String)">
            <summary>
            Reads an esri string to determine the angular unit
            </summary>
            <param name="esriString">The esri string to read</param>
        </member>
        <member name="T:MeteoInfoC.Projections.CoordinateSystemCategory">
            <summary>
            CoordinateSystem
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CoordinateSystemCategory.#ctor">
            <summary>
            Creates a new instance of CoordinateSystem
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CoordinateSystemCategory.GetProjection(System.String)">
            <summary>
            Retrieves the specified projection given the specified name.
            </summary>
            <param name="name">The string name of the projection to obtain information for</param>
            <returns></returns>
        </member>
        <member name="P:MeteoInfoC.Projections.CoordinateSystemCategory.Names">
            <summary>
            Gets the list of names of all the members on this object
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CoordinateSystemCategory.ToArray">
            <summary>
            Obtains all the members of this category, building a single
            array of the projection info classes.  This returns the
            original classes, not a copy.
            </summary>
            <returns>The array of projection info classes</returns>
        </member>
        <member name="T:MeteoInfoC.Projections.Datum">
            <summary>
            Datum
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.#ctor">
            <summary>
            Creates a new instance of Datum
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.#ctor(System.String)">
            <summary>
            uses a string name of a standard datum to create a new instance of the Datum class
            </summary>
            <param name="standardDatum">The string name of the datum to use</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.#ctor(MeteoInfoC.Projections.Proj4Datums)">
            <summary>
            Uses a Proj4Datums enumeration in order to specify a known datum to
            define the spheroid and to WGS calculation method and parameters
            </summary>
            <param name="standardDatum">The Proj4Datums enumeration specifying the known datum</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.Matches(MeteoInfoC.Projections.Datum)">
            <summary>
            Compares two datums to see if they are actually describing the same thing and
            therefore don't need to be transformed.
            </summary>
            <param name="otherDatum">The other datum to compare against</param>
            <returns>The boolean result of the operation.</returns>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.Name">
            <summary>
            Gets or sets the name of the datum defining the spherical characteristics of the model of the earth
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.Spheroid">
            <summary>
            The spheroid of the earth, defining the maximal radius and the flattening factor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.ToWGS84">
            <summary>
            Gets or sets the set of double parameters, (this can either be 3 or 7 parameters)
            used to transform this 
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.DatumType">
            <summary>
            Gets or sets the datum type, which clarifies how to perform transforms to WGS84
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.Description">
            <summary>
            Gets or sets an english description for this datum
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Datum.NadGrids">
            <summary>
            Gets or sets the array of string nadGrid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.ToEsriString">
            <summary>
            Creates an esri well known text string for the datum part of the string
            </summary>
            <returns>The datum portion of the esri well known text</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.ReadEsriString(System.String)">
            <summary>
            parses the datum from the esri string
            </summary>
            <param name="esriString">The string to parse values from</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Datum.ReadProj4Params(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads the proj4 parameters and parses out the ones that control the 
            datum.
            </summary>
            <param name="parameters"></param>
            <remarks>Originally ported from pj_datum_set.c</remarks>
        </member>
        <member name="T:MeteoInfoC.Projections.DatumTypes">
            <summary>
            DatumTypes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.DatumTypes.Unknown">
            <summary>
            The datum type is not with a well defined ellips or grid-shift
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.DatumTypes.Param3">
            <summary>
            The datum transform to WGS84 can be defined using 3 double parameters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.DatumTypes.Param7">
            <summary>
            The datum transform to WGS84 can be defined using 7 double parameters
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.DatumTypes.GridShift">
            <summary>
            The transform requires a special nad gridshift
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.DatumTypes.WGS84">
            <summary>
            The datum is already the WGS84 datum
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeocentricGeodetic">
            <summary>
            Wenzel, H.-G.(1985): Hochauflösende Kugelfunktionsmodelle für
            das Gravitationspotential der Erde. Wiss. Arb. Univ. Hannover
            Nr. 137, p. 130-131.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeocentricGeodetic.#ctor(MeteoInfoC.Projections.Spheroid)">
            <summary>
            Creates a new instance of GeocentricGeodetic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeocentricGeodetic.GeodeticToGeocentric(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Converts lon, lat, height to x, y, z where lon and lat are in radians and everything else is meters
            </summary>
            <param name="points"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeocentricGeodetic.GeocentricToGeodetic(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Converts x, y, z to lon, lat, height
            </summary>
            <param name="points"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeocentricGeodetic.GeocentricToGeodetic(System.Double[])">
            <summary>
            Converts geocentric x, y, z coords to geodetic lon, lat, h
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.GeographicCategories.Africa.Abidjan1987">
             <summary> 
            Abidjan 1987
             </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Africa.#ctor">
            <summary>
            Creates a new instance of Africa
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Antarctica">
            <summary>
            Antarctica
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Antarctica.#ctor">
            <summary>
            Creates a new instance of Antarctica
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Asia.#ctor">
            <summary>
            Creates a new instance of Asia
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Australia">
            <summary>
            Australia
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Australia.#ctor">
            <summary>
            Creates a new instance of Australia
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.CountySystems">
            <summary>
            CountySystems
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.CountySystems.#ctor">
            <summary>
            Creates a new instance of CountySystems
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Europe.#ctor">
            <summary>
            Creates a new instance of Europe
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.NorthAmerica">
            <summary>
            NorthAmerica
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.NorthAmerica.#ctor">
            <summary>
            Creates a new instance of NorthAmerica
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.Oceans">
            <summary>
            Oceans
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.Oceans.#ctor">
            <summary>
            Creates a new instance of Oceans
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.SolarSystem">
            <summary>
            SolarSystem
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.SolarSystem.#ctor">
            <summary>
            Creates a new instance of SolarSystem
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.SouthAmerica">
            <summary>
            SouthAmerica
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.SouthAmerica.#ctor">
            <summary>
            Creates a new instance of SouthAmerica
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.SpheroidBased">
            <summary>
            SpheroidBased
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.SpheroidBased.#ctor">
            <summary>
            Creates a new instance of SpheroidBased
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicCategories.World">
            <summary>
            World
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicCategories.World.#ctor">
            <summary>
            Creates a new instance of World
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicInfo">
            <summary>
            GeographicInfo
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicInfo.#ctor">
            <summary>
            Creates a new instance of GeographicInfo
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.GeographicInfo.Datum">
            <summary>
            Gets or sets the datum
            eg: D_WGS_1984
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.GeographicInfo.Meridian">
            <summary>
            Gets or sets the prime meridian longitude of the 0 mark, relative to Greenwitch 
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.GeographicInfo.Name">
            <summary>
            Gets or sets the geographic coordinate system name
            eg: GCS_WGS_1984
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.GeographicInfo.Unit">
            <summary>
            Gets or sets the units
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicInfo.ToEsriString">
            <summary>
            Generates an esri string from the information in this geographic info class, including the name, datum, meridian, and unit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicInfo.ReadEsriString(System.String)">
            <summary>
            Reads an esri string in order to parse the datum, meridian and unit as well as the name.
            </summary>
            <param name="esriString">The string to parse</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicInfo.ReadProj4Parameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Reads in parameters from the proj4 string that control the datum and prime meridian
            </summary>
            <param name="parameters">The dictionary of all the parameter names and values in string form</param>
        </member>
        <member name="T:MeteoInfoC.Projections.GeographicSystems">
            <summary>
            GeographicSystems
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicSystems.#ctor">
            <summary>
            Creates a new instance of GeographicSystems
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.GeographicSystems.Names">
            <summary>
            Gets an array of all the names of the coordinate system categories 
            in this collection of systems.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeographicSystems.GetCategory(System.String)">
            <summary>
            Given the string name, this will return the specified coordinate category
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.GridShift">
            <summary>
            GridShift
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GridShift.Apply(System.String[],System.Boolean,System.Double[][],System.Int32,System.Int64)">
            <summary>
            Applies either a forward or backward gridshift based on the specified name
            </summary>
            <param name="names"></param>
            <param name="inverse"></param>
            <param name="points"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.GridShift.NadInterpolate(MeteoInfoC.Projections.PhiLam,MeteoInfoC.Projections.NadTable)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.GridShift.GetValue(System.Int32,System.Int32,MeteoInfoC.Projections.NadTable)">
            <summary>
            Checks the edges to make sure that we are not attempting to interpolate 
            from cells that don't exist.
            </summary>
            <param name="iPhi">The cell index in the phi direction</param>
            <param name="iLam">The cell index in the lambda direction</param>
            <param name="table">The table with the values</param>
            <returns>A PhiLam that has the shift coefficeints.</returns>
        </member>
        <member name="T:MeteoInfoC.Projections.IEsriString">
            <summary>
            EsriString
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.IEsriString.ToEsriString">
            <summary>
            Writes the value in the format that it would appear in within a prj file
            </summary>
            <returns>The a nested portion of the total esri string.</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.IEsriString.ReadEsriString(System.String)">
            <summary>
            This reads the string and attempts to parse the relavent values.
            </summary>
            <param name="esriString">The string to read</param>
        </member>
        <member name="T:MeteoInfoC.Projections.IProjectionCategory">
            <summary>
            IProjectionCategory
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.IProjectionCategory.MainCategory">
            <summary>
            Gets or sets the main category for this projection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.IProjectionCategory.Category">
            <summary>
            Gets or sets the category for this projection
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.IProjectionCategory.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.IProjectionCategory.Proj4String">
            <summary>
            Gets or sets the proj4 string that defines this projection
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.IReproject">
            <summary>
            This interface defines how reprojection classes should be accessed
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.IReproject.ReprojectPoints(System.Double[][],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo,System.Int32,System.Int32)">
            <summary>
            Reprojects the specified points.  The first is the projection info to start from, while the destination
            is the projection to end with.
            </summary>
            <param name="points"></param>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.KnownCoordinateSystems">
            <summary>
            KnownCoordinateSystems
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownCoordinateSystems.Geographic">
            <summary>
            Geographic systems operate in angular units, but can use different
            spheroid definitions or angular offsets.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownCoordinateSystems.Projected">
            <summary>
            Projected systems are systems that use linear units like meters or feet
            rather than angular units like degrees or radians
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.LinearUnit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LinearUnit.#ctor">
            <summary>
            Creates a new instance of Unit
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.LinearUnit.Name">
            <summary>
            Gets or sets the name of this 
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.LinearUnit.Meters">
            <summary>
            Gets or sets the constant to multiply with maps distances to get the distances in meters
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LinearUnit.ToEsriString">
            <summary>
            Generates the part of the ESRI well known text for this linear unit
            </summary>
            <returns>A string that contains the name and conversion factor to meters </returns>
        </member>
        <member name="M:MeteoInfoC.Projections.LinearUnit.ReadEsriString(System.String)">
            <summary>
            Parses the UNIT member of ESRI well known text into a linear unit
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.Meridian">
            <summary>
            Meridian
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.#ctor">
            <summary>
            Creates a new instance of Meridian
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.#ctor(System.Double,System.String)">
            <summary>
            Generates a custom meridian given a name and a longitude
            </summary>
            <param name="longitude">The longitude to use</param>
            <param name="name">The string name for this meridian</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.#ctor(MeteoInfoC.Projections.Proj4Meridians)">
            <summary>
            Creates a new meridian from one of the known, proj4 meridian locations.
            Presumably the longitudes here correspond to various standard meridians
            rather than some arbitrary longitudes of capital cities.
            </summary>
            <param name="standardMeridian">One of the enumerations listed</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.#ctor(System.String)">
            <summary>
            Creates a new meridian from one of the known, proj4 meridian locations.
            </summary>
            <param name="standardMeridianName">The string name of the meridian to use</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.ReadProj4Parameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Attempts to parse the parameters in order to read the meridian
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.Meridian.Name">
            <summary>
            Gets or sets the string name
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Meridian.Longitude">
            <summary>
            Gets or sets the longitude where the prime meridian for this geographic coordinate occurs.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.ToEsriString">
            <summary>
            Writes the longitude and prime meridian content to the esri string
            </summary>
            <returns>A string that is formatted for an esri prj file</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Meridian.ReadEsriString(System.String)">
            <summary>
            Reads content from an esri string, learning information about the prime meridian
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.MeridionalDistance">
            <summary>
            MeridinalDistance
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.MeridionalDistance.GetEN(System.Double)">
            <summary>
            Formerly pj_enfn from Proj4
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.MeridionalDistance.MeridionalLength(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Formerly pj_mlfn
            Given geodetic angular displacement phi, this calculates the equivalent meridional distance 
            </summary>
            <param name="phi">The geodetic angular displacement</param>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.MeridionalDistance.AngularDistance(System.Double,System.Double,System.Double[])">
            <summary>
            Formerly pj_inv_mlfn
            Given the linear distance, this calculates the equivalent geodetic angular displacement
            </summary>
            <param name="arg"></param>
            <param name="es"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.NadTable">
            <summary>
            NadRecord is a single entry from an lla file
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._name">
            <summary>
            The character based id for this record
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._lowerLeft">
            <summary>
            The lower left coordinate
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._cellSize">
            <summary>
            The delta lambda and delta phi for a single cell
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._numLambdas">
            <summary>
            The total count of coordinates in the lambda direction
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._numPhis">
            <summary>
            The total count of coordinates in the phi direction
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable._cvs">
            <summary>
            The set of conversion matrix coefficients for lambda
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.NadTable.DegToRad">
            <summary>
            Converts degree values into radians 
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.NadTable.#ctor">
            <summary>
            Creates a blank nad table
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.NadTable.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of a NadTable from the specified stream
            </summary>
            <param name="llaFileStream"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.NadTable.ReadLlaFile(System.String)">
            <summary>
            Reads a given text file with the *.lla extension
            </summary>
            <param name="filename">The string filename to parse</param>
        </member>
        <member name="M:MeteoInfoC.Projections.NadTable.ReadStream(System.IO.Stream)">
            <summary>
            So that we can read from an embedded stream, this reads a NadTable
            from any stream, not just a filename.
            </summary>
            <param name="str">The stream to read</param>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.Name">
            <summary>
            Gets or sets the string name for this record
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.LowerLeft">
            <summary>
            Gets or sets the lower left corner in radians
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.CellSize">
            <summary>
            Gets or sets the angular cell size in radians
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.NumPhis">
            <summary>
            Gets or sets the integer count of phi coefficients
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.NumLambdas">
            <summary>
            Gets or sets the integer count of lambda coefficients
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTable.CVS">
            <summary>
            Gets or sets the array of lambda coefficients organized 
            in a spatial table (phi major)
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.NadTables">
            <summary>
            NadTables
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.NadTables.#ctor">
            <summary>
            Creates a new instance of NadTables
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.NadTables.Tables">
            <summary>
            Gets an array of the lla tables that have been added as a resource
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.PhiLam">
            <summary>
            PhiLam has two double values and is used like a coordinate.
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.PhiLam.Phi">
            <summary>
            Geodetic Phi coordinate (latitude)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.PhiLam.Lambda">
            <summary>
            Geodetic Lambda coordinate (longitude)
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Proj4Datums">
            <summary>
            Proj4Datums
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.WGS84">
            <summary>
            World Geodetic System 1984
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.GGRS87">
            <summary>
            Greek Geodetic Reference system 1987
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.NAD83">
            <summary>
            North American Datum 1983
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.NAD27">
            <summary>
            North American Datum 1927
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.Potsdam">
            <summary>
            Potsdam Rauenburg 1950 DHDN
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.Carthage">
            <summary>
            Carthage 1934 Tunisia
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.Hermannskogel">
            <summary>
            Hermannskogel
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.Ire65">
            <summary>
            Ireland 1965
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.Nzgd49">
            <summary>
            New Zealand Grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Datums.OSGB36">
            <summary>
            Airy 1830
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Proj4Ellipsoids">
            <summary>
            Proj4Ellipsoids
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Custom">
            <summary>
            Custom will use the a parameter for the major axis and the
            rf parameter for the flattening divisor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Merit_1983">
            <summary>
            MERIT 1983
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.SovietGeodeticSystem_1985">
            <summary>
            Soviet Geodetic System 85
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.GRS_1980">
            <summary>
            Geodetic Reference System 1980(IUGG, 1980)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.IAU_1976">
            <summary>
            International Astronomical Union 1976
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Airy_1830">
            <summary>
            Sir George Biddell Airy 1830 (Britain)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.AppPhysics_1965">
            <summary>
            App. Physics. 1965
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.NavalWeaponsLab_1965">
            <summary>
            Naval Weapons Lab., 1965
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.AiryModified">
            <summary>
            Modified Airy
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Andrae_1876">
            <summary>
            Andrae 1876 (Den., Iclnd.)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Austrailia_SouthAmerica">
            <summary>
            Austrailian National and South American 1969
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.GRS_1967">
            <summary>
            Geodetic Reference System 67 (IUGG 1967)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Bessel_1841">
            <summary>
            Bessel 1841
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.BesselNamibia">
            <summary>
            Bessel 1841 (Namibia)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Clarke_1866">
            <summary>
            Clarke 1866
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.ClarkeModified_1880">
            <summary>
            Clarke 1880 Modified
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.CPM_1799">
            <summary>
            Comm. des Poids et Mesures 1799
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Delambre_1810">
            <summary>
            Delambre 1810 (Belgium)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Engelis_1985">
            <summary>
            Engelis 1985
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Everest_1830">
            <summary>
            Everest 1830
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Everest_1948">
            <summary>
            Everest 1948
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Everest_1956">
            <summary>
            Everest 1956
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Everest_1969">
            <summary>
            Everest 1969
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Everest_SS">
            <summary>
            Everest (Sabah and Sarawak)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Fischer_1960">
            <summary>
            Fischer (Mercury Datum) 1960
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.FischerModified_1960">
            <summary>
            Modified Fischer 1960
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Fischer_1968">
            <summary>
            Fischer 1968
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Helmert_1906">
            <summary>
            Helmert 1906
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Hough">
            <summary>
            Hough
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.International_1909">
            <summary>
            International 1909
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Krassovsky_1942">
            <summary>
            Krassovsky 1942
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Kaula_1961">
            <summary>
            Kaula 1961
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Lerch_1979">
            <summary>
            Lerch 1979
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Maupertius_1738">
            <summary>
            Maupertius 1738
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.InternationalNew_1967">
            <summary>
            New International 1967
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Plessis_1817">
            <summary>
            Plessis 1817 (France)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.SoutheastAsia">
            <summary>
            Southeast Asia
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Walbeck">
            <summary>
            Walbekc (Germany)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.WGS_1960">
            <summary>
            World Geodetic System 1960
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.WGS_1966">
            <summary>
            World Geodetic System 1966
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.WGS_1972">
            <summary>
            World Geodetic System 1972
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.WGS_1984">
            <summary>
            World Geodetic System 1984
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Ellipsoids.Sphere">
            <summary>
            Normal Sphere
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Proj4Meridians">
            <summary>
            Proj4Meridians
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Greenwich">
            <summary>
            Greenwich, England
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Lisbon">
            <summary>
            Lisbon, Portugal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Paris">
            <summary>
            Paris, France
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Bogota">
            <summary>
            Bogota, Colombia
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Madrid">
            <summary>
            Madrid, Spain
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Rome">
            <summary>
            Rome, Italy
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Bern">
            <summary>
            Berne, Switzerland
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Jakarta">
            <summary>
            Jakarta, Indonesia
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Ferro">
            <summary>
             Brasil
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Brussels">
            <summary>
            Brussels, Belgiuum
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Stockholm">
            <summary>
            Stockholm, Sweden
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Athens">
            <summary>
            Athens, Greece
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj4Meridians.Oslo">
            <summary>
            Oslo, Norway
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Africa">
            <summary>
            Africa
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Africa.#ctor">
            <summary>
            Creates a new instance of Africa
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Asia.#ctor">
            <summary>
            Creates a new instance of Asia
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Europe.#ctor">
            <summary>
            Creates a new instance of Europe
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerBeijing1954">
            <summary>
            GaussKrugerBeijing1954
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerBeijing1954.#ctor">
            <summary>
            Creates a new instance of GaussKrugerBeijing1954
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerOther">
            <summary>
            GaussKrugerOther
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerOther.#ctor">
            <summary>
            Creates a new instance of GaussKrugerOther
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerPulkovo1942">
            <summary>
            GaussKrugerPulkovo1942
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerPulkovo1942.#ctor">
            <summary>
            Creates a new instance of GaussKrugerPulkovo1942
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerPulkovo1995">
            <summary>
            GaussKrugerPulkovo1995
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.GaussKrugerPulkovo1995.#ctor">
            <summary>
            Creates a new instance of GaussKrugerPulkovo1995
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.KrugerZian1980">
            <summary>
            KrugerZian1980
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.KrugerZian1980.#ctor">
            <summary>
            Creates a new instance of KrugerZian1980
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Minnesota">
            <summary>
            Not sure why we have all these county based Minnesota and Wisconsin projections
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Minnesota.#ctor">
            <summary>
            Creates a new instance of Minnesota
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Nad1983IntlFeet">
            <summary>
            Nad1983IntlFeet
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Nad1983IntlFeet.#ctor">
            <summary>
            Creates a new instance of Nad1983IntlFeet
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGrids">
            <summary>
            NationalGrids
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGrids.#ctor">
            <summary>
            Creates a new instance of NationalGrids
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsAustralia">
            <summary>
            NatGridsAustralia
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsAustralia.#ctor">
            <summary>
            Creates a new instance of NatGridsAustralia
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsCanada">
            <summary>
            NationalGridsCanada
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsCanada.#ctor">
            <summary>
            Creates a new instance of NationalGridsCanada
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsIndia">
            <summary>
            IndianSubcontinent
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsIndia.#ctor">
            <summary>
            Creates a new instance of IndianSubcontinent
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsJapan">
            <summary>
            NationalGridsJapan
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsJapan.#ctor">
            <summary>
            Creates a new instance of NationalGridsJapan
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsNewZealand">
            <summary>
            NationalGridsNewZealand
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsNewZealand.#ctor">
            <summary>
            Creates a new instance of NationalGridsNewZealand
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsNorway">
            <summary>
            NationalGridsNorway
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsNorway.#ctor">
            <summary>
            Creates a new instance of NationalGridsNorway
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NationalGridsSweden">
            <summary>
            NationalGridsSweden
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NationalGridsSweden.#ctor">
            <summary>
            Creates a new instance of NationalGridsSweden
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.NorthAmerica">
            <summary>
            NorthAmerica
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.NorthAmerica.#ctor">
            <summary>
            Creates a new instance of NorthAmerica
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Polar">
            <summary>
            Polar
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Polar.#ctor">
            <summary>
            Creates a new instance of Polar
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.SouthAmerica">
            <summary>
            SouthAmerica
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.SouthAmerica.#ctor">
            <summary>
            Creates a new instance of SouthAmerica
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.SpheroidBased">
            <summary>
            SpheroidBased
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectedCategories.SpheroidBased.Lambert2">
            <summary>
            Lambert 2 (Central France)
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectedCategories.SpheroidBased.Lambert2Wide">
            <summary>
            Lambert 2 (Étendu)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.SpheroidBased.#ctor">
            <summary>
            Creates a new instance of SpheroidBased
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1927">
            <summary>
            StatePlaneNad1927
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1927.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1927
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983">
            <summary>
            StatePlaneNad1983
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983.MichiganGeoRef2008">
            <summary>
             Michigan Geo Ref 2008
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983.NAD1983Maine2000CentralZone">
            <summary>
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983Feet">
            <summary>
            StatePlaneNad1983Feet
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983Feet.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983Feet
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983Harn">
            <summary>
            StatePlaneNad1983Harn
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983Harn.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983Harn
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983HarnFeet">
            <summary>
            StatePlaneNad1983HarnFeet
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneNad1983HarnFeet.#ctor">
            <summary>
            Creates a new instance of StatePlaneNad1983HarnFeet
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StatePlaneOther">
            <summary>
            StatePlaneOther
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StatePlaneOther.#ctor">
            <summary>
            Creates a new instance of StatePlaneOther
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.StateSystems">
            <summary>
            StateSystems
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.StateSystems.#ctor">
            <summary>
            Creates a new instance of StateSystems
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.TransverseMercatorSystems">
            <summary>
            TransverseMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.TransverseMercatorSystems.#ctor">
            <summary>
            Creates a new instance of TransverseMercator
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.UtmNad1927">
            <summary>
            UtmNad1927
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.UtmNad1927.#ctor">
            <summary>
            Creates a new instance of UtmNad1927
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.UtmNad1983">
            <summary>
            UtmNad1983
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.UtmNad1983.#ctor">
            <summary>
            Creates a new instance of UtmNad1983
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.UtmOther">
            <summary>
            UtmOther
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.UtmOther.#ctor">
            <summary>
            Creates a new instance of UtmOther
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.UtmWgs1972">
            <summary>
            UtmWgs1972
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.UtmWgs1972.#ctor">
            <summary>
            Creates a new instance of UtmWgs1972
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.UtmWgs1984">
            <summary>
            UtmWgs1984
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.UtmWgs1984.#ctor">
            <summary>
            Creates a new instance of UtmWgs1984
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.Wisconsin">
            <summary>
            Wisconsin
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.Wisconsin.#ctor">
            <summary>
            Creates a new instance of Wisconsin
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.World">
            <summary>
            World
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.World.#ctor">
            <summary>
            Creates a new instance of World
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedCategories.WorldSpheroid">
            <summary>
            WorldSpheroid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedCategories.WorldSpheroid.#ctor">
            <summary>
            Creates a new instance of WorldSpheroid
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectedSystems">
            <summary>
            Projected
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedSystems.#ctor">
            <summary>
            Creates a new instance of Projected
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectedSystems.Names">
            <summary>
            Gets an array of all the names of the coordinate system categories 
            in this collection of systems.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectedSystems.GetCategory(System.String)">
            <summary>
            Given the string name, this will return the specified coordinate category
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectionException">
            <summary>
            ProjectionErrorCodes
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionException.#ctor(System.Int32)">
            <summary>
            Creates a new projection exception with the appropriate message code
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionException.#ctor(System.String)">
            <summary>
            Creates a new projection exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionException.ErrorCode">
            <summary>
            Gets the error code that was used when this exception was created
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionException.GetMessage(System.Int32)">
            <summary>
            Returns a string message given the correct numeric code.
            </summary>
            <param name="projectionCode"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectionInfo">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.#ctor">
            <summary>
            Creates a new instance of Parameters
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.#ctor(System.String)">
            <summary>
            Creates a new projection and automaticalyl reads in the proj4 string
            </summary>
            <param name="proj4String">THe proj4String to read in while defining the projection</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.Open(System.String)">
            <summary>
            Open a given prj filename
            </summary>
            <param name="prjFilename"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.SaveAs(System.String)">
            <summary>
            Exports this projection info by saving it to a *.prj file.
            </summary>
            <param name="prjFilename">The prj file to save to</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetLam0">
            <summary>
            Gets the lambda 0, or central meridian, in radial coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetPhi0">
            <summary>
            Gets the phi 0 or latitude of origin in radial coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetPhi1">
            <summary>
            Gets the lat_1 parameter multiplied by radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetPhi2">
            <summary>
            Gets the lat_2 parameter multiplied by radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetLam1">
            <summary>
            Gets the lon_1 parameter in radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.GetLam2">
            <summary>
            Gets the lon_2 parameter in radians
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ParamD(System.String)">
            <summary>
            Obtains the double valued parameter if it is found and can be parsed to a double.
            </summary>
            <param name="parameterName">The name of the parameter to return as a double value.</param>
            <returns>The double valued parameter of the specified name, or zero.</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ParamR(System.String)">
            <summary>
            Obtains the double valued parameter after converting from degrees to radians.
            </summary>
            <param name="parameterName">The name of the parameter to read</param>
            <returns>The double valued parameter in radians.</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ParamI(System.String)">
            <summary>
            Obtains the integer valued parameter if it is found and can be parsed to an integer
            </summary>
            <param name="parameterName">The string name of the parameter to find</param>
            <returns>An integer value representing the parameter if it was found.</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.SetLam0(System.Double)">
            <summary>
            Sets the lambda 0, or central meridian in radial coordinates
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.SetPhi0(System.Double)">
            <summary>
            Sets the phi 0 or latitude of origin in radial coordinates
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Name">
            <summary>
            Gets or sets the name of this projection information
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.GeographicInfo">
            <summary>
             The geographic information
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.FalseEasting">
            <summary>
            The false easting for this coordinate system
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.FalseNorthing">
            <summary>
            The false northing for this coordinate system
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.CentralMeridian">
            <summary>
            The horizontal 0 point in geographic terms
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.ScaleFactor">
            <summary>
            The scale factor for this coordinate system
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.LatitudeOfOrigin">
            <summary>
            The zero point in geographic terms
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.StandardParallel1">
            <summary>
            The line of latitude where the scale information is preserved.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.StandardParallel2">
            <summary>
            
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Unit">
            <summary>
            The unit being used for measurements.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.IsSouth">
            <summary>
            Gets or sets a boolean indicating whether this projection applies to the
            southern coordinate system or not.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Zone">
            <summary>
            Gets or sets the integer zone parameter if it is specified.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.IsGeocentric">
            <summary>
            Gets or sets a boolean that indicates whether or not this
            projection is geocentric.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.IsLatLon">
            <summary>
            True if this coordinate system is expressed only using geographic coordinates
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Transform">
            <summary>
            Gets or sets the transform that converts between geodetic coordinates and projected coordinates.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Geoc">
            <summary>
            Gets or sets a boolean indicating a geocentric latitude parameter
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Over">
            <summary>
            Gets or sets a boolean for the over-ranging flag
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.Parameters">
            <summary>
            Gets or sets the parameters, including special parameters, stored by 
            the string names.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ToEsriString">
            <summary>
            Expresses the entire projection as the ESRI well known text format that can be found in .prj files
            </summary>
            <returns>The generated string</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ToProj4String">
            <summary>
            Attempts to generate a new proj4 string based on the current projection parameters,
            regardless of whether they were read from a proj4 file or from an esri projection file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ReadProj4String(System.String)">
            <summary>
            Attempts to parse known parameters from the set of proj4 parameters
            </summary>
            <param name="proj4string"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionInfo.NoDefs">
            <summary>
            A boolean that indicates whether the proj4 parameter "nodefs" appears.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ProjectionInfo.ReadEsriString(System.String)">
            <summary>
            Parses the entire projection from an esri string.  In some cases, this will have
            default projection information since only geographic information is obtained.
            </summary>
            <param name="esriString">The ESRI string to parse</param>
        </member>
        <member name="T:MeteoInfoC.Projections.ProjectionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.DuplicateTableName">
            <summary>
              Looks up a localized string similar to The name %S was found for more than one lla table in the Nad folder..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err1_NoArguments">
            <summary>
              Looks up a localized string similar to No arguments in initialization list.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err10_ZeroRecFlattening">
            <summary>
              Looks up a localized string similar to The reciprocal flattening (1/f) = 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err11_LatitudeOutOfBounds">
            <summary>
              Looks up a localized string similar to The Latitude was greater than 90 or less than -90.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err12_ESquareNegative">
            <summary>
              Looks up a localized string similar to The square of eccentricity cannot be a negative value..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err13_NoMajorRadius">
            <summary>
              Looks up a localized string similar to The given semi-major axis was 0 or not given..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err14_LatLonOutOfBounds">
            <summary>
              Looks up a localized string similar to The Latitude or Longitude exceeded limits.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err15_InvalidXY">
            <summary>
              Looks up a localized string similar to The cartesian X or Y coordinate was invalid.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err16_ImproperDMS">
            <summary>
              Looks up a localized string similar to The Degree Minute Second value is formed imporperly.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err17_NonConvergentRMeridDist">
            <summary>
              Looks up a localized string similar to The inverse meridinal distance was non-convergent.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err18_NonConvergentRPhi2">
            <summary>
              Looks up a localized string similar to The inverse Phi2 value was non-converngent.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err19_TrigException">
            <summary>
              Looks up a localized string similar to The ArcCosign or ArcSign value was too large..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err2_NoOptions">
            <summary>
              Looks up a localized string similar to No options found in &apos;init&apos; file.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err20_ToleranceConditionError">
            <summary>
              Looks up a localized string similar to Tolerance Condition Error.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err21_ConicLatitudeError">
            <summary>
              Looks up a localized string similar to The conic lat_1 value cannot be its -lat_2.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err22_Lat1TooLarge">
            <summary>
              Looks up a localized string similar to Latitude 1 cannot be greater than or equal to 90.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err23_Lat1TooSmall">
            <summary>
              Looks up a localized string similar to Latitude 2 cannot be equal to 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err24_Lat_tsTooLarge">
            <summary>
              Looks up a localized string similar to The lat_ts parameter cannot be greater than or equal to 90.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err25_NoControlPtSeparation">
            <summary>
              Looks up a localized string similar to There was no distance between the control points.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err26_ProjectionNotRotated">
            <summary>
              Looks up a localized string similar to Projection not selected to be rotated.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err27_WorMTooSmall">
            <summary>
              Looks up a localized string similar to W &lt;= 0 or M &lt;= 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err28_LsatOutOfBounds">
            <summary>
              Looks up a localized string similar to lsat not in 1-5 range.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err29_PathNotInRange">
            <summary>
              Looks up a localized string similar to Path not in range.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err3_NoColon">
            <summary>
              Looks up a localized string similar to No colon in init= string.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err30_HTooSmall">
            <summary>
              Looks up a localized string similar to H was negative or 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err31_KTooSmall">
            <summary>
              Looks up a localized string similar to K was less than 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err32_LatOutOfBounds">
            <summary>
              Looks up a localized string similar to The central latitude was 0 or 90 or alpha = 90.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err33_InvalidLatitudes">
            <summary>
              Looks up a localized string similar to Lat_1 = lat_2 or lat_1 = 0 or lat_2 = 90.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err34_EllipticalRequired">
            <summary>
              Looks up a localized string similar to Elliptical Usage Required.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err35_InvalidUTMZone">
            <summary>
              Looks up a localized string similar to The UTM zone parameter was invalid.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err36_TchebyException">
            <summary>
              Looks up a localized string similar to The arguments were out of range for Tcheby eval.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err37_ProjNotFound">
            <summary>
              Looks up a localized string similar to Failed to find projection to be rotated.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err38_CorrectionNotFound">
            <summary>
              Looks up a localized string similar to Failed to load NAD27-83 correction file.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err39_NorMnotSpecified">
            <summary>
              Looks up a localized string similar to Both n and m must be specified and &gt; 0.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err4_NotNamed">
            <summary>
              Looks up a localized string similar to Projection not named.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err40_InvalidN">
            <summary>
              Looks up a localized string similar to N&lt;= 0, n &gt; 1 or not specified.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err41_Lat1OrLat2Missing">
            <summary>
              Looks up a localized string similar to lat_1 or lat_2 not specified.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err42_Lat1EqualsLat2">
            <summary>
              Looks up a localized string similar to |lat_1| =|lat_2| .
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err43_MeanLatError">
            <summary>
              Looks up a localized string similar to lat_0 is pi/2 from mean lat.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err44_CoordinateUnreadable">
            <summary>
              Looks up a localized string similar to Failed to parse coordinate system definition.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err45_GeocentricMissingZ">
            <summary>
              Looks up a localized string similar to Geocentric transformation missing z or ellips.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err46_UknownPMID">
            <summary>
              Looks up a localized string similar to Uknown prime meridian conversion ID.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err5_UknownProjection">
            <summary>
              Looks up a localized string similar to UnknownProjectionId.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err6_EffectiveEccentricity1">
            <summary>
              Looks up a localized string similar to Effective eccentricity = 1.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err7_UknownUnitID">
            <summary>
              Looks up a localized string similar to Unkown unit conversion ID.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err8_Invalidboolean">
            <summary>
              Looks up a localized string similar to Invalid boolean parameter argument.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.Err9_UknownEllipse">
            <summary>
              Looks up a localized string similar to The elliptical parameter ellps= was unkown.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.IndexMismatch">
            <summary>
              Looks up a localized string similar to There was an index mismatch problem with the specified file..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.InverseShiftFailed">
            <summary>
              Looks up a localized string similar to Inverse grid shift iteration faield, presumably at grid edge.  Using first approximation..
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ProjectionMessages.InvShiftConvergeFailed">
            <summary>
              Looks up a localized string similar to Inverse grid shift iterator failed to converge..
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Reproject">
            <summary>
            Reproject
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Reproject.ReprojectPoints(System.Double[][],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.ProjectionInfo,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="startIndex"></param>
            <param name="numPoints"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.Spheroid">
            <summary>
            Spheroid (Defaults to WGS84)
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.#ctor">
            <summary>
            Creates a new instance of Spheroid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new spheroid using an the equatorial radius in meters and
            a flattening coefficient that is the inverse flattening factor.
            eg. for WGS84 (6378137.0, 298.257223563)
            </summary>
            <param name="equatorialRadius">The semi-major axis</param>
            <param name="inverseFlattening">The inverse of the flattening factor</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.#ctor(System.Double)">
            <summary>
            For perfect spheres, you just need to specify one radius, which will be 
            applied to both radii.  You can then directly change the polar or 
            equatorial radius if necessary using the properties.
            </summary>
            <param name="radius">The radius of the sphere</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.#ctor(MeteoInfoC.Projections.Proj4Ellipsoids)">
            <summary>
            The ellps parameter in a proj4 string will only work with certain
            pre-defined spheroids, enumerated in the Proj4Ellipsoids enumeration.
            Custom spheroids can be specified but will use the a and b parameters
            when creating a proj4 parameter instead of using the ellps parameter.
            </summary>
            <param name="knownEllipse">Any of several predefined geographic ellipses</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.#ctor(System.String)">
            <summary>
            Given the proj4 code, this will set the radii correctly.
            </summary>
            <param name="proj4Ellips"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.FlatteningFactor">
            <summary>
            Calculates the flattening factor, (a - b) / a.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.GetProj4String">
            <summary>
            Uses the current known ellipsoid to return a code name for the proj4 string if possible.
            Otherwise, this returns the radial parameters a and b.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.Eccentricity">
            <summary>
            Calculates the eccentrity according to e = sqrt(2f - f^2) where f is the flattening factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.EccentricitySquared">
            <summary>
            Calculates the square of eccentricity according to es = (2f - f^2) where f is the flattening factor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.GetInverseFlattening">
            <summary>
            Calculates the inverse of the flattening factor, commonly saved to ESRI projections,
            or else provided as the "rf" parameter for Proj4 strings.  This is simply calculated
            as a / (a - b) where a is the semi-major axis and b is the semi-minor axis.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MeteoInfoC.Projections.Spheroid.Proj4Names">
            <summary>
            Each of the enumerated known ellipsoids is encoded by an ellps parameter specified by 
            the corresponding string value.  Ellipsoids that are not found here or are specified
            as "Custom" in the enuemration will be replaced with an 'a' and a 'b' parameter instead.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.IsOblate">
            <summary>
            Gets a boolean that is true if the spheroid has been flattened.
            </summary>
            <returns>Boolean, true if the spheroid is oblate (or flattened)</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.SetInverseFlattening(System.Double)">
            <summary>
            Sets the value by using the current semi-major axis (Equatorial Radius) in order to 
            calculate the semi-minor axis (Polar Radius).
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Spheroid.Name">
            <summary>
            Gets or sets the string name of the spheroid.
            e.g.: WGS_1984
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Spheroid.EquatorialRadius">
            <summary>
            A spheroid is a pole flattened (oblate) sphere, with the radii of two axes being equal and longer
            than the third.  This is the radial measure of one of these major axes in meters.
            e.g. 6,378,137 for WGS 84
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Spheroid.PolarRadius">
            <summary>
            A spheroid is a pole flattened (oblate) sphere, with the radii of two axes being equal and longer
            than the third.  This is the radial measure of the smaller polar axis in meters.  One option is
            to specify this directly, but it can also be calculated using the major axis and the flattening factor.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Spheroid.KnownEllipsoid">
            <summary>
            
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.ToEsriString">
            <summary>
            Converts the spheroid parameters into a valid esri expression that uses the semi-major axis
            and the reciprocal flattening factor
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Spheroid.ReadEsriString(System.String)">
            <summary>
            Reads the ESRI string to define the spheroid, which controls how flattened the earth's radius is
            </summary>
            <param name="esriString"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.Aitoff">
            <summary>
            Aitoff
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Aitoff.#ctor">
            <summary>
            Creates a new instance of Aitoff
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Aitoff.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="T:MeteoInfoC.Projections.AlbersEqualArea">
            <summary>
            AlbersEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AlbersEqualArea.#ctor">
            <summary>
            Creates a new instance of AlbersEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AlbersEqualArea.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AlbersEqualArea.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AlbersEqualArea.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AlbersEqualArea.Setup">
            <summary>
            Internal code handling the setup operations for the transform
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.AlbersEqualArea.Phi1">
            <summary>
            Gets or sets the Phi1 parameter
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.AlbersEqualArea.Phi2">
            <summary>
            Gets or sets the Phi2 parameter
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.AnalyticModes">
            <summary>
            AnalyticCodes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.AnalyticModes.IsAnalXlYl">
            <summary>
            Derivatives of lon analytic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.AnalyticModes.IsAnalXpYp">
            <summary>
            Derivatives of lat analytic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.AnalyticModes.IsAnalHK">
            <summary>
            h and k are analytic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.AnalyticModes.IsAnalConv">
            <summary>
            convergence analytic
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.AzimuthalEquidistant">
            <summary>
            AzimuthalEquidistant
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.#ctor">
            <summary>
            Creates a new instance of AzimuthalEquidistant
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.AzimuthalEquidistant.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.BipolarObliqueConformalConic">
            <summary>
            BipolarObliqueConformalConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.BipolarObliqueConformalConic.#ctor">
            <summary>
            Creates a new instance of BipolarObliqueConformalConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.BipolarObliqueConformalConic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.BipolarObliqueConformalConic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.BipolarObliqueConformalConic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Bonne">
            <summary>
            Bonne
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.#ctor">
            <summary>
            Creates a new instance of Bonne
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Bonne.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Cassini">
            <summary>
            Cassini
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.#ctor">
            <summary>
            Creates a new instance of Cassini
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Cassini.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.CrasterParabolic">
            <summary>
            CrasterParabolic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CrasterParabolic.#ctor">
            <summary>
            Creates a new instance of CrasterParabolic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CrasterParabolic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.CrasterParabolic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.CylindricalEqualArea">
            <summary>
            CylindricalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.#ctor">
            <summary>
            Creates a new instance of CylindricalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.CylindricalEqualArea.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert1">
            <summary>
            Eckert1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert1.#ctor">
            <summary>
            Creates a new instance of Eckert1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert1.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert1.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert2">
            <summary>
            Eckert2
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert2.#ctor">
            <summary>
            Creates a new instance of Eckert2
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert2.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert2.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert3">
            <summary>
            Eckert3
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert3.#ctor">
            <summary>
            Creates a new instance of Eckert3
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert3.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert3.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert4">
            <summary>
            Eckert4
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert4.#ctor">
            <summary>
            Creates a new instance of Eckert4
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert4.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert4.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert5">
            <summary>
            Eckert5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert5.#ctor">
            <summary>
            Creates a new instance of Eckert5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert5.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert5.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Eckert6">
            <summary>
            Eckert6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert6.#ctor">
            <summary>
            Creates a new instance of Eckert6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Eckert6.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.EllipticalTransform">
            <summary>
            Elliptical Transform supports a built in framework for assuming a
            separate function occurs if the spheroid is elliptical
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EllipticalTransform.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.EquidistantConic">
            <summary>
            EquidistantConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantConic.#ctor">
            <summary>
            Creates a new instance of EquidistantConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantConic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantConic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantConic.OnSpecial(System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.Factors)">
            <summary>
            This exists in the case that we ever develop code to perform the special proj4 calculations
            </summary>
            <param name="lp"></param>
            <param name="p"></param>
            <param name="fac"></param>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantConic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.EquidistantCylindrical">
            <summary>
            EquidistantCylindrical
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantCylindrical.#ctor">
            <summary>
            Creates a new instance of EquidistantCylindrical
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantCylindrical.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantCylindrical.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.EquidistantCylindrical.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Factors">
            <summary>
            Factors
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.x_l">
            <summary>
            derivatives of x for lambda
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.x_p">
            <summary>
            derivatives of x for phi
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.y_l">
            <summary>
            derivatives of y for lambda
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.y_p">
            <summary>
            derivatives of y for phi
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.h">
            <summary>
            Meridinal scale
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.k">
            <summary>
            parallel scale
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.omega">
            <summary>
            Angular distortion
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.thetap">
            <summary>
            theta prime
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.conv">
            <summary>
            Convergence
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.s">
            <summary>
            Areal scale factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.a">
            <summary>
            max scale error
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.b">
            <summary>
            min scale error
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Factors.code">
            <summary>
            Info as to analytics 
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Foucaut">
            <summary>
            Foucaut is a tweaked version of QuarticAuthalic that uses tan mode.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Foucaut.#ctor">
            <summary>
            Creates a new instance of Foucaut
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Foucaut.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.GallStereographic">
            <summary>
            GallStereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GallStereographic.#ctor">
            <summary>
            Creates a new instance of GallStereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GallStereographic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GallStereographic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Gauss">
            <summary>
            Gauss
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Gauss.#ctor(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Creates a new instance of Gauss
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Gauss.Forward(System.Double[])">
            <summary>
            Forward Gauss Transform from elp to slp
            </summary>
            <param name="elp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Gauss.Inverse(System.Double[])">
            <summary>
            Inverse gauss transform from slp to elp
            </summary>
            <param name="slp"></param>
            <returns></returns>
        </member>
        <member name="T:MeteoInfoC.Projections.GeneralSinusoidal">
            <summary>
            GeneralSinusoidal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeneralSinusoidal.#ctor">
            <summary>
            Creates a new instance of GeneralSinusoidal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeneralSinusoidal.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.GeostationarySatellite">
            <summary>
            GeostationarySatellite
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.#ctor">
            <summary>
            Creates a new instance of GeostationarySatellite
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GeostationarySatellite.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Gnomonic">
            <summary>
            Gnomonic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Gnomonic.#ctor">
            <summary>
            Creates a new instance of Gnomonic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Gnomonic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Gnomonic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Gnomonic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.GoodeHomolosine">
            <summary>
            GoodeHomolosine
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GoodeHomolosine.#ctor">
            <summary>
            Creates a new instance of GoodeHomolosine
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.GoodeHomolosine.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GoodeHomolosine.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.GoodeHomolosine.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.HammerAitoff">
            <summary>
            HammerAitoff
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.HammerAitoff.#ctor">
            <summary>
            Creates a new instance of HammerAitoff
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.HammerAitoff.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.HammerAitoff.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.ITransform">
            <summary>
            ITransform
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ITransform.Init(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the parameters from the projection info
            </summary>
            <param name="proj">The projection information used to control this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ITransform.Forward(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop, 
            transforming each one.  Only the 0 and 1 values of each coordinate will be 
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ITransform.Inverse(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop, 
            transforming each one.  Only the 0 and 1 values of each coordinate will be 
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ITransform.Special(System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp"></param>
            <param name="p"></param>
            <param name="fac"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.ITransform.Name">
            <summary>
            Gets or sets the string name of this projection.  This should uniquely define the projection,
            and controls what appears in the .prj files.  This name is required.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ITransform.Proj4Name">
            <summary>
            Gets or sets the string name of this projection as it is known to proj4, or should appear 
            in a proj4 string.  This name is required to read and write to proj4 strings.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ITransform.Proj4Aliases">
            <summary>
            This is the list of alternate names to check besides the Proj4Name.  This will not be used 
            for writing Proj4 strings, but may be helpful for reading them.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.ITransform.ProjectionName">
            <summary>
            Get or set projection name enum
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Kavraisky5">
            <summary>
            Kavraisky5 is just a tweaked version of Quartic Authalic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Kavraisky5.#ctor">
            <summary>
            Creates a new instance of Kavraisky5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Kavraisky5.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Kavraisky7">
            <summary>
            Kavraisky6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Kavraisky7.#ctor">
            <summary>
            Creates a new instance of Kavraisky6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Kavraisky7.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Kavraisky7.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.KnownTransforms">
            <summary>
            KnownTransforms
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Aitoff">
            <summary>
            Aitoff
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Albers_Equal_Area">
            <summary>
            Albers Equal Area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Azimuthal_Equidistant">
            <summary>
            Azimuthal Equidistant
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Bipolar_Oblique_Conformal_Conic">
            <summary>
            Bipolar Oblique Conformal Conic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Bonne">
            <summary>
            Bonne
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Cassini">
            <summary>
            Cassini
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Craster_Parabolic">
            <summary>
            Craster Parabolic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Cylindrical_Equal_Area">
            <summary>
            Cylindrical Equal Area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_I">
            <summary>
            Eckert 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_II">
            <summary>
            Eckert 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_III">
            <summary>
            Eckert 3
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_IV">
            <summary>
            Eckert 4
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_V">
            <summary>
            Eckert 5
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Eckert_VI">
            <summary>
            Eckert 6
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Elliptical_Transform">
            <summary>
            Elliptical Transform
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Equidistant_Conic">
            <summary>
            Equidistant Conic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Equidistant_Cylindrical">
            <summary>
            Equidistant_Cylindrical
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Foucaut">
            <summary>
            Foucaut
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Gall_Stereographic">
            <summary>
            Gall Stereographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.General_Sinusoidal">
            <summary>
            General Sinusoidal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Geostationary_Satellite">
            <summary>
            Geostationary Satellite
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Gnomonic">
            <summary>
            Gnomonic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Goode_Homolosine">
            <summary>
            Goode Homolosine
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Hammer_Aitoff">
            <summary>
            Hammer Aitoff
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Kavraisky_V">
            <summary>
            Kavraisky 5
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Kavraisky_VII">
            <summary>
            Kavraisky 7
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Krovak">
            <summary>
            Krovak
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Lambert_Azimuthal_Equal_Area">
            <summary>
            Lambert Azimuthal Equal Area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Lambert_Conformal_Conic">
            <summary>
            Lambert Conformal Conic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Lambert_Equal_Area_Conic">
            <summary>
            Lambert Equal Area Conic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.LongLat">
            <summary>
            Latitude / Longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Loximuthal">
            <summary>
            Loximuthal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.McBryde_Thomas_Flat_Polar_Sine">
            <summary>
            McBryde Thomas Flat Polar Sine
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Mercator">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Miller_Cylindrical">
            <summary>
            Miller Cylindrical
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Mollweide">
            <summary>
            Mollweide
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.New_Zealand_Map_Grid">
            <summary>
            New Zealand Map Grid
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Oblique_Cylindrical_Equal_Area">
            <summary>
            Oblique Cylindrical Equal Area
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Oblique_Mercator">
            <summary>
            Oblique Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Oblique_Stereographic_Alternative">
            <summary>
            Oblique Stereographic Alternative
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Orthographic">
            <summary>
            Orthographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Polyconic">
            <summary>
            Polyconic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Putins_P1">
            <summary>
            PutinsP1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Quartic_Authalic">
            <summary>
            Quartic Authalic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Robinson">
            <summary>
            Robinson
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Sinusoidal">
            <summary>
            Sinusoidal
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Stereographic">
            <summary>
            Stereographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Swiss_Oblique_Mercator">
            <summary>
            Swiss Oblique Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Transverse_Mercator">
            <summary>
            Transverse Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Two_Point_Equidistant">
            <summary>
            Two Point Equidistant
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Universal_Polar_Stereographic">
            <summary>
            Universal Polar Stereographic
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Universal_Transverse_Mercator">
            <summary>
            Universal Transverse Mercator
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Vander_Grinten_I">
            <summary>
            Vander Grinten 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Wagner_IV">
            <summary>
            Wagner 4
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Wagner_V">
            <summary>
            Wagner 5
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Wagner6">
            <summary>
            Wagner 6
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Winkel_I">
            <summary>
            Winkel 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Winkel_II">
            <summary>
            Winkel 2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.KnownTransforms.Winkel_Tripel">
            <summary>
            Winkel Tripel
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Krovak">
             <summary>
             Krovak
             NOTES: According to EPSG the full Krovak projection method should have
                      the following parameters.  Within PROJ.4 the azimuth, and pseudo
                      standard parallel are hardcoded in the algorithm and can't be 
                      altered from outside.  The others all have defaults to match the
                      common usage with Krovak projection.
            
              lat_0 = latitude of centre of the projection
                     
              lon_0 = longitude of centre of the projection
               
              ** = azimuth (true) of the centre line passing through the centre of the projection
            
              ** = latitude of pseudo standard parallel
               
              k  = scale factor on the pseudo standard parallel
              
              x_0 = False Easting of the centre of the projection at the apex of the cone
              
              y_0 = False Northing of the centre of the projection at the apex of the cone
             </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Krovak.#ctor">
            <summary>
            Creates a new instance of Krovak
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Krovak.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Krovak.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Krovak.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.LambertAzimuthalEqualArea">
            <summary>
            LambertAzimuthalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.#ctor">
            <summary>
            Creates a new instance of LambertAzimuthalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertAzimuthalEqualArea.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.LambertConformalConic">
            <summary>
            LambertConformalConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertConformalConic.#ctor">
            <summary>
            Creates a new instance of the Lambert Conformal Conic projection
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertConformalConic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertConformalConic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertConformalConic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertConformalConic.OnSpecial(System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="T:MeteoInfoC.Projections.LambertEqualAreaConic">
            <summary>
            LambertEqualAreaConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertEqualAreaConic.#ctor">
            <summary>
            Creates a new instance of LambertEqualAreaConic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LambertEqualAreaConic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.LongLat">
            <summary>
            LongLat
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LongLat.#ctor">
            <summary>
            Creates a new instance of LongLat
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.LongLat.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LongLat.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.LongLat.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Loximuthal">
            <summary>
            Loximuthal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Loximuthal.#ctor">
            <summary>
            Creates a new instance of Loximuthal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Loximuthal.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Loximuthal.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Loximuthal.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.McBrydeThomasFlatPolarSine">
            <summary>
            McBrydeThomasFlatPolarSine is a tweaked version of Qaurtic Authalic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.McBrydeThomasFlatPolarSine.#ctor">
            <summary>
            Creates a new instance of McBrydeThomasFlatPolarSine
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.McBrydeThomasFlatPolarSine.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Mercator">
            <summary>
            Mercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.#ctor">
            <summary>
            Creates a new instance of Mercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mercator.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.MillerCylindrical">
            <summary>
            MillerCylindrical
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.MillerCylindrical.#ctor">
            <summary>
            Creates a new instance of MillerCylindrical
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.MillerCylindrical.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.MillerCylindrical.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Mollweide">
            <summary>
            Mollweide also acts as the base for Wag4 and Wag5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Mollweide.#ctor">
            <summary>
            Creates a new instance of Mollweide
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Mollweide.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mollweide.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mollweide.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Mollweide.Setup(System.Double)">
            <summary>
            Finalizes the setup based on the provided P paraemter
            </summary>
            <param name="p"></param>
        </member>
        <member name="P:MeteoInfoC.Projections.Mollweide.Cx">
            <summary>
            Gets or sets the x coefficient
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Mollweide.Cy">
            <summary>
            Gets or sets the y coefficient value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Mollweide.Cp">
            <summary>
            Gets or sets the P coefficient
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.NewZealandMapGrid">
            <summary>
            NewZealandMapGrid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.NewZealandMapGrid.#ctor">
            <summary>
            Creates a new instance of NewZealandMapGrid
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.NewZealandMapGrid.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.NewZealandMapGrid.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.NewZealandMapGrid.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.ObliqueCylindricalEqualArea">
            <summary>
            ObliqueCylindricalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueCylindricalEqualArea.#ctor">
            <summary>
            Creates a new instance of ObliqueCylindricalEqualArea
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueCylindricalEqualArea.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueCylindricalEqualArea.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueCylindricalEqualArea.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.ObliqueMercator">
            <summary>
            OrthogonalMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueMercator.#ctor">
            <summary>
            Creates a new instance of OrthogonalMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueMercator.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueMercator.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueMercator.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.ObliqueStereographicAlternative">
            <summary>
            ObliqueStereographicAlternative
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueStereographicAlternative.#ctor">
            <summary>
            Creates a new instance of ObliqueStereographicAlternative
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueStereographicAlternative.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueStereographicAlternative.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.ObliqueStereographicAlternative.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Orthographic">
            <summary>
            Orthographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Orthographic.#ctor">
            <summary>
            Creates a new instance of Orthographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Orthographic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Orthographic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Orthographic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Polyconic">
            <summary>
            Polygconic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.#ctor">
            <summary>
            Creates a new instance of Polygconic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Polyconic.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Proj">
            <summary>
            Proj  contains frequently used static helper methods for doing projection calculations
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj.OneTol">
            <summary>
            Effectively 1 but with a tolerance of 1E-14
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Proj.Atol">
            <summary>
            1E-50
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Aasin(System.Double)">
            <summary>
            Tolerant Arcsin
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Aacos(System.Double)">
            <summary>
            Tolerant ArcCosine
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Asqrt(System.Double)">
            <summary>
            Tollerant Sqrt
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Aatan2(System.Double,System.Double)">
            <summary>
            Tollerant Math.Atan method.
            </summary>
            <param name="n"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Hypot(System.Double,System.Double)">
            <summary>
            Calculates the hypotenuse of a triangle: Sqrt(x*x + y*y);
            </summary>
            <param name="x">The length of one orthogonal leg of the triangle</param>
            <param name="y">The length of the other orthogonal leg of the triangle</param>
            <returns>The length of the diagonal.</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Adjlon(System.Double)">
            <summary>
            
            </summary>
            <param name="lon"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Authset(System.Double)">
            <summary>
            Determines latitude from authalic latitude
            </summary>
            <param name="es">Epsilon squared</param>
            <returns>The array of double values for the apa parameter</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.AuthLat(System.Double,System.Double[])">
            <summary>
            Obtains the authalic latitude
            </summary>
            <param name="beta"></param>
            <param name="apa"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Enfn(System.Double)">
            <summary>
            Obtains the EN parameters for the Meridional distance
            </summary>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Mlfn(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Meridonal length function
            </summary>
            <param name="phi"></param>
            <param name="sphi"></param>
            <param name="cphi"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.InvMlfn(System.Double,System.Double,System.Double[])">
            <summary>
            
            </summary>
            <param name="arg"></param>
            <param name="es"></param>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Qsfn(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="sinphi"></param>
            <param name="e"></param>
            <param name="oneEs"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Tsfn(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="phi"></param>
            <param name="sinphi"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Msfn(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="sinphi"></param>
            <param name="cosphi"></param>
            <param name="es"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Phi2(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="ts"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Zpoly1(System.Double[],System.Double[][],System.Int32)">
            <summary>
            </summary>
            <param name="z"></param>
            <param name="c"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.Zpolyd1(System.Double[],System.Double[][],System.Int32,System.Double[]@)">
            <summary>
            </summary>
            <param name="z"></param>
            <param name="c"></param>
            <param name="n"></param>
            <param name="der"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Proj.CalScaleFactorFromStandardParallel(System.Double)">
            <summary>
            Calculate scale factor from standard parallel
            </summary>
            <param name="stP">standard parallel</param>
            <returns>scale factor</returns>
        </member>
        <member name="T:MeteoInfoC.Projections.PutinsP1">
            <summary>
            PutinsP1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.PutinsP1.#ctor">
            <summary>
            Creates a new instance of PutinsP1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.PutinsP1.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.PutinsP1.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.QuarticAuthalic">
            <summary>
            QuarticAuthalic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.QuarticAuthalic.#ctor">
            <summary>
            Creates a new instance of QuarticAuthalic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.QuarticAuthalic.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.QuarticAuthalic.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.QuarticAuthalic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.QuarticAuthalic.Setup(System.Double,System.Double,System.Boolean)">
            <summary>
            Setup
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="mode"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.Robinson">
            <summary>
            Robinson
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Robinson.#ctor">
            <summary>
            Creates a new instance of Robinson
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Robinson.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Robinson.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Sinusoidal">
            <summary>
            Sinusoidal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.#ctor">
            <summary>
            Creates a new instance of Sinusoidal
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.Setup">
            <summary>
            Handles the original configuration of sinusoidal transforms
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Sinusoidal.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="P:MeteoInfoC.Projections.Sinusoidal.M">
            <summary>
            Gets or sets the double M value
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Sinusoidal.N">
            <summary>
            Gets or sets the N value
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Stereographic">
            <summary>
            Stereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.#ctor">
            <summary>
            Creates a new instance of Stereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Stereographic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.SwissObliqueMercator">
            <summary>
            SwissObliqueMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.SwissObliqueMercator.#ctor">
            <summary>
            Creates a new instance of SwissObliqueMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.SwissObliqueMercator.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.SwissObliqueMercator.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.SwissObliqueMercator.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Transform">
            <summary>
            TransverseMercator is a class allowing the transverse mercator transform as transcribed
            from the 4.6 version of the Proj4 library (pj_tmerc.c)
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.Transform.Modes">
            <summary>
            For transforms that distinguish between polar, oblique and equitorial modes
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Modes.NorthPole">
            <summary>
            North Pole
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Modes.SouthPole">
            <summary>
            South Pole
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Modes.Equitorial">
            <summary>
            Equitorial
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Modes.Oblique">
            <summary>
            Oblique
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.HalfPi">
            <summary>
            Pi/2
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.FortPi">
            <summary>
            Math.Pi / 4
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.TwoPi">
            <summary>
            2 * Math.Pi
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.EPS10">
            <summary>
            1E-10
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.IsAnalHk">
            <summary>
            Analytic Hk
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.IsAnalConv">
            <summary>
            Analytic Conv
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.IsAnalXlYl">
            <summary>
            Analytic Xl Yl
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.IsAnalXpYp">
            <summary>
            Analytic Xp Yp 
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.RadToDeg">
            <summary>
            Radians to Degrees
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.DegToRad">
            <summary>
            Degrees to Radians
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.A">
            <summary>
            The major axis
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Ra">
            <summary>
            1/a
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.OneEs">
            <summary>
            1 - e^2;
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.ROneEs">
            <summary>
            1/OneEs
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.E">
            <summary>
            Eccentricity
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.IsElliptical">
            <summary>
            True if the spheroid is flattened
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Es">
            <summary>
            Eccentricity Squared
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Phi0">
            <summary>
            Central Latitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Lam0">
            <summary>
            Central Longitude
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.X0">
            <summary>
            False Easting
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Y0">
            <summary>
            False Northing
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.K0">
            <summary>
            Scaling Factor
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.ToMeter">
            <summary>
            Scaling to meter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.FromMeter">
            <summary>
            Scaling from meter
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Lambda">
            <summary>
            The integer index representing lambda values in arrays representing geodetic coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Phi">
            <summary>
            The integer index representing phi values in arrays representing geodetic coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.X">
            <summary>
            The integer index representing X values in arrays representing linear coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.Y">
            <summary>
            The integer index representing Y values in arrays representing linear coordinates
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.R">
            <summary>
            The integer index representing real values in arrays representing complex numbers
            </summary>
        </member>
        <member name="F:MeteoInfoC.Projections.Transform.I">
            <summary>
            The integer index representing immaginary values in arrays representing complex numbers
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Init(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the parameters from the projection info
            </summary>
            <param name="proj">The projection information used to control this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.FromKnownTransform(MeteoInfoC.Projections.KnownTransforms)">
            <summary>
            Uses an enumeration to generate a new instance of a known transform class
            </summary>
            <param name="value">The member of the KnownTransforms to instantiate</param>
            <returns>A new ITransform interface representing the specific transform</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Forward(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop, 
            transforming each one.  Only the 0 and 1 values of each coordinate will be 
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Inverse(System.Double[][],System.Int32,System.Int32)">
            <summary>
            Transforms all the coordinates by cycling through them in a loop, 
            transforming each one.  Only the 0 and 1 values of each coordinate will be 
            transformed, higher dimensional values will be copied.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Forward(System.Double[])">
            <summary>
            Transforms a single coordinate, so that specific coordinates can be chosen
            </summary>
            <param name="lp"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Inverse(System.Double[])">
            <summary>
            Transforms a single coordinate, so that specific coordinates can be chosen
            </summary>
            <param name="xy"></param>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Special(System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.Factors)">
            <summary>
            Special factor calculations for a factors calculation
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.OnSpecial(System.Double[],MeteoInfoC.Projections.ProjectionInfo,MeteoInfoC.Projections.Factors)">
            <summary>
            Allows for some custom code during a process method
            </summary>
            <param name="lp">lambda-phi</param>
            <param name="p">The projection coordinate system information</param>
            <param name="fac">The Factors</param>
        </member>
        <member name="P:MeteoInfoC.Projections.Transform.Name">
            <summary>
            Gets or sets the string name of this projection as it appears in .prj files and
            ESRI wkt.  This can also be several names separated by a semicolon.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Transform.Proj4Name">
            <summary>
            Gets or sets the string name of this projection as it should appear in proj4 strings.
            This can also be several names deliminated by a semicolon.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Transform.Proj4Aliases">
            <summary>
            Gets or sets a list of optional aliases that can be used in the place of the Proj4Name.
            This will only be used during reading, and will not be used during writing.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.Transform.ProjectionName">
            <summary>
            Get or set projection name enum
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.OnForward(System.Double[],System.Double[])">
            <summary>
            Transforms cartesian x, y to geodetic lambda, phi
            </summary>
            <param name="lp">in -> the lambda, phi coordinates</param>
            <param name="xy">out -> the cartesian x, y</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeteoInfoC.Projections.Transform.OnCopy(MeteoInfoC.Projections.Transform)">
            <summary>
            This allows for custom behavior to override the base behavior
            </summary>
            <param name="duplicate"></param>
        </member>
        <member name="T:MeteoInfoC.Projections.TransformManager">
            <summary>
            TransformManager
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TransformManager.#ctor">
            <summary>
            Creates a new instance of TransformManager
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TransformManager.GetProj4(System.String)">
            <summary>
            Given the proj4 string, returns the matching transform eg: tmerc.
            </summary>
            <param name="name">The string name</param>
            <returns>The ITransform that has the matching proj4 name</returns>
        </member>
        <member name="M:MeteoInfoC.Projections.TransformManager.GetProjection(System.String)">
            <summary>
            Given the .prj name (ESRI wkt), returns the matching transform
            </summary>
            <param name="name">The string name for the trnasform eg. Transverse_Mercator</param>
            <returns>The ITransform that has the matching ESRI wkt name</returns>
        </member>
        <member name="P:MeteoInfoC.Projections.TransformManager.Transforms">
            <summary>
            The entire list of transforms
            </summary>
        </member>
        <member name="P:MeteoInfoC.Projections.TransformManager.DefaultTransformManager">
            <summary>
            Gets the default instance of the transform manager
            </summary>
        </member>
        <member name="T:MeteoInfoC.Projections.TransverseMercator">
            <summary>
            TransverseMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.#ctor">
            <summary>
            Creates a new instance of TransverseMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.SphericalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform in the special case where there is no flattening of the spherical model of the earth.
            </summary>
            <param name="lp">The input lambda and phi geodetic values organized in an array</param>
            <param name="xy">The output x and y values organized in an array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.EllipticalForward(System.Double[],System.Double[])">
            <summary>
            The forward transform where the spheroidal model of the earth has a flattening factor, 
            matching more closely with the oblique spheroid of the actual earth
            </summary>
            <param name="lp">The double values for geodetic lambda and phi organized into a one dimensional array</param>
            <param name="xy">The double values for linear x and y organized into a one dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.SphericalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transform from a single coordinate of linear units to the same coordinate in geodetic lambda and
            phi units in the special case where the shape of the earth is being approximated as a perfect sphere.
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TransverseMercator.EllipticalInverse(System.Double[],System.Double[])">
            <summary>
            Performs the inverse transfrom from a single coordinate of linear units to the same coordinate in geodetic units    
            </summary>
            <param name="xy">The double linear input x and y values organized into a 1 dimensional array</param>
            <param name="lp">The double geodetic output lambda and phi values organized into a 1 dimensional array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.TwoPointEquidistant">
            <summary>
            TwoPointEquidistant
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TwoPointEquidistant.#ctor">
            <summary>
            Creates a new instance of TwoPointEquidistant
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.TwoPointEquidistant.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TwoPointEquidistant.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.TwoPointEquidistant.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.UniversalPolarStereographic">
            <summary>
            UniversalPolarStereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.UniversalPolarStereographic.#ctor">
            <summary>
            Creates a new instance of UniversalPolarStereographic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.UniversalPolarStereographic.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.UniversalTransverseMercator">
            <summary>
            UniversalTransverseMercator
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.UniversalTransverseMercator.#ctor">
            <summary>
            Creates a new instance of UniversalTransverseMercator.  The only difference
            for this one is that the proj4 name is a little different and when reading
            from proj4, we have to parse the zone and south parameters in order to
            create the transverse mercator projection.
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.UniversalTransverseMercator.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.VanderGrinten1">
            <summary>
            VanderGrinten1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.VanderGrinten1.#ctor">
            <summary>
            Creates a new instance of VanderGrinten1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.VanderGrinten1.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.VanderGrinten1.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Wagner4">
            <summary>
            Wagner4
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner4.#ctor">
            <summary>
            Creates a new instance of Wagner4
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner4.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Wagner5">
            <summary>
            Wagner5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner5.#ctor">
            <summary>
            Creates a new instance of Wagner5
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner5.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Wagner6">
            <summary>
            Wagner6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner6.#ctor">
            <summary>
            Creates a new instance of Wagner6
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner6.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Wagner6.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Winkel1">
            <summary>
            Winkel1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel1.#ctor">
            <summary>
            Creates a new instance of Winkel1
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel1.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel1.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel1.OnInverse(System.Double[],System.Double[])">
            <summary>
            The inverse transform from linear units to geodetic units
            </summary>
            <param name="xy">The double values for the input x and y values stored in an array</param>
            <param name="lp">The double values for the output lambda and phi values stored in an array</param>
        </member>
        <member name="T:MeteoInfoC.Projections.Winkel2">
            <summary>
            Winkel2
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel2.#ctor">
            <summary>
            Creates a new instance of Winkel2
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel2.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="M:MeteoInfoC.Projections.Winkel2.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="T:MeteoInfoC.Projections.WinkelTripel">
            <summary>
            WinkelTripel
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.WinkelTripel.#ctor">
            <summary>
            Creates a new instance of WinkelTripel
            </summary>
        </member>
        <member name="M:MeteoInfoC.Projections.WinkelTripel.OnForward(System.Double[],System.Double[])">
            <summary>
            The forward transform from geodetic units to linear units
            </summary>
            <param name="lp">The array of lambda, phi coordinates</param>
            <param name="xy">The array of x, y coordinates</param>
        </member>
        <member name="M:MeteoInfoC.Projections.WinkelTripel.OnInit(MeteoInfoC.Projections.ProjectionInfo)">
            <summary>
            Initializes the transform using the parameters from the specified coordinate system information
            </summary>
            <param name="projInfo">A ProjectionInfo class contains all the standard and custom parameters needed to initialize this transform</param>
        </member>
        <member name="T:MeteoInfoC.Shape.CircleShape">
            <summary>
            Circle shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CircleShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CircleShape.#ctor(MeteoInfoC.PointD,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="cPoint">Center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:MeteoInfoC.Shape.CircleShape.SetPoints(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Override SetPoints method
            </summary>
            <param name="points">The points</param>
        </member>
        <member name="M:MeteoInfoC.Shape.CircleShape.Clone">
            <summary>
            Clone PlygonShape
            </summary>
            <returns>PolygonShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.CircleShape.IsPointInside(MeteoInfoC.PointD)">
            <summary>
            Determine if a point is inside this circle shape
            </summary>
            <param name="point">The point</param>
            <returns>Is inside or not</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.ColorSet">
            <summary>
            Color set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.ColorSet.#ctor(MeteoInfoC.Legend.ColorBreak)">
            <summary>
            Constructor
            </summary>
            <param name="aCB">color break</param>
        </member>
        <member name="P:MeteoInfoC.Shape.ColorSet.LColor">
            <summary>
            Get or set point color
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.CurveLineShape">
            <summary>
            Curve line shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CurveLineShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CurveLineShape.Clone">
            <summary>
            Clone polylineshape
            </summary>
            <returns>PolylineShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.CurveLineShape.ValueClone">
            <summary>
            Value clone
            </summary>
            <returns>new polyline shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.CurvePolygonShape">
            <summary>
            Curve polygon shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CurvePolygonShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.CurvePolygonShape.Clone">
            <summary>
            Clone CurvePolygonShape
            </summary>
            <returns>CurvePolygonShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.CurvePolygonShape.ValueClone">
            <summary>
            Clone CurvePolygonShape with values
            </summary>
            <returns>new curve polygon shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.EllipseShape">
            <summary>
            Ellipse shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.EllipseShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.EllipseShape.#ctor(MeteoInfoC.PointD,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="cPoint">Center point</param>
            <param name="a">Radius of x direction</param>
            <param name="b">Radius of y direction</param>
        </member>
        <member name="M:MeteoInfoC.Shape.EllipseShape.Clone">
            <summary>
            Clone PlygonShape
            </summary>
            <returns>PolygonShape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.GraphicCollection">
            <summary>
            Graphic collection
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.GraphicCollection.GraphicList">
            <summary>
            Get graphic list
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.GraphicCollection.Count">
            <summary>
            Get graphic number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.GraphicCollection.Extent">
            <summary>
            Get extent
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.Add(MeteoInfoC.Shape.Graphic)">
            <summary>
            Add a graphic
            </summary>
            <param name="aGraphic">graphic</param>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.Insert(System.Int32,MeteoInfoC.Shape.Graphic)">
            <summary>
            Insert a graphic
            </summary>
            <param name="index">index</param>
            <param name="aGraphic">graphic</param>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.Remove(MeteoInfoC.Shape.Graphic)">
            <summary>
            Remove a grphic
            </summary>
            <param name="aGraphic">graphic</param>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.RemoveAt(System.Int32)">
            <summary>
            Remove at an index
            </summary>
            <param name="index">index</param>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.RemoveAll">
            <summary>
            Remove all graphics
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.GraphicCollection.SelectGraphics(MeteoInfoC.Global.Extent,MeteoInfoC.Shape.GraphicCollection@)">
            <summary>
            Select graphics by an extent
            </summary>
            <param name="aExtent">extent</param>
            <param name="selectedGraphics">ref selected graphics</param>
            <returns>if selected</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.Line.P1">
            <summary>
            Point 1
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.Line.P2">
            <summary>
            Point 2
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.PointM">
            <summary>
            Point M class
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PointM.M">
            <summary>
            Measure
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointM.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointM.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="m">m</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PointM.ToPointD">
            <summary>
            Convert to PointD
            </summary>
            <returns>PointD</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PointMShape">
            <summary>
            Point M shape class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointMShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointMShape.Clone">
            <summary>
            Clone PointMShape
            </summary>
            <returns>PointMShape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PointZ">
            <summary>
            Point Z class
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PointZ.Z">
            <summary>
            Z coordinate
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PointZ.M">
            <summary>
            Measure
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointZ.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointZ.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="m">m</param>
            <param name="z">z</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PointZ.ToPointD">
            <summary>
            Convert to PointD
            </summary>
            <returns>PointD</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Polygon.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.OutLine">
            <summary>
            Get or set outline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.HoleLines">
            <summary>
            Get or set hole lines
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.Extent">
            <summary>
            Get extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.Rings">
            <summary>
            Get rings
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.HasHole">
            <summary>
            Get if has hole
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Polygon.RingNumber">
            <summary>
            Get ring number
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Polygon.AddHole(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Add a hole line
            </summary>
            <param name="points">point list</param>
        </member>
        <member name="T:MeteoInfoC.Shape.PolygonMShape">
            <summary>
            PolygonMShape class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonMShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonMShape.MArray">
            <summary>
            Get Measurement Array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonMShape.MRange">
            <summary>
            Get M range array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonMShape.Clone">
            <summary>
            Clone PolygonShape
            </summary>
            <returns>PolygonShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonMShape.ValueClone">
            <summary>
            Clone PolygonShape with values
            </summary>
            <returns>new polygon shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PolyLine">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolyLine.PointList">
            <summary>
            Get or set point list
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolyLine.Extent">
            <summary>
            Get extent
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.SetPoints(System.Drawing.PointF[])">
            <summary>
            Set points
            </summary>
            <param name="points">points</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.IsClosed">
            <summary>
            Determine if the polyline is closed
            </summary>
            <returns>if is closed</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.GetLength">
            <summary>
            Get length
            </summary>
            <returns>length</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.GetLengths">
            <summary>
            Get lengths of each segment
            </summary>
            <returns>length array</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolyLine.GetPositions(System.Double)">
            <summary>
            Get position list: x, y, angle
            </summary>
            <param name="aLen">segment length</param>
            <returns>position list</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PolylineMShape">
            <summary>
            PolylineM shape class
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineMShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineMShape.Clone">
            <summary>
            Clone polylineM shape
            </summary>
            <returns>PolylineMShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineMShape.ValueClone">
            <summary>
            Value clone
            </summary>
            <returns>new polyline Z shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.RectangleShape">
            <summary>
            Rectangle shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.RectangleShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.RectangleShape.Clone">
            <summary>
            Clone PlygonShape
            </summary>
            <returns>PolygonShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.RectangleShape.IsPointInside(MeteoInfoC.PointD)">
            <summary>
            Determine if a point is inside this circle shape
            </summary>
            <param name="point">The point</param>
            <returns>Is inside or not</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.Shape">
            <summary>
            Shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Shape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Shape.ShapeType">
            <summary>
            Get or set shape type
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Shape.Visible">
            <summary>
            Get or set visible
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Shape.Selected">
            <summary>
            Get or set selected
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Shape.Extent">
            <summary>
            Get or set extent
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Shape.LegendIndex">
            <summary>
            Get or set legend break index
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Shape.GetPoints">
            <summary>
            Get points
            </summary>
            <returns>point list</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.Shape.SetPoints(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Set points
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Shape.Clone">
            <summary>
            Clone
            </summary>
            <returns>object</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PointShape">
            <summary>
            Point shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShape.Point">
            <summary>
            Get or set point coordinate
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShape.Value">
            <summary>
            Get or set value
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShape.GetPoints">
            <summary>
            Override get points
            </summary>
            <returns>points</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShape.SetPoints(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Override set points
            </summary>
            <param name="points">points</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShape.updateExtent">
            <summary>
            Update point extent
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShape.Clone">
            <summary>
            Clone PointShape
            </summary>
            <returns>PointShape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.Graphic">
            <summary>
            Graphic
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Graphic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Graphic.#ctor(MeteoInfoC.Shape.Shape,MeteoInfoC.Legend.ColorBreak)">
            <summary>
            Constructor
            </summary>
            <param name="shape">shape</param>
            <param name="legend">legend</param>
        </member>
        <member name="P:MeteoInfoC.Shape.Graphic.Shape">
            <summary>
            Get or set shape
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Graphic.Legend">
            <summary>
            Get or set legend
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Graphic.ResizeAbility">
            <summary>
            Get resize ability
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.Graphic.Tag">
            <summary>
            Get or set tag
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.Graphic.VerticeEditUpdate(System.Int32,System.Double,System.Double)">
            <summary>
            Vertice edited update
            </summary>
            <param name="vIdx">vertice index</param>
            <param name="newX">new X</param>
            <param name="newY">new Y</param>
        </member>
        <member name="M:MeteoInfoC.Shape.Graphic.ExportToXML(System.Xml.XmlDocument@,System.Xml.XmlElement)">
            <summary>
            Export to XML document
            </summary>
            <param name="doc">xml document</param>
            <param name="parent">parent xml element</param>
        </member>
        <member name="M:MeteoInfoC.Shape.Graphic.ImportFromXML(System.Xml.XmlNode)">
            <summary>
            Import from XML node
            </summary>
            <param name="graphicNode">graphic xml node</param>
        </member>
        <member name="T:MeteoInfoC.Shape.PointZShape">
            <summary>
            Point shape
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PointZShape.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PointZShape.M">
            <summary>
            M
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointZShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointZShape.Point">
            <summary>
            Get or set point
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointZShape.Clone">
            <summary>
            Clone PointShape
            </summary>
            <returns>PointShape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PolylineZShape">
            <summary>
            PolylineZ shape
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineZShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineZShape.ZArray">
            <summary>
            Get Z Array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineZShape.MArray">
            <summary>
            Get Measurement Array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineZShape.ZRange">
            <summary>
            Get Z range array
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineZShape.MRange">
            <summary>
            Get M range array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineZShape.Clone">
            <summary>
            Clone polylineZ shape
            </summary>
            <returns>PolylineZShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineZShape.ValueClone">
            <summary>
            Value clone
            </summary>
            <returns>new polyline Z shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.WindArraw">
            <summary>
            Wind arraw
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindArraw.size">
            <summary>
            size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindArraw.length">
            <summary>
            length
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindArraw.angle">
            <summary>
            angle
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WindArraw.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WindArraw.Clone">
            <summary>
            Clone WindArraw
            </summary>
            <returns>WindArraw</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.CloudCoverage">
            <summary>
            Cloud coverage
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.CloudCoverage.sPoint">
            <summary>
            Start point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.CloudCoverage.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.CloudCoverage.cloudCover">
            <summary>
            Cloud cover
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.CloudCoverage.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.StationModelShape">
            <summary>
            Station model symbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.windBarb">
            <summary>
            Wind barb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.weatherSymbol">
            <summary>
            Weather symbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.cloudCoverage">
            <summary>
            Cloud coverage
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.dewPoint">
            <summary>
            Dew point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.pressure">
            <summary>
            Pressure
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.StationModelShape.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.StationModelShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.StationModelShape.Clone">
            <summary>
            Clone StationModel
            </summary>
            <returns>StationModel</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.WeatherSymbol">
            <summary>
            Weathe symbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WeatherSymbol.size">
            <summary>
            Size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WeatherSymbol.weather">
            <summary>
            Weather
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WeatherSymbol.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WeatherSymbol.Clone">
            <summary>
            Clone WeatherSymbol
            </summary>
            <returns>WeatherSymbol</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.WindBarb">
            <summary>
            Wind barb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindBarb.size">
            <summary>
            size
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindBarb.angle">
            <summary>
            angle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindBarb.windSpeed">
            <summary>
            wind speed
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindBarb.windSpeesLine">
            <summary>
            wind speed line
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WindBarb.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.WindBarb.Clone">
            <summary>
            Clone WindBarb
            </summary>
            <returns>WindBarb</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.WindSpeedLine">
            <summary>
            Wind speed lines of wind barb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindSpeedLine.W20">
            <summary>
            Wind speed 20 m/s
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindSpeedLine.W4">
            <summary>
            Wind speed 4 m/s
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.WindSpeedLine.W2">
            <summary>
            Wind speed 2 m/s
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.PointShapeSet">
            <summary>
            Point shape set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PointShapeSet.#ctor(MeteoInfoC.Legend.PointBreak)">
            <summary>
            Constructor
            </summary>
            <param name="aPB"></param>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.PointColor">
            <summary>
            Get or set point color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.PointSize">
            <summary>
            Get or set point size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.PointStyle">
            <summary>
            Get or set point style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.PointOutlineColor">
            <summary>
            Get or set point outline color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.DrawOutline">
            <summary>
            Get or set if draw point outline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.DrawFill">
            <summary>
            Get or set if draw fill
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PointShapeSet.DrawPoint">
            <summary>
            Get or set if draw point
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.PolygonShape">
            <summary>
            Polygon shape
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolygonShape.lowValue">
            <summary>
            Start value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolygonShape.highValue">
            <summary>
            End value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolygonShape._numParts">
            <summary>
            Part number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolygonShape.parts">
            <summary>
            Part array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.Points">
            <summary>
            Get or set points
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.PartNum">
            <summary>
            Get or set part number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.PointNum">
            <summary>
            Get point number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.Polygons">
            <summary>
            Get or set polygons
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.Area">
            <summary>
            Get area
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShape.SphericalArea">
            <summary>
            Get spherical area
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.AddHole(System.Collections.Generic.List{MeteoInfoC.PointD},System.Int32)">
            <summary>
            Add a hole line
            </summary>
            <param name="points">point list</param>
            <param name="polygonIdx">polygon index</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.GetPoints">
            <summary>
            Override get points method
            </summary>
            <returns>points</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.SetPoints(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Override set points
            </summary>
            <param name="points">points</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.Clone">
            <summary>
            Clone PolygonShape
            </summary>
            <returns>PolygonShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.ValueClone">
            <summary>
            Clone PolygonShape with values
            </summary>
            <returns>new polygon shape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShape.IsPointInside(MeteoInfoC.PointD)">
            <summary>
            Determine if a point is inside this circle shape
            </summary>
            <param name="point">The point</param>
            <returns>Is inside or not</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.PolygonShapeSet">
            <summary>
            Polygon shape set
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolygonShapeSet.#ctor(MeteoInfoC.Legend.PolygonBreak)">
            <summary>
            Constructor
            </summary>
            <param name="aPGB"></param>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.PolygonColor">
            <summary>
            Get or set polygon color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.OutlineColor">
            <summary>
            Get or set polygon outline color
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.DrawOutline">
            <summary>
            Get or set if draw outline
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.DrawFill">
            <summary>
            Get or set if draw fill
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.DrawPolygon">
            <summary>
            Get or set if draw polygon
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.OutlineSize">
            <summary>
            Get or set outline size
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.UsingHatchStyle">
            <summary>
            Get or set if using hatch style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.Style">
            <summary>
            Get or set hatch style
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolygonShapeSet.BackColor">
            <summary>
            Get or set hatch style
            </summary>
        </member>
        <member name="T:MeteoInfoC.Shape.PolylineShape">
            <summary>
            Polyline shape
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolylineShape._points">
            <summary>
            Points list
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolylineShape.value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolylineShape._numParts">
            <summary>
            Part number
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.PolylineShape.parts">
            <summary>
            Part array
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineShape.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.Points">
            <summary>
            Get or set Points
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.PartNum">
            <summary>
            Get or set part number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.PointNum">
            <summary>
            Get Point number
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.PolyLines">
            <summary>
            Get or set polylines
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.IsClosed">
            <summary>
            Get if is closed
            </summary>
        </member>
        <member name="P:MeteoInfoC.Shape.PolylineShape.Length">
            <summary>
            Get length
            </summary>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineShape.GetPoints">
            <summary>
            Override get points method
            </summary>
            <returns>points</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineShape.SetPoints(System.Collections.Generic.List{MeteoInfoC.PointD})">
            <summary>
            Override set points
            </summary>
            <param name="points">points</param>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineShape.Clone">
            <summary>
            Clone polylineshape
            </summary>
            <returns>PolylineShape</returns>
        </member>
        <member name="M:MeteoInfoC.Shape.PolylineShape.ValueClone">
            <summary>
            Value clone
            </summary>
            <returns>new polyline shape</returns>
        </member>
        <member name="T:MeteoInfoC.Shape.ShapeTypes">
            <summary>
            Shape type
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Polyline">
            <summary>
            Polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Polygon">
            <summary>
            Polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.PointZ">
            <summary>
            PointZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.PolylineZ">
            <summary>
            PolyLineZ
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.PointM">
            <summary>
            Measured Point
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.PolylineM">
            <summary>
            Measured Polyline
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.PolygonM">
            <summary>
            Measured Polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.WindArraw">
            <summary>
            Wind Arraw
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.WindBarb">
            <summary>
            WindBarb
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.WeatherSymbol">
            <summary>
            WeatherSymbol
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.StationModel">
            <summary>
            StationModel
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.CurveLine">
            <summary>
            Curve line
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.CurvePolygon">
            <summary>
            Curve polygon
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:MeteoInfoC.Shape.ShapeTypes.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="T:MeteoInfoC.PointD">
            <summary>
            double point class
            </summary>
        </member>
        <member name="F:MeteoInfoC.PointD.X">
            <summary>
            X
            </summary>
        </member>
        <member name="F:MeteoInfoC.PointD.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="M:MeteoInfoC.PointD.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:MeteoInfoC.PointD.Clone">
            <summary>
            Clone
            </summary>
            <returns>PointD object</returns>
        </member>
        <member name="T:MeteoInfoC.frmProperty">
            <summary>
            Property form
            </summary>
        </member>
        <member name="M:MeteoInfoC.frmProperty.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MeteoInfoC.frmProperty.#ctor(System.Boolean)">
            <summary>
            Constructro
            </summary>
            <param name="apply"></param>
        </member>
        <member name="M:MeteoInfoC.frmProperty.SetObject(System.Object)">
            <summary>
            Set object
            </summary>
            <param name="aObj"></param>
        </member>
        <member name="M:MeteoInfoC.frmProperty.SetParent(System.Object)">
            <summary>
            Set parent
            </summary>
            <param name="parent">parent object</param>
        </member>
        <member name="M:MeteoInfoC.frmProperty.SetShapeSet(MeteoInfoC.Shape.ShapeTypes)">
            <summary>
            Set ShapeSet
            </summary>
            <param name="aST"></param>
        </member>
        <member name="F:MeteoInfoC.frmProperty.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeteoInfoC.frmProperty.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeteoInfoC.frmProperty.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeteoInfoC.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MeteoInfoC.Resources.Resources.Pan_Open">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:MeteoInfoC.Resources.Resources.zoom_in">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:MeteoInfoC.Resources.Resources.zoom_out">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
    </members>
</doc>
